---

title: System, method and computer program product for generating an encoded name for unwanted code
abstract: A naming system, method and computer program product are provided. In use, unwanted code including at least one attribute is identified. In addition, an encoded name is generated for the unwanted code, where at least a portion of the encoded name represents the at least one attribute of the unwanted code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561191&OS=08561191&RS=08561191
owner: McAfee, Inc.
number: 08561191
owner_city: Santa Clara
owner_country: US
publication_date: 20070119
---
Increasingly computer systems have needed to protect themselves against unwanted code. Such unwanted computer code has generally taken the form of viruses worms Trojan horses spyware ad ware and so forth. To combat the dissemination of unwanted code systems e.g. intrusion detection systems virus scanners etc. have been created for identifying new types of unwanted code and for generating data e.g. signatures etc. utilized for future detection of such unwanted code. For each identification of a new instance of unwanted code a unique name is typically generated for subsequent identification thereof. However names of unwanted code are generally limited in length thus limiting the ability of the name to adequately describe the unwanted code.

A naming system method and computer program product are provided for generating an encoded name for unwanted code. In use unwanted code including at least one attribute is identified. In addition an encoded name is generated for the unwanted code where at least a portion of the encoded name represents the at least one attribute of the unwanted code.

Coupled to the networks are servers which are capable of communicating over the networks . Also coupled to the networks and the servers is a plurality of clients . Such servers and or clients may each include a desktop computer lap top computer hand held computer mobile phone personal digital assistant PDA peripheral e.g. printer etc. any component of a computer device and or any other type of logic for that matter. In order to facilitate communication among the networks at least one gateway is optionally coupled therebetween.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation may have resident thereon any desired operating system. It will be appreciated that an embodiment may also be implemented on platforms and operating systems other than those mentioned. One embodiment may be written using JAVA C and or C language or other programming languages along with an object oriented programming methodology Object oriented programming OOP has become increasingly used to develop complex applications.

Of course the various embodiments set forth herein may be implemented utilizing hardware software or any desired combination thereof. For that matter any type of logic may be utilized which is capable of implementing the various functionality set forth herein.

As shown in operation unwanted code that includes at least one attribute is identified. The unwanted code may include any type of data and or instructions etc. that is unwanted and that is capable of being located on a device. Such device may include any of the servers and or clients described above with respect to . Just by way of example the unwanted code may include malware e.g. known unknown viruses worms etc. spyware adware etc. In one exemplary embodiment the unwanted code may be capable of exploiting an operating system and or software located on the computer.

In addition in the context of the present description the attribute may include any characteristic trait feature aspect and or quality etc. associated with the unwanted code. In one possible embodiment the attribute may optionally reflect an attribute utilized in proliferating e.g. spreading maintaining etc. the unwanted code. In another embodiment the attribute may include a type of the unwanted code. For example the type of the unwanted code may include a worm a virus generic malware parasitic internet relay chat related IRC peer to peer related downloadable etc.

In other embodiments the attribute may include an effect of the unwanted code. For example the effect may include an effect on a computer on which the unwanted code is located. By way of illustration only such effect may include modifying an Internet homepage lowering Internet Explorer zones stealing passwords and or any other effect capable of being attributed to the unwanted code.

In yet another embodiment the attribute may include a file format of the unwanted code. The file format may include a type of file in which the unwanted code is stored e.g. dynamic link library DLL file executable file script file etc. . In addition the file format may include an application programming interface API capable of utilizing the file e.g. Windows etc. . Further the file format may include a configuration of the unwanted code such as for example encrypted packed etc.

While various embodiments of attributes associated with unwanted code have been described herein it should be noted that anything capable of being associated with the unwanted code may be included as an attribute of the unwanted code. Moreover while a single attribute has been described above it should also be noted that a plurality of attributes may be associated with the unwanted code in other embodiments. Still yet the plurality of attributes may include any combination of different attributes such as for example the attributes described herein.

Further an encoded name for the unwanted code is generated. See operation . At least a portion of the encoded name represents at least one attribute of the unwanted code. The encoded name of the unwanted code may include any identifier capable of identifying the unwanted code and is encoded. Optionally in some exemplary embodiments a bitmask may be utilized for encoding the name but of course any other encoding scheme capable of encoding a name may be utilized.

Further the encoded name may be in any desired format. For example the encoded name may take the form of a hexadecimal format. In other various embodiments the encoded name may include a sequence of characters numbers etc. Thus in some embodiments the encoded name may include any name converted to a particular format.

Moreover at least a portion of the encoded name may represent any desired number e.g. 8 16 32 etc. of attributes of the unwanted code. Just by way of example if the unwanted code is associated with a virus attribute the encoded name may represent such virus attribute. Accordingly the encoded name of the unwanted code may be utilized for describing attributes of the unwanted code.

More illustrative information will now be set forth regarding various optional architectures and features of different embodiments with which the foregoing method may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

As shown in operation unwanted code is identified. The unwanted code may be identified utilizing an intrusion detection system a virus scanner a firewall and or any other application capable of identifying unwanted code. In one optional embodiment the unwanted code may be identified utilizing heuristics for example. Manual identification is also contemplated.

An attribute of the unwanted code is also identified a shown in operation . The attribute may be identified utilizing any desired technique. In various embodiments the attribute may be identified based on a format of the unwanted code a type of the unwanted code an effect of the unwanted code etc.

In addition a bit associated with the attribute is set in a series of bits as shown in operation . In one embodiment a different bit may be associated with each of a plurality of different attributes. Thus the bit may be included in a series of bits where each of the bits in the series of bits is associated with a different attribute.

In one embodiment the bit may be set by changing the bit from a 0 to a 1. In this way bits set to 1 may indicate that unwanted code includes an attribute associated with such bit whereas bits set to 0 may indicate that unwanted code does not include the attribute associated with such bit. Of course however the bit may be set in any desired manner.

As a result setting the bit associated with a particular attribute may indicate that associated unwanted code includes the particular attribute. For example if a bit associated with a virus attribute is set it may be indicated that associated unwanted code is a virus. As another example if a bit associated with a script file attribute is set it may be indicated that the associated unwanted code takes the form of a script file.

It is then determined whether there are any more attributes associated with the unwanted code as shown in decision . If it is determined that there are additional attributes associated with the unwanted code a bit corresponding to each attribute is set as shown. Thus a series of bits may indicate a plurality of attributes of unwanted code. In one embodiment such series of bits may be stored in a database for each type of unwanted code.

If it is determined that there are not additional attributes associated with the unwanted code the method continues as shown. Specifically as shown in operation a decimal value of each of the set bits it identified. In one embodiment each of the bits in a series of bits may be associated with a unique decimal value. Accordingly each attribute associated with each bit may also be associated with a unique decimal value. Moreover attribute information including attributes associated with unwanted code and unique value information including the associated decimal values may be stored in a database for each bit in a series of bits associated with unwanted code.

Such unique value may optionally include a predefined value. For example the unique value may be predefined by any entity such as for example an entity providing a system that identifies unwanted code. In one exemplary embodiment the unique value of each bit may be predefined by AVERT of McAfee Inc.

Optionally the decimal values of the bits may include any desired decimal values. In one embodiment the decimal values may each be included in multiples of two e.g. 32768 16384 8192 etc. . In another embodiment the decimal values may include any decimal values such that an algorithm may be applied to a sum of any number of the decimal values for determining each of the decimal values represented in the sum.

Still yet the identified decimal values are summed as shown in operation . Thus a single decimal value may represent a plurality of decimal values. Consequently the single decimal value may represent a plurality of attributes of unwanted code.

Moreover the summed decimal value is converted to a hexadecimal value. Note operation . In particular the summed decimal value may be converted from a decimal format to a hexadecimal format. For example the summed decimal value may be converted to a hexadecimal value that is equivalent in value to the summed decimal value. In this way the hexadecimal value may provide a condensed value e.g. shorter length less number of characters etc. with respect to the summed decimal value.

At least a portion of a name of the unwanted code is then generated based on the hexadecimal value as shown in operation . In one embodiment at least a portion of the name may include the hexadecimal value. Thus the name of the unwanted code may be encoded. Further the name of the unwanted code may be utilized for identifying any number of attributes of the unwanted code.

As an option the name of the unwanted code may also include a unique identifier not shown . Such unique identifier may include any sequence of characters numbers etc. capable of uniquely identifying the unwanted code. In this way the name of the unwanted code may include a value representing any number of attributes of the unwanted code as well as a unique identifier that ensures a uniqueness of the name for the unwanted code.

In one embodiment the name may be encoded such that a number of attributes may be represented in the name while still limiting the length of the name and or while still complying with any name length restrictions. For example each attribute of the unwanted code may not necessarily be spelled out in the name. In this way the encoded name itself may describe the unwanted code thus providing relevance between the encoded name and the unwanted code and further eliminating any need for an external description thereof.

In another embodiment the encoded name may identify data utilized for detecting instances of the unwanted code. Such data may include for example signatures drivers data located in data DAT files etc. In addition the data may be utilized by a detection system e.g. intrusion detection system virus scanner etc. for detecting instances of the unwanted code. Thus the data utilized for detecting instances of unwanted code may be named according to the encoded name of the unwanted code in the manner described above.

In still yet another embodiment the encoded name may allow users of detection systems to be dynamically informed of the detection of the unwanted code utilizing the encoded name. Further such users may be provided with attributes of the unwanted code based on the encoded name. For example users may optionally select the encoded name which may be presented via an alert or a search of a database of information associated with unwanted code and such encoded name may be automatically decoded for identifying and presenting attributes of the detected unwanted code to the user. As a result the need for manual entry of descriptions of unwanted code may be prevented and users may be efficiently informed of attributes of detected unwanted code.

Optionally the encoded name of the unwanted code may be unencoded utilizing an algorithm not shown . In one embodiment the algorithm may include binary operators utilized for identifying each of the decimal values within encoded name. Moreover such decimal values may then be compared with a database of decimal values for identifying attributes associated therewith. As a result the unencoded name may identify attributes of the associated unwanted code.

As shown the data structure includes a plurality of bits . The plurality of bits may include a representation of a particular type of unwanted code that has been detected e.g. via an intrusion detection system firewall etc. . For example such particular type of unwanted code may be newly detected such that a name may be needed for uniquely identifying the unwanted code and any future detections thereof.

In addition each bit is associated with an attribute . Also the attributes are associated with attribute topics . Such attribute topics include malware attributes and file attributes as shown. Table 1 illustrates an exemplary list of attributes that may be associated with unwanted code and therefore that may optionally be represented by bits. It should be noted that the attributes described in Table 1 are set forth for illustration only and should not be construed as limiting in any manner.

Further the bits are ordered according to the attribute topics . For example as shown malware attributes may be associated with a first section of bits and file attributes may be associated with a second section of bits subsequent to the first section of bits. Of course it should be noted that the bits and associated attributes may be ordered in any desired manner.

Moreover the bits are each associated with a decimal value . The decimal values may be unique for each bit as shown. Further the decimal values may be predefined such that unencoding will result in only one possible associated description. Still yet the data structure may be utilized for setting bits to 0 or 1. Each set bit may represent an attribute that is associated with the unwanted code.

Thus as shown the unwanted code associated with the present embodiment may include attribute02 attribute03 attribute05 and so forth. The decimal values associated with the set bits and therefore the attributes associated with the unwanted code may be identified utilizing the data structure . Such data structure and or any of the information associated therewith may be stored in a database for access by detection systems.

The decimal values associated with the set bits may also be summed such that a single decimal value may identify the attributes associated with the unwanted code. The summed decimal value may then be converted as will be shown in such that the converted decimal value may be utilized for naming the unwanted code.

As shown the summed decimal value may be converted to a hexadecimal value . The hexadecimal value may represent a condensed value of the summed decimal value . In this way the hexadecimal value may be utilized for generating a name of the unwanted code.

For example the hexadecimal value may be included in the name of the unwanted code. In one embodiment the hexadecimal value may be included in a portion of the name of the unwanted code. With respect to the present embodiment where the hexadecimal value is 6F9A the name of the unwanted code may include ID6F9A for example. Of course however the hexadecimal value may also make up the entire name of the unwanted code.

As shown 16 attributes may be available for being associated with unwanted code utilizing 16 bits see . Further such 16 bits may then be converted to a hexadecimal format thus allowing only 4 hexadecimal characters to represent such 16 attributes. In other various embodiments 8 attributes may be available with respect to 8 bits such that only 2 hexadecimal characters may be utilized to represent the 8 attributes. Likewise 32 attributes may be represented by 8 hexadecimal characters. Of course it should be noted that any number of attributes may be available for being associated with unwanted code and that the number of hexadecimal characters utilized to represent such attributes will vary accordingly.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

