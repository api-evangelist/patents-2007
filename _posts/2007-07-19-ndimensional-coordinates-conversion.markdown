---

title: N-dimensional coordinates conversion
abstract: Aspects of the subject matter described herein relate to converting between polar and rectangular coordinates. In aspects, the Nth polar angle is measured upward from the sine-projection of the Nth component in the (Nâˆ’1)th dimension. The last polar coordinate is zero if and only if the corresponding last rectangular coordinate is zero. The conversion may be applied in any number of dimensions without re-writing the conversion logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473538&OS=08473538&RS=08473538
owner: Microsoft Corporation
number: 08473538
owner_city: Redmond
owner_country: US
publication_date: 20070719
---
Programmers write programs that draw pictures and animate scenes on computer screens. To write these programs programmers typically use mathematical formulations for computational geometry in two three and four dimensions. These mathematical formulations are highly specialized to a particular dimensionality. There is one formulation for two dimensions another formulation for three dimensions and yet another formulation for four dimensions. These formulations are based on conventions established during the last three centuries and have been baked into mathematics curricula for generations. Unfortunately the formulations are error prone when encoded in computer software and are not extensible to other dimensions.

Briefly aspects of the subject matter described herein relate to converting between polar and rectangular coordinates. In aspects the Nth polar angle is measured upward from the sine projection of the Nth component in the N 1 th dimension. The last polar coordinate is zero if and only if the corresponding last rectangular coordinate is zero. The conversion may be applied in any number of dimensions without re writing the conversion logic.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects should be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A programming interface or more simply interface may be viewed as any mechanism process or protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s and the like of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s and the like of other component s . The term segment of code is intended to include one or more instructions or lines of code and includes for example code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium . In the view of one may consider interface objects and as separate interfaces of the same system and one may also consider that objects and plus medium comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation for example depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. Below are some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide as 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface may be subdivided to convert the communications of the interface into multiple interfaces and so on while achieving the same result.

As illustrated in the function provided by interface may be subdivided into multiple interfaces and so forth while achieving the same result. Similarly interface of the second code segment which receives information from the first code segment may be factored into multiple interfaces and so forth. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces and remain the same as with respectively.

The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface of includes a function call Square input precision output that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. An additional parameter of no concern may also be added. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment.

Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface is replaced by interface redefined to ignore or add parameters to the interface. Interface may similarly be redefined as interface redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. As can be seen in some cases a programming interface may include aspects such as parameters that are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface may still be in effect. Similarly shown in part or all of interface from may be written inline into interface to form interface . As illustrated interface is divided into A and B and interface portion A has been coded in line with interface to form interface .

For a concrete example consider that the interface from may perform a function call square input output which is received by interface which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface to conform them to a different interface in this case interfaces and . This might be done for example where there is an installed base of applications designed to communicate with say an operating system in accordance with an the first interface s protocol but then the operating system is changed to use a different interface in this case interfaces and . It can be seen that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible.

Similarly as shown in a third code segment can be introduced with divorce interface to receive the communications from interface and with divorce interface to transmit the interface functionality to for example interfaces and redesigned to work with divorce interface but to provide the same functional result. Similarly and may work together to translate the functionality of interfaces and of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in .

As can be seen in this approach is similar to the Divorce scenario described above. It might be done for example where an installed base of applications are designed to communicate with an operating system in accordance with a first interface protocol but then the operating system is changed to use a different interface. The JIT Compiler may be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the subject matter described herein i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

As mentioned previously current graphics programs rely on mathematical formulations that are specialized to a particular dimension. To operate in another dimension involves using a different mathematical formulation which may involve creating and testing code. Aspects of the subject matter described herein describe a single formulation that can work correctly in any number of dimensions.

The foundational idea in Euclidean N dimensional space is that of a point or vector. Any such point is uniquely labeled by an ordered collection of N real numbers called rectangular coordinates. Polar coordinates are an alternate way of representing a point. In polar coordinates a point in N dimensional space may be uniquely labeled by a single radial distance from the origin and an ordered collection of N 1 polar angles.

Rectangular and polar coordinates are useful in different scenarios. For example a programmer may use rectangular coordinates to create point data but use the polar coordinates for the same points for drawing or animation. For example it may be easier to the programmer to draw a house using rectangular coordinates but it may be easier to the programmer to rotate the house using polar coordinates.

In computer software implementations there are at least two problems with current polar representations. First the zenith angle is not graceful. Second the zenith angle is not consistent with the polar angle in two dimensions. Specifically defaults to zero when the second dimension y is ignored. Thus the three dimensional definition is not a generalization of the two dimensional definition and thus is not a template for further generalization to four and higher dimensions. Both of these problems will be discussed in more detail below.

In general these two problems may be addressed by redefining the last polar angle as the complement of that is by measuring upward from the lower dimensional x y plane toward the vector in the plane spanned by and z. This change may be generalized to any number of dimensions with recursive graceful defaults.

Modern software platforms often aggressively initialize all data to zero as a prophylaxis against data garbage. In rectangular coordinates such initialization is exactly what is wanted. For example a user ignoring the third dimension gets zero for z as needed. In polar coordinates however when ignoring the third dimension and when is measured from the z axis needs to be set to 2 to have calculations done correctly. This turns out to be tricky and error prone. Furthermore the usual formula for namely tan sqrt x y z mathematically evaluates to 2 for z 0 but implementations differ and are unreliable.

When looking at a two dimensional x y plane the polar angle is measured from the basis vector of the first coordinate x to the basis vector of the second coordinate y. All points on the x axis have a zero value for the second coordinate y. Whenever the second coordinate y is zero the polar angle is zero. Someone working in one dimension would not use either y or and modern aggressive software platforms would default those values to zero. Someone inspecting such one dimensional data by asking for y and would get the correct values namely zero. Even at the singularity at the origin where the polar angle is not defined strictly speaking zero is an appropriate value in light of continuity concerns.

When looking at a three dimensional space of x y z points all points on the x y plane have a zero value for the third coordinate z. Whenever the third coordinate z is zero in conventional polar coordinate systems the second polar angle is 2. Because of zero memory initialization by software platforms this is not a good situation. If the second polar angle were zero when z 0 then there would be a generalization of the two dimensional definitions. Furthermore this could generalized for any dimensional space as follows 

In N dimensional space for any N 2 polar coordinates may be defined with N 1 polar angles and one radial distance such that for all points with the last coordinate zero the last polar angle is zero. This definition recurses so that if the last two coordinates are zero then the last two polar angles are also zero and so on.

Another way of defining this problem is to let P be a point in Euclidean N space where N 2 and let r be the Euclidean distance from P to the origin namely the positive solution to r x x . . . x. Then the task is to find N 1 angles . . . such that 

2. Match the conventional two dimensional polar coordinates and the three dimensional Euler angle with the last polar angle redefined as the complement 2 .

Note that the phrase if and only if as used herein is used in the mathematical sense. It means that if the condition on the right of the phrase is true that the condition on the left of the phrase is also true. It also means that if the condition on the left of the phrase is true that the condition on the right of the phrase is true.

Two is the lowest dimensionality with conventional polar coordinates. It is possible although perhaps not too useful to extend the scheme to one dimension by defining the polar angle in one dimension as the algebraic sign of the x coordinate.

Referring to let the last rectangular coordinate z of the point P be the sine projection of the 3D radial vector r by the last polar angle measured upward from the 2D plane to the 3D radial vector. In other words z r sin . It can be seen that the last polar angle is zero if and only if the last rectangular coordinate is zero.

The projection of the 3D radial vector onto the 2D plane is the cosine projection by the last polar angle . This projection is referred to herein as the 2D residual radial vector. Recursively the next to last rectangular coordinate of the 3D radial vector is the sine projection of the 2D residual radial vector by the next to last angle . This may be written as y r sin cos . In three dimensions the next to last polar angle also happens to be the first polar angle.

Finally the last rectangular component of the 3D radial vector is the accumulated cosine projections of all the polar angles which may be written as x r cos cos . Collecting the conversions from polar to rectangular coordinates in three dimensions the following is obtained cos cos 1 sin cos 2 sin 3

Notice that when 0 x r cos y r sin and z 0 and that the formulation simplifies to the two dimensional formulation. This is exactly what is desired as when the last coordinate z is zero it is desired to have the last angle be zero and vice versa.

In four dimensions let the last rectangular coordinate w be the sine projection of the 4D radial vector r by the last polar angle measured upward from the 3D hyperplane to the 4D radial vector. This may be written as w r sin . Note that w is zero if and only if is zero.

The projection of the 4D radial vector onto the 3D hyperplane is the cosine projection by the last polar angle . This projection is hereinafter called the 3D residual radial vector. Recursively the next to last rectangular coordinate of the 4D radial vector is the sine projection of the 3D residual radial vector by the next to last polar angle here called . Then the 3D residual radial vector may be written as z r sin cos .

At this point the formulation has recursed down to two dimensions and the other coordinates x y may be expressed exactly as expressed in dimension three but with an extra cos multiplied at the end. Collecting the conversions from polar to rectangular coordinates in four dimensions yields the following. cos cos cos 1 sin cos cos 2 sin cos 3 sin 4

Notice that when 0 x r cos cos y r sin cos and z r sin and that the formulation simplifies to the three dimensional formulation.

This pattern can be generalized to any number of dimensions. More specifically in N dimensions N 1 if the radial distance r is equal to the positive solution of r x x . . . x the polar angles are . . . where is the polar angle that is measured upward from the i 1 dimensional axis plane or hyperplane as the case may be and the coordinates are x x . . . x the coordinates for xmay be expressed as 

Note that the above formulations have the desired results of causing the last polar angles to be zero if and only if the corresponding xs are also zero. This works well in software platforms that initialize memory to zero since if a dimension is ignored and initialized to zero the corresponding polar or rectangular coordinate corresponding to that dimension is set to zero.

A related issue with respect to coordinate conversion relates to arctangent which may be used to obtain a polar angle. The standard evaluation of arctangent creates several complicated issues. The programmer forming the ratio sqrt x y z is responsible for handling the special case when z 0. A software platform may throw exceptions or return error on division by zero virtually never supports infinite values let alone as input arguments to the arctangent function and has troubles returning the correct value of 2. So the programmer is responsible for supplying mathematically appropriate special case code which opens a broad opportunity for bugs.

A software platform may supply a quadrant sensitive binary arctangent function to address the divide by zero problem but implementations may get the arguments backwards return 0 instead of 2 when either argument is zero or both arguments are zero or have other issues. In other words these binary arctangent functions are often not reliable and to ensure correct operation a programmer may be required to code defensively and test the platform functions aggressively. This opens opportunities for bugs and creates wasteful work.

To convert from rectangular coordinates to polar coordinates square root and arctangent functions may be used. For example in two dimensions let r and be polar coordinates with domains 0 r and 0 

This definition for arctan hereinafter called A Tan 2 yields only positive values for the angle. Although it is not required mathematically to have only positive values for these angles it may be more helpful for programmers to think of positive values when dealing with polar coordinates. Note that in two dimensions if y 0 then 0 and r x which is exactly what is desired.

In general to obtain the polar angle for any rectangular coordinate let r sqrt x x . . . x where x x . . . xare the rectangular coordinates in N dimensional space. Let the last polar coordinate be A Tan 2 x sqrt x x . . . x . As can been seen by inspection will be zero if any only if xis zero except perhaps at the origin where continuity concerns support an artificial definition of zero. Recursing let A Tan 2 x sqrt x x . . . x and so on until reaching the first angle A Tan 2 x x . This formulation satisfies the goals set out above namely that the lower dimensional representations are consistently embedded in the higher dimensional representations and that higher polar angles default to zero when higher rectangular components vanish.

A software interface may be constructed as described in conjunction with that receives input parameters in one or more dimensions of one coordinate system and provides output parameters in another coordinate system. The interface may be configured such that the parameters may be passed in and out in a variety of orders without departing from the spirit or scope of aspects of the subject matter described herein.

Furthermore the interface may be constructed to work in multiple dimensions. Parameters that are not supplied may be assumed to be zero. In one embodiment the dimensions of the space in which conversion is requested may be inferred by the number of input parameters. For example if only two parameters are given it may be inferred that a two dimensional conversion is taking place.

In one embodiment the parameters both input and output may be of any arbitrary precision including integer float double long double and so forth. In another embodiment the parameters may be complex which may include imaginary numbers. In practice the parameters may be of any type for which multiple dimensional analysis makes sense.

In one embodiment the interface may be arranged to return values having the same type and precision as the input parameters. An interface with type checking may be constructed via constructs known as generics in Ada Eiffel Java C templates in C or similar mechanisms in other languages. The generics or templates may be instantiated to a particular type.

In some embodiments an intermediate interface may be used to convert from the Euler angle to the polar angles defined herein and back again. Such an interface may be used to create compatibility with programs that are coded to work with the Euler angle for example.

Partial evaluation may be used to improve performance when working in a dimension less than allowed by a library. In partial evaluation code may be rewritten dynamically by a run time environment or statically by a compiler to take advantage of known features such as certain expressions evaluating to a constant such as zero or one . Instead of brute force multiplying everything by a zero or one the code may be rewritten to skip the multiplying steps. In this way a library originally written to work with N dimensions may be rewritten by the compiler or on the fly by a run time environment to work with M dimensions M

In some embodiments the device may include a library a local program and a communications mechanism . The component library may include an arctangent function a partial evaluation component rectangular to polar conversion logic and polar to rectangular conversion logic . The library may be accessed via an interface .

The communications mechanism allows the device to communicate with other devices to provide information to and from the API . The communications mechanism may be a network interface or adapter modem or any other mechanism for establishing communications as described in conjunction with .

The local program represents any process thread task or the like that executes on the device whether in user mode kernel mode or otherwise. The local program may interface with the library via the interface .

The interface provides a mechanism for interfacing with functionality provided by the library . A local or remote process may call the interface . Exemplary interfaces suitable for the interface are described above in conjunction with . Parameters provided to the interface may include one or more polar or rectangular coordinates.

The arctangent function receives two values and returns a positive angle as described above in conjunction with the A Tan 2 function above.

The partial evaluation component may dynamically and or statically rewrite code to make it more efficient as described in conjunction with .

The rectangular to polar conversion logic includes logic for converting rectangular coordinates to polar coordinates as previously described. Similarly the polar to rectangular conversion logic includes logic for converting polar coordinates to rectangular coordinates as previously described.

At block one or more polar coordinates are received. For example referring to polar coordinates are received at the interface .

At block the coordinate s are converted into rectangular coordinate s . For example referring to the polar to rectangular conversion logic is employed to convert the coordinate s .

At block the converted coordinate s are provided. For example referring to the interface provides the coordinate s to the calling process.

At block one or more rectangular coordinates are received. For example referring to rectangular coordinates are received at the interface .

At block the rectangular coordinate s are converted into polar coordinate s . For example referring to the rectangular to polar conversion logic is employed to convert the coordinate s . The rectangular to polar conversion logic may employ the arctangent function to obtain angles.

At block the converted coordinate s are provided. For example referring to the interface provides the coordinate s to the calling process.

As can be seen from the foregoing detailed description aspects have been described related to accessing content. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

