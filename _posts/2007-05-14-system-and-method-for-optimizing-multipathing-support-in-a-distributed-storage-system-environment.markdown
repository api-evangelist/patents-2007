---

title: System and method for optimizing multi-pathing support in a distributed storage system environment
abstract: A Multi-Pathing Optimization Module (MPOM) interfaces with a client to route a data access request along a most optimal path to a storage system serving data container stored on a striped volume set (SVS). The MPOM constructs and references a Location Data Structure (LDS) containing striping rules associated with the SVS, a list of network elements (N-blades) operatively connected to the client, and a list of disk elements (D-blades) sharing a node of the storage system with the listed N-blades. The MPOM executes a Client_Locate( ) function on a per data access request basis to identify the D-blade serving the volume which will receive the request. When possible, the MPOM routes the data access request directly to the N-blade sharing a node with the identified D-blade, thereby using the most optimal path from the client to the SVS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566845&OS=08566845&RS=08566845
owner: NetApp, Inc.
number: 08566845
owner_city: Sunnyvale
owner_country: US
publication_date: 20070514
---
The present application is a continuation of U.S. patent application Ser. No. 11 588 097 which was filed on Oct. 26 2006 by Vijayan Rajan for A SYSTEM AND METHOD FOR OPTIMIZING MULTI PATHING SUPPORT IN A DISTRIBUTED STORAGE SYSTEM ENVIRONMENT and is incorporated herein by reference now abandoned and is incorporated herein by reference.

The present application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 731 532 which was filed on Oct. 28 2005 by Vijayan Rajan for a SYSTEM AND METHOD FOR OPTIMIZING MULTI PATHING SUPPORT IN A DISTRIBUTED STORAGE SYSTEM ENVIRONMENT and is hereby incorporated by reference.

The present application is related to U.S. patent application Ser. No. 11 119 278 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER by Michael Kazar et al. now issued as U.S. Pat. No. 7 698 289 on Apr. 13 2010 the contents of which are hereby incorporated by reference

The present invention relates to storage systems and in particular to optimizing multi pathing support for performing input output operations directed to a data container striped across a plurality of volumes on one or more storage systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage NAS environment a storage area network SAN and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

Storage of information on the disk array is preferably implemented as one or more storage volumes of physical disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of redundant information parity with respect to the striped data. As described herein a volume typically comprises at least one data disk and one associated parity disk or possibly data parity partitions in a single disk arranged according to a RAID 4 or equivalent high reliability implementation. The term RAID and its various implementations are well known and disclosed in by D. A. Patterson G. A. Gibson and R. H. Katz Proceedings of the International Conference on Management of Data SIGMOD June 1988.

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on the disks as a hierarchical structure of data containers such as files and blocks. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network. In the case of block based protocol packets the client requests and storage system responses address the information in terms of block addressing on disk using e.g. a logical unit number lun .

A plurality of storage systems may be interconnected to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes wherein each volume stores one or more data containers. Yet often a large number of data access requests issued by the clients may be directed to a small number of data containers serviced by a particular storage system of the environment. A solution to such a problem is to distribute the volumes serviced by the particular storage system among all of the storage systems of the environment. This in turn distributes the data access requests along with the processing resources needed to service such requests among all of the storage systems thereby reducing the individual processing load on each storage system. However a noted disadvantage arises when only a single data container such as a file is heavily accessed by clients of the storage system environment. As a result the storage system attempting to service the requests directed to that data container may exceed its processing resources and become overburdened with a concomitant degradation of speed and performance.

One technique for overcoming the disadvantages of having a single data container that is heavily utilized is to stripe the data container across a plurality of volumes configured as a striped volume set SVS where each volume is serviced by a different storage system thereby distributing the load for the single data container among a plurality of storage systems. One technique for data container striping is described in the above incorporated U.S. Pat. No. 7 698 289 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER. Here stripes of content data of a data container are allocated to each volume of the SVS in a manner that balances data across the volumes of the SVS. In addition various volumes of the SVS are configured to store cache meta data associated with the container. As described in the above incorporated patent application a SVS may be utilized on a storage system that services both file based and block based data access requests. As such a data container may by a file or other file system entity or may by a logical unit number that is accessible via block based requests such as SCSI iSCSI or FCP.

By striping the content of a data container across the volumes of a SVS the load on the storage system environment is distributed across a plurality of nodes between the clients and the SVS volumes. Illustratively each node comprises a network element N blade and a disk element D blade . Each N blade includes functionality that enables the node to connect to clients over a computer network whereas each D blade manages data storage on one or more storage devices. Within a node the N and D blade share a high bandwidth system bus and between the nodes each N blade is operatively interconnected to every other D blade by a cluster switching fabric which may be e.g. a Gigabit Ethernet switch. Generally the system bus within a node has higher bandwidth and or lower latency than the cluster switching fabric which interconnects the nodes. Each N blade contains functionality e.g. a Locate function that enables it to identify the appropriate D blade to route a given data access request for processing. It should be noted that all N and D blades are not necessarily paired into nodes as there may be more N blades than D blades or vice versa depending on the storage system architecture. Thus some N blades may lack a direct system bus connection to a D blade or vice versa. The N or D blades lacking a direct system bus connection utilize only the cluster switching fabric for intra cluster communication.

Although all data access requests may be directed to any N blade which then routes the requests to the appropriate D blade to thereby balance the bandwidth and processing load on all D blades and disk volumes it is desirable to optimize the storage system by balancing the bandwidth and processing load on all N blades. One solution is to equally divide all data access requests from a client among all available N blades presumably balancing the bandwidth and processing load among N blades. Another solution is to utilize e.g. a least queue depth algorithm to balance the load across all paths between the client and the N blades. Under either solution the N blades route the data access requests to the appropriate D blades via either the high bandwidth system bus within a particular node or the cluster switching fabric among the nodes as necessary.

Although the above mentioned solutions balance the bandwidth and processing load among all N blades it is additionally desirable to optimize the storage system by reducing traffic on the cluster switching fabric interconnecting the N and D blades. In most applications the shared system bus between the N and D blades within a node is the most optimal route for a data access request to follow since as noted the system bus generally has higher bandwidth and lower latency than the cluster switching fabric. Thus the techniques for balancing bandwidth and processing load among all N blades using either equal load division or a least queue depth algorithm fail to achieve the most optimal data flow through the storage system because they utilize primarily the cluster switching fabric rather than the shared system bus within each node to route data access requests to the appropriate D blades.

The present invention overcomes the disadvantages of the prior art by providing a system and method for determining and accessing on a per data access request basis a most optimal path from a client to one of a plurality of nodes of a cluster configured to serve a plurality of striped volume sets SVSs . Each node is illustratively embodied as a storage system comprising a disk element D blade adapted to serve a volume of a SVS and a network element N blade adapted to direct a data access request to any D blade of the cluster. A Multi Pathing Optimization Module MPOM resides on the client or between the client and the storage system and includes a Client Locate function that identifies the most optimal path to use when sending a data access request directed to a data container serviced by the cluster. For each SVS that the client accesses the associated MPOM constructs a Location Data Structure LDS containing striping rules associated with the SVS a list of N blades connected to the client and a list of D blades each of which is locally connected to a listed N blade via a high bandwidth system bus.

Illustratively the LDS resides in memory on the client and is updated upon initialization of the MPOM and periodically thereafter. To update the LDS the client sends an Update LDS Command to the storage systems operatively connected to the client and in response the systems reply with Update LDS Responses. The Update LDS Commands and the Update LDS Responses are illustratively implemented as vendor specific SCSI commands however in alternate embodiments they may be implemented using other techniques. Each Update LDS Response contains the striping rules associated with the SVS and an index to the local D blade if any sharing the system bus with the N blade. The striping rules include a striping algorithm a stripe width and a number of striped volumes comprising the SVS. Illustratively each D blade index identifies the D blade relative to the striping rules such that a sequence of volumes across which data is striped corresponds to a sequence of indices to the D blades serving those volumes. Thus the D blades are indexed according to the striping algorithm. The MPOM pairs the indices of local D blades to indices for the N blades such that each pairing corresponds to a storage system and the MPOM writes this information to the LDS. In essence the MPOM associated with the client retrieves and stores the necessary information for executing the Client Locate function and for routing a data access request over the optimal path.

Operationally a data access request from the client to the data container stored on the SVS is intercepted by the MPOM which executes the Client Locate function to identify the appropriate N blade associated with the optimal path. Given an offset within a data container stored on a SVS the Client Locate function retrieves the striping rules from the LDS to identify the D blade index for the volume containing the desired data. The MPOM then checks the list of local D blade indices previously provided by the N blades during initialization to determine whether the identified D blade index is paired with an N blade index. When the client possesses an operative connection to an N blade having a high bandwidth connection to the identified D blade the pairing of an N blade index to the identified D blade index identifies a corresponding storage system and the data access request is routed to this system to optimize performance. Specifically the MPOM routes the request to the N blade paired with the identified D blade in the LDS. Conversely when the client lacks an operative connection to an N blade having a high bandwidth connection to the identified D blade there is no pairing of an N blade index to the identified D blade index and the MPOM defaults to an alternative method for selecting an N blade to which to route the data access request e.g. using a least queue depth algorithm . Thus when possible the MPOM routes a data access request along the most optimal path from a client to a storage system serving a SVS by routing the request directly to the N blade residing on the same storage system as the D blade identified by the Client Locate function thereby utilizing the high bandwidth connection between the N and D blades rather than the cluster switching fabric.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N blade on the node while the other processor executes the functions of the D blade .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

is Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS . As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as minoring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write anywhere file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D blade of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N blade to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N blade and D blade cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each blade includes a cluster fabric CF interface module adapted to implement intra cluster communication among the blades including D blade to D blade communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N blade function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D blade . That is the N blade servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D blades of the cluster . As described further herein these commands include SVS operations that enable transactional performance in the cluster. Notably the CF interface modules cooperate to provide a single file system image across all D blades in the cluster . Thus any network port of an N blade that receives a client request can access any data container within the single file system image located on any D blade of the cluster.

Further to the illustrative embodiment the N blade and D blade are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the blades may be implemented as pieces of code within a single operating system process. Communication between an N blade and D blade is thus illustratively effected through the use of message passing between the blades although in the case of remote communication between an N blade and D blade of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between blades processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the blades of cluster . Communication is illustratively effected by the D blade exposing the CF API to which an N blade or another D blade issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N blade encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D blade residing on the same node or ii a remote procedure call RPC when communicating the command to a D blade residing on a remote node of the cluster . In either case the CF decoder of CF interface on D blade de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an inode number field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with the data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which preferably includes a meta data section and a data section . The information stored in the meta data section of each inode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of file its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file. The meta data section also includes a generation number and a meta data invalidation flag field . Meta data invalidation flag field is used to indicate whether meta data in this inode is usable or whether it should be re acquired from a meta data volume MDV of a SVS. The contents of the data section of each inode may be interpreted differently depending upon the type of file inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include file system data or pointers the latter referencing 4 KB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 128 bytes of the inode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the length of the contents of the data container exceeds 64 bytes but less than or equal to 64 KB then the data section of the inode e.g. a first level inode comprises up to 16 pointers each of which references a 4 KB block of data on the disk.

Moreover if the size of the data is greater than 64 KB but less than or equal to 64 megabytes MB then each pointer in the data section of the inode e.g. a second level inode references an indirect block e.g. a first level L1 block that contains 1024 pointers each of which references a 4 KB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the inode e.g. a third level L3 inode references a double indirect block e.g. a second level L2 block that contains 1024 pointers each referencing an indirect e.g. a first level L1 block. The indirect block in turn that contains 1024 pointers each of which references a 4 KB data block on disk. When accessing a file each block of the file may be loaded from disk into the memory .

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . An example of such a file system layout is described in U.S. patent application Ser. No. 10 836 817 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to Network Appliance Inc. now issued as U.S. Pat. No. 7 409 494 on Aug. 5 2008. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. Mode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an Mode file and its corresponding Mode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level 1 L1 indirect blocks Mode file level 0 L0 blocks. is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention. A root top level inode such as an embedded inode references indirect e.g. level 1 blocks . Note that there may be additional levels of indirect blocks e.g. level 2 level 3 depending upon the size of the file. The indirect blocks and inode contain pvbn vvbn pointer pair structures that ultimately reference data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes 

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a filesystem file and a storage label file. The storage label file is illustratively a 4 KB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

In addition to being embodied as a container file having level 1 blocks organized as a container map the filesystem file includes block pointers that reference various file systems embodied as flexible volumes . The aggregate maintains these flexible volumes at special reserved inode numbers. Each flexible volume also has special reserved inode numbers within its flexible volume space that are used for among other things the block allocation bitmap structures. As noted the block allocation bitmap structures e.g. active map summary map and space map are located in each flexible volume.

Specifically each flexible volume has the same inode file structure content as the aggregate with the exception that there is no owner map and no WAFL fsid filesystem file storage label file directory structure in a hidden meta data root directory . To that end each flexible volume has a volinfo block that points to one or more fsinfo blocks each of which may represent a snapshot along with the active file system of the flexible volume. Each fsinfo block in turn points to an inode file that as noted has the same inode structure content as the aggregate with the exceptions noted above. Each flexible volume has its own inode file and distinct inode space with corresponding inode numbers as well as its own root fsid directory and subdirectories of files that can be exported separately from other flexible volumes.

The storage label file contained within the hidden meta data root directory of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system such as the volume name that information is loaded into the storage label file . Illustratively the storage label file includes the name of the associated flexible volume the online offline status of the flexible volume and other identity and state information of the associated flexible volume whether it is in the process of being created or destroyed .

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N blade of each node accesses a configuration table that maps the SVS ID of a data container handle to a D blade that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry and a VLDB aggregate entry .

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N blade to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N blade sends an RPC to the VLDB process. In response the VLDB returns to the N blade the appropriate mapping information including an ID of the D blade that owns the data container. The N blade caches the information in its configuration table and uses the D blade ID to forward the incoming request to the appropriate data container. All functions and interactions between the N blade and D blade are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

The present invention is illustratively directed to a storage system architecture comprising two or more volumes distributed across a plurality of nodes of cluster . The volumes are organized as a SVS and configured to store content of data containers such as files and luns served by the cluster in response to multi protocol data access requests issued by clients . Notably the content of each data container is apportioned among the volumes of the SVS to thereby improve the efficiency of storage service provided by the cluster. To facilitate a description and understanding of the present invention data containers are hereinafter referred to generally as files .

The SVS comprises a meta data volume MDV and one or more data volumes DV . The MDV is configured to store a canonical copy of certain meta data including access control lists ACLs and directories associated with all files stored on the SVS whereas each DV is configured to store at least data content of those files. For each file stored on the SVS one volume is designated a container attribute volume CAV and to that end is configured to store cache certain rapidly changing attribute meta data including time stamps and file length associated with that file to thereby offload access requests that would otherwise be directed to the MDV. In the illustrative embodiment described herein determination of the CAV for a file is based on a simple rule designate the volume holding the first stripe of content data for the file as the CAV for the file. Not only is this simple rule convenient but it also provides an optimization for small files. That is a CAV may be able to perform certain operations without having to communicate with other volumes of the SVS if the file is small enough to fit within the specified stripe width. Ideally the first stripes of data for files are distributed among the DVs of the SVS to thereby facilitate even distribution of CAV designations among the volumes of the SVS. In an alternate embodiment data for files is striped across the MDV and the DVs.

In contrast each DV stores only file F inodes and ACL inode . According to the storage system architecture a DV does not store directories or other device inodes constructs such as symbolic links however each DV does store F inodes and may store cached copies of ACL inodes that are arranged in the same locations as their respective inodes in the MDV . A particular DV may not store a copy of an inode until an I O request for the data container associated with the inode is received by the D Blade serving a particular DV. Moreover the contents of the files denoted by these F inodes are periodically sparse according to SVS striping rules as described further herein. In addition since one volume is designated the CAV for each file stored on the SVS DV is designated the CAV for the file represented by inode and DV is the CAV for the files identified by inodes . Accordingly these CAVs cache certain rapidly changing attribute meta data M associated with those files such as e.g. file size as well as access and or modification time stamps .

The SVS is associated with a set of striping rules that define a stripe algorithm a stripe width and an ordered list of volumes within the SVS. The striping rules for each SVS are illustratively stored as an entry of VLDB and accessed by SVS ID. is a schematic block diagram of an exemplary VLDB SVS entry that may be advantageously used with the present invention. The VLDB entry includes a SVS ID field and one or more sets of striping rules . In alternate embodiments additional fields may be included. The SVS ID field contains the ID of a SVS which in operation is specified in data container handle .

Each set of striping rules illustratively includes a stripe width field a stripe algorithm ID field an ordered list of volumes field and in alternate embodiments additional fields . The striping rules contain information for identifying the organization of a SVS. For example the stripe algorithm ID field identifies a striping algorithm used with the SVS. In the illustrative embodiment multiple striping algorithms could be used with a SVS accordingly stripe algorithm ID is needed to identify which particular algorithm is utilized. Each striping algorithm in turn specifies the manner in which file content is apportioned as stripes across the plurality of volumes of the SVS. The stripe width field specifies the size width of each stripe. The ordered list of volumes field contains the IDs of the volumes comprising the SVS. In an illustrative embodiment the ordered list of volumes comprises a plurality of tuples including a flexible volume ID and the aggregate ID storing the flexible volume. Moreover the ordered list of volumes may specify the function and implementation of the various volumes and striping rules of the SVS. For example the first volume in the ordered list may denote the MDV of the SVS whereas the ordering of volumes in the list may denote the manner of implementing a particular striping algorithm e.g. round robin.

A Locate function is provided that enables the VSM and other modules such as those of N blade to locate a D blade and its associated volume of a SVS in order to service an access request to a file. The Locate function takes as arguments at least i a SVS ID ii an offset within the file iii the inode number for the file and iv a set of striping rules and returns the volume on which that offset begins within the SVS . For example assume a data access request directed to a file is issued by a client and received at the N blade of a node where it is parsed through the multi protocol engine to the appropriate protocol server of N blade .

To determine the location of a D blade to which to transmit a CF message the N blade may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N blade then executes the Locate function to identify the appropriate volume to which to direct an operation. Thereafter the N Blade may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D blade . The protocol server of N blade then transmits the CF message to the D blade .

In accordance with an illustrative round robin striping algorithm volume A contains a stripe of file content or data D followed in sequence by two stripes of sparseness S another stripe of data D and two stripes of sparseness S . Volume B on the other hand contains a stripe of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S another stripe of data D and a stripe of sparseness S . Volume C continues the round robin striping pattern and to that end contains two stripes of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S and another stripe of data D .

The present invention is directed to a system and method for determining and accessing on a per data access request basis a most optimal path from a client to one of a plurality of nodes of a cluster configured to serve a plurality of striped volume sets SVSs . This optimal path is utilized when the client issues a data access request directed to a data container e.g. a lun stored on a SVS. Each node is illustratively embodied as a storage system comprising a disk element D blade adapted to serve a volume of a SVS and a network element N blade adapted to direct a data access request to any D blade of the cluster. A Multi Pathing Optimization Module MPOM resides on the client or between the client and the storage system and includes a Client Locate function that identifies the most optimal path to use when sending a data access request to the cluster. For each SVS that the client accesses the associated MPOM constructs a Location Data Structure LDS containing striping rules associated with the SVS a list of N blades connected to the client and a list of D blades each of which is locally connected to a listed N blade via a high bandwidth system bus .

Illustratively the LDS resides in memory on the client and is updated upon initialization of the MPOM and periodically thereafter. To update the LDS the client sends an Update LDS Command to the storage systems operatively connected to the client and in response the systems reply with Update LDS Responses. The Update LDS Commands and the Update LDS Responses are illustratively implemented as vendor specific SCSI commands however in alternate embodiments they may be implemented using other techniques. Each Update LDS Response contains the striping rules associated with the SVS and an index to the local D blade if any sharing the system bus with the N blade . The striping rules include a striping algorithm ID a stripe width and a number of striped volumes comprising the SVS. Illustratively each D blade index identifies the D blade relative to the striping rules such that a sequence of volumes across which data is striped corresponds to a sequence of indices to the D blades serving those volumes. Thus the D blades are indexed according to the striping algorithm. The MPOM pairs the indices of local D blades to indices for the N blades such that each pairing corresponds to a storage system and the MPOM writes this information to the LDS . In essence the MPOM associated with the client retrieves and stores the necessary information for executing the Client Locate function and for routing a data access request over the optimal path.

According to an alternate embodiment the MPOM is not transparent to applications running on the client such that the applications may interface with the MPOM to control pathing e.g. by specifying preferred paths or to retrieve relevant pathing information or statistics e.g. number of data access requests being routed through cluster switching fabric . Likewise the operating system or applications may activate or disable the MPOM depending on e.g. network conditions or user commands.

According to an alternate embodiment the file system and or the volume manager functionality is integrated into the application s e.g. Oracle Database 10g with Automatic Storage Management ASM available from Oracle Corporation of Redwood Shores Calif. In such embodiments the MPOM may interface with the file system or volume manager functionality within the application to determine and access on a per data access request basis the most optimal path from the client to the storage system. Alternatively the MPOM may be included within or added to the file system or volume manager functionality of the application .

In an alternate embodiment the MPOM may be a hardware device e.g. an application specific integrated circuit ASIC operatively interconnected between the client and the nodes . The MPOM intercepts data access requests from the client and directs them using the most optimal path. In such an embodiment the MPOM may be configured to intercept data access requests from multiple clients .

Alternately the N blade may implement the functionality described above to retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to identify the D blade ID which may then be used as the local D blade index . The additional fields of the Update LDS Response and the additional fields of the striping rules may contain other useful information or statistics which the client is configured to receive e.g. number of data access requests being routed to this N blade from other clients.

According to an alternate embodiment in addition to or instead of containing a number of striped volumes field the striping rules may contain the complete array of indices for the D blades the array of indices corresponding to the array of volumes from the SVS entry for the given SVS. The N blade may implement the functionality described above to retrieve the array of volumes correlate the volume IDs to aggregate IDs to D blade IDs and use these D blade IDs as the array of D blade indices.

According to another alternate embodiment the N blade receiving the Update LDS Command is not connected to a D blade via a high bandwidth connection because e.g. the storage system is configured to have more N blades than D blades . Therefore the index to local D blade field in the Update LDS Response from this node may contain a predetermined value which indicates that this N blade does not have a local D blade . Alternately the index to local D blade field may contain an arbitrary value and an additional field of the Update LDS Response would indicate that this N blade lacks a local D blade .

It is expressly contemplated that the cluster may be configured such that there is an unequal number of N and D blades. It is likewise expressly contemplated that the client may not be operatively connected to every N blade of the storage system or that some data access requests must be routed through the cluster switching fabric in order to reach certain D blades and disks . For example in data access requests from the client to data managed by D blade C and stored on disk C must be routed through either N blade A or B neither of which share a high bandwidth connection with D blade C. Because the client only receives Update LDS Responses from N blades to which the client is operatively connected the client of will not receive an Update LDS Response from a N blade local to D blade C. Thus according to the illustrative embodiment the array of D and N blade indices will not contain a row or local D blade index corresponding to D blade C of . Likewise when the storage system is configured to have more N blades than D blades the array may contain a row containing only a local N blade index and an empty or null local D blade index . Under these circumstances the present invention will still function as described further below in reference to .

According to alternate embodiments the LDS structure may be varied to store additional information enabling additional functionality in the MPOM . For example the LDS may be structured to retain and the N blades to send all D blade indices such that the MPOM has access to a complete picture of the storage system regardless of operative connections to the client . Likewise columns may be added to the array to store additional information about the N blades e.g. overall rate of traffic flow through a N blade the additional information being calculated by the MPOM or returned in additional fields of the Update LDS Response data structures . Moreover as generally illustrated in by receiving Update LDS Response from each N blade operatively connected to a client and storing the received information in a LDS an MPOM associated with the client retrieves and stores the information necessary for routing each data access request using the most optimal path i.e. to an N blade that shares a high bandwidth connection with the D blade to which the data access request is directed.

Operationally a data access request from the client to a data container stored on the SVS is intercepted by the MPOM which executes the Client Locate function to identify the appropriate N blade associated with the optimal path. Given an offset within a data container stored on a SVS the Client Locate function retrieves the striping rules from the LDS to identify the D blade index for the volume containing the desired data. The MPOM then checks the list of local D blade indices previously provided by the N blades during initialization to determine whether the identified D blade index is paired with an N blade index . When the client possesses an operative connection to an N blade having a high bandwidth connection to the identified D blade the pairing of an N blade index to the identified D blade index identifies a corresponding storage system and the data access request is routed to this system to optimize performance. Specifically the MPOM routes the request to the N blade paired with the identified D blade in the LDS . Conversely when the client lacks an operative connection to an N blade having a high bandwidth connection to the identified D blade there is no pairing of an N blade index to the identified D blade index and the MPOM defaults to an alternative method for selecting an N blade to which to route the data access request e.g. using a least queue depth algorithm . Thus when possible the MPOM routes a data access request along the most optimal path from a client to a storage system serving a SVS by routing the request directly to the N blade residing on the same storage system as the D blade identified by the Client Locate function thereby utilizing the high bandwidth connection between the N and D blades rather than the cluster switching fabric .

Once the necessary information is stored in a LDS the MPOM may route a data access request from the client to a data container stored on a data storage construct e.g. SVS using the most optimal path. is a flowchart detailing the steps of a procedure for routing a data access request using the most optimal path in accordance with an illustrative embodiment of the present invention. The procedure begins at step and continues to step where a data access request from a client to a SVS is automatically intercepted by the MPOM . As noted above the data container may comprise a file a lun or any other addressable data object. The data container may be accessed using any suitable protocol including e.g. iSCSI FCP NFS etc. This may be by the file system and or volume manager passing a data access request to the MPOM . Alternately the MPOM may be directly invoked by another module of the client . In step the MPOM executes the Client Locate function . Illustratively the Client Locate function operates similarly to the Locate function described above in reference to to identify a D blade and its associated volume of a SVS in order to service an access request to a data container. Illustratively as described above in reference to a data container e.g. a file or a logical unit number lun is accessed using a data container handle which includes e.g. the SVS ID and inode number for the data container. Given i a SVS ID ii an offset within the data container iii the inode number for the data container and iv a set of striping rules stored in the LDS Client Locate returns the index for the D blade which is operatively connected to the volume on which that offset begins within the SVS . Thus on a per data access request basis the Client Locate function identifies the D blade through which the data access request will be routed.

At step the MPOM checks the list of local D blade indices previously provided by the N blades during the initialization update procedure . As noted during the initialization update procedure each N blade operatively connected to the client returns a respective local D blade index as part of the Update LDS Response data structure . Thus when the client possesses an operative connection to an N blade which shares a high bandwidth connection with the D blade identified at step the identified D blade index appears in the array of the LDS . Conversely according to the illustrative embodiment when the identified D blade does not share a high bandwidth connection with a N blade operatively connected to the client the identified D blade index does not appear in the array of the LDS .

If the D blade index identified by the Client Locate function appears in the array then the MPOM continues to step and retrieves the N blade index paired with the identified D blade index . As also noted during the initialization update procedure each D and N blade index pair forms a row of the array and each row corresponds to a N blade local D blade pair operatively connected to the client . According to the illustrative embodiment the MPOM designates this retrieved N blade index as the destination for the data access request. The procedure then continues to step where the data access request is sent to the designated destination N blade . Since the N blade receiving the data access request shares a high bandwidth connection the D blade identified by the Locate function the request does not need to be routed through cluster switching fabric . Thus the MPOM has routed the data access request using the most optimal path because the high bandwidth connection typically has higher bandwidth and or lower latency than the cluster switching fabric . At step the procedure is complete.

However if the D blade index identified by the Client Locate function does not appear in the array then the procedure continues to step where the MPOM defaults to an alternative multi pathing policy for designating a destination N blade e.g. using a least queue depth algorithm . The procedure then continues to step where the data access request is sent to the designated N blade . Thus as in storage system configurations similar to utilization of the cluster switching fabric may be inevitable given certain data access requests and lacking an operative connection to the node containing the D blade through which a request must be routed the MPOM routes the request according to an alternative multi pathing policy. At step the procedure completes.

In an alternate embodiment the MPOM may be optimized for meta data related data access requests. Illustratively as discussed above in reference to the SVS comprises a meta data volume MDV and one or more data volumes DVs . For example in a volume serviced by D blade A may serve as the MDV . Thus all meta data related data access requests are routed through D blade A. The MPOM may recognize meta data related data access requests e.g. by recognizing the type of data access request. Alternately a module on the client e.g. the operating system or volume manager may specify the data access request as meta data related e.g. by interfacing with the MPOM or by marking the data access request. Given additional information e.g. stored in an additional field of the LDS identifying the node A serving the MDV the MPOM may designate the destination N blade A without executing Client Locate or the N to D blade identification steps of the route optimization procedure . Thus processing by the MPOM may be reduced for data access requests directed to the MDV . Likewise given information identifying the CAV for a given file the MPOM may identify data access requests directed to the CAV and similarly designate the destination N blade without executing Client Locate or the N to D blade identification steps .

It is expressly contemplated that the storage system architecture may change during runtime e.g. by adding or removing disks and or network connections . Thus although the LDS may indicate that the client is operatively connected to the identified D blade the information in the LDS might not be perfectly synchronized with changes in the storage system architecture. Therefore the MPOM may include functionality for designating a new destination N blade using e.g. an alternative multipathing policy when the client is unable to communicate with the originally designated N blade . Likewise the Locate function executing on the nodes may route a data access request through the cluster switching fabric to the proper D blade after an architecture change. Additionally a misdirected data access request may trigger the client or node to send an Update LDS Command or Response respectively.

According to an alternate embodiment the MPOM may use additional information stored in additional fields of the LDS to determine the most optimal path for a data access request. For example the nodes may provide traffic flow information in the additional fields of the Update LDS Response data structures which the MPOM might use to determine an alternative multipathing policy. Likewise the MPOM may use information or commands provided by the operating system or applications e.g. database applications which include file system and volume manager functionality to disqualify alter or override the designated N blade result of steps or . Moreover the path selection functionality of the MPOM may be configured to take advantage of any of the alternate embodiments contemplated above with respect to the storage system the client the LDS the Up date LDS Command and the Update LDS Response .

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D blades the teachings of the present invention are equally suitable to systems where the functionality of the N and D blades are implemented in a single system. Alternately the functions of the N and D blades may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

