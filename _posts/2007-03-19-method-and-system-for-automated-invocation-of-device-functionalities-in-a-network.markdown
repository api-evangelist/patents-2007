---

title: Method and system for automated invocation of device functionalities in a network
abstract: A method and system that enable an automatic invocation of device functionalities on devices in a network. Invocation mechanisms are provided to support heterogeneous invocation mechanisms including new invocation mechanisms. Invocation mechanisms using scripts can be added without the need for recompilation of support systems such as home-networking middleware systems. This further enables the use of scripts that can coordinate the use of multiple devices in accomplishing a task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028283&OS=08028283&RS=08028283
owner: Samsung Electronics Co., Ltd.
number: 08028283
owner_city: Suwon
owner_country: KR
publication_date: 20070319
---
This application claims priority from U.S. Provisional Patent Application Ser. No. 60 784 281 filed Mar. 20 2006 incorporated herein by reference.

The present invention relates to invocation of functionalities in devices in a network and more particularly to automated execution of tasks in electronics devices in a network.

Electronic devices such a consumer electronics CE devices utilize a variety of approaches for invocation of their functionalities e.g. UPnP Jini . As new devices and technologies become available new invocation mechanisms are required to operate these devices.

In existing approaches the logic code that performs device invocation is introduced during the design of a device or a design of the networked devices. New features such as support for invoking device functionalities are provided by introducing new code.

A shortcoming of such conventional approaches is that different devices provide different sets of application programming interfaces APIs for invocation of their functionalities. Even devices of the same class can differ in the way their functionalities are invoked.

Further in network systems such as home networking middleware systems all of the different invocation mechanisms have to be incorporated during the design phase. As a result the devices that the existing middleware systems can operate are fixed during the design phase and are not easily expandable. As new devices and technologies become available new interfaces are needed for invoking device functionalities. Conventionally the middleware system has to be redesigned to invoke these new devices technologies. Redesigning the existing middleware system requires writing new code. Further the middleware system must be recompiled and reinstalled for the new code to take effect in the system. However in CE devices e.g. CD player VCR TV DVD player PVR STB unlike personal computers PCs installing new programs and updating existing programs is difficult due to scant support for such actions. Even if such support exists it is not standardized for all CE devices.

Given the heterogeneity of CE devices introducing a new invocation mechanism conventionally has been very difficult. There is therefore a need for a method and system that allows invocation of functionalities for new devices and technologies without requiring redesign or recoding of invocation mechanisms in electronic devices.

The present invention provides a method and system that enables automatic invocation of device functionalities on electronic devices such as CE devices. Device function invocation mechanisms are provided to support heterogeneous function invocations including new function invocations. The invocation mechanisms can be added without the need for recompilation of systems that invoke device functionalities such as home networking middleware systems. The present invention further enables the use of scripts that can coordinate the use of multiple devices in accomplishing tasks that require multiple devices.

Further in a system implementing automated execution of tasks and functions by devices according to the present invention logic code that encapsulates device invocation functionality is represented as interpreted scripts such as ECMA JavaScript. The system provides an environment where these scripts can be executed which allows extendibility. New features can be introduced by adding new scripts without the need to recompile supporting modules. The distribution of new features to various devices in a system is made simple since the system has to merely download the script. No reinstallation or recompilation is required. This makes the system modular and new device invocation mechanisms can essentially be introduced freely. Therefore new device types and technologies can also be supported. Scripts can also be provided to perform tasks that span multiple devices.

These and other features aspects and advantages of the present invention will become understood with reference to the following description appended claims and accompanying figures.

The present invention provides a method and system that enable automatic invocation of device functionalities on CE devices. In one embodiment scripting languages are utilized for adding invocation mechanisms to support heterogeneous function invocation including new function invocation. The invocation mechanism can be added without the need for recompilation of the systems that invoke the device functionality. The present invention also enables use of scripts for coordinating multiple devices in accomplishing a task.

Example implementations are described hereinbelow in the context of CE devices in a home network environment. However as those skilled in the art will recognize the present invention is useful in other environments as well such as systems where new functionality is added while the system is running critical systems that cannot be turned off restarted etc.

Home networking middleware systems function to invoke devices in the network using interfaces provided by the devices. Middleware systems aggregate various devices and aggregate the content in some devices for presentation to a user. The middleware systems allow the users to operate networked devices individually or in various combinations.

An essential part of a middleware system is the capability to invoke device functionalities. For example if the user wishes to see the list of music files on a CD loaded in a networked CD player the middleware system queries the CD player using an interface provided by the CD player. In another example a request is made to a networked TV to switch from playing broadcast TV to playing a DVD.

In one implementation device invocation by middleware includes two levels. One level comprises Device Invocation DI which involves executing a single device functionality. An example is querying to find the songs on a CD in a networked CD player. Another level comprises Device Orchestration DO which involves coordinating multiple device invocations device combinations to achieve a task. An example is using a DVD in a networked DVD player to play a movie on a networked TV which requires first obtaining the appropriate video stream from the DVD player and then passing the stream to the TV for display.

In one embodiment the present invention incorporates interpreted scripts such as ECMA JavaScript as extensions for handling both DI and DO as described below.

Each type of device in the network e.g. devices CE devices provides a fixed set of functionalities. These functionalities can be invoked using an API each device provides. In one example according to the present invention in the network each device provides a script file that includes a function method for each of the functionalities of that device . The script file can also include additional methods that are for internal use or methods that encapsulate alternate mechanisms for invoking device functionalities.

A discovery process is performed by a discovery module according to the present invention to discover the resources in the network . In one example a process for discovery of each device device functionality and device invocation is governed by various CE device frameworks such as UPnP Jini etc. as is known to those skilled in the art.

A device in the network that performs the actual device function invocation is known as the controller and task execution environment CTEE according to the present invention. shows an example architecture comprising an implementation of the CTEE that includes a controller and a task execution environment TEE according to the present invention.

When a device e.g. device in in the network is discovered using the discovery process the discovered device presents its script file to the controller . The controller parses the script file from each discovered device to become aware of the functionalities that can be performed by each discovered device. Then when the user decides to perform a task a corresponding device function in the script file is executed. The scripts are executed in a script engine that is part of the architecture in .

When a new class of devices is introduced into the network each device provides a script file including methods corresponding to the new functionality. To invoke a new functionality the system executes the corresponding new method. The methods can internally use various technologies like UPnP stack SOAP stack HTTP various XML standards etc for executing the device functionality as long as the scripting environment supports it. In this manner the system remains modular and can be easily extended.

Tasks performed by the user in the network often involve collaboration between multiple devices . Performing a task that involves multiple devices involves coordination among the devices and the corresponding processes. This is achieved in the network using task level scripts that contain the methods that correspond to those tasks that involve multiple devices according to the present invention.

For example in the network in order to play a movie DVD on a DVD player for display on a TV screen first a stream content identifier must be fetched from the DVD player. The identifier is then passed to a method that switches to the appropriate channel on the TV for displaying an input stream. Then a second method corresponding to PLAY is activated on the DVD player. Sequence of steps such as the above can be encapsulated in a script and the task of playing a DVD from a DVD player on a TV can be performed by executing the script in the scripting engine according to an embodiment of the present invention.

The architecture allows invocation of device functionalities in the network wherein the controller in performs actual device function invocation. The controller includes a composer module that contains a device service directory . The directory maintains all of the methods in the script files obtained from the devices in the network from the discovery process described above. The discovery module can be implemented as a standalone device or in one of the devices e.g. or in . The controller can be implemented in a standalone device or in one of the devices e.g. or in . The TEE can be implemented in a standalone device or in one of the devices e.g. or in . Further two or more of the controller the TEE and the discovery module can be implemented in the same device in

The composer module is responsible for transforming user actions into commands to the TEE . Commands to the TEE are requests for executing methods in the script files provided by the discovered devices in the network. Scripts are executed by a script engine via a script engine interface in the TEE . The script engine utilizes stacks in the TEE wherein the stacks correspond to different technological CE device frameworks such as UPnP Jini etc. and provide support for networking protocols like Ethernet WiFi Bluetooth etc.

The device description file contains mapping between standard terminologies and the corresponding methods in the script file . For example the device description states that play is its implementation of AVTransport Play wherein AVTransport Play is a standard UPnP service to start the play functionality on a UPnP device. The script file contains methods like play implemented in a scripting language. In one example where AVTransport Play is mapped to a method x the controller knowing that AVTransport Play is for playing achieves a play operation by executing the method x.

Example operation scenarios according to the present invention are now described. Referring to the example process in in a first example scenario the flow of action involved in device functionality invocation using the device description file and the script file in includes the steps of 

In a second example operation scenario execution of a task is orchestrated in the network using scripts. shows an example block diagram for a device such as a DVD player e.g. a device in in the network. The device includes example fragments of a device description file a device script file a task description file and a task script file . shows a similar example diagram for a TV TV in the network e.g. a device in . The TV includes a device description file and a device script file .

The steps of discovery and processing of device task description and scripts for the DVD player and the TV are similar to that explained above. Specifically the DVD player is one of the devices discovered in the network by the controller in . After the discovery process the relevant files i.e. the device and task description files and the device and task script files of the DVD player are maintained in the directory of the controller . The TV is also one of the devices discovered in the network by the controller in . After the discovery process the relevant files i.e. the device and task description files of the TV are maintained in the directory of the controller .

A task description file provides the controller with information about the sequence of methods to be executed on the various devices in the network to achieve a task such as playing a movie from a DVD player on a TV in the network. A task script file is similar to a device script file but instead of containing routines that invoke device functionalities a task script file contains the sequence of device functionalities that are to be invoked to achieve tasks in the network. This is represented in the task script as a sequence of methods. For example playMovie VideoRenderer x SwitchSourceDVDMethod x y is the method in the task script file required to start playing a movie from the DVD player on the TV. The above method signature takes the VideoRenderer or the ID of the display device on which the movie is to be viewed and the name of SwitchSourceDVD on the TV required for executing the task. In the above example x is the argument that carries the name of the VideoRenderer i.e. x TV and y is the name of switchSourceDVD method in x. During runtime the call made would be playMovie TV TV SWDVD where SWDVD is the name of switchSourceDVD method on TV.

Referring to the process in in the second example scenario the flow of action involved in device functionality invocation using the description files and script files in to orchestrate the DVD player and TV to cooperatively perform a task includes the steps of 

As such in a system implementing automated execution of tasks by devices according to the present invention logic code that encapsulates device invocation functionality is represented as interpreted scripts such as ECMA JavaScript. The system provides an environment where these scripts can be executed providing extendibility for additional features. New features can be introduced by adding new scripts without the need to recompile supporting modules e.g. home networking middleware . The distribution of new features to various devices is made simple since the system has to merely download the script. No reinstallation or recompilation is required. This makes the system modular and new device invocation mechanisms can essentially be introduced freely. Therefore new device types and technologies can also be supported. Scripts can also be written that can perform tasks that span multiple devices.

As is known to those skilled in the art the aforementioned example architectures described above according to the present invention can be implemented in many ways such as program instructions for execution by a processor as logic circuits as an application specific integrated circuit as firmware etc.

The present invention has been described in considerable detail with reference to certain preferred versions thereof however other versions are possible. Therefore the spirit and scope of the appended claims should not be limited to the description of the preferred versions contained herein.

