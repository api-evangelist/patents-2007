---

title: Event processing finite state engine and language
abstract: In various embodiments, a method for processing event streams includes receiving a finite state machine defined in response to a set of processing components, a set of states, and a set of entry points. Event data associated with an event stream is also received. The event data is processes according to the finite state machine to generate an event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099737&OS=08099737&RS=08099737
owner: Oracle International Corporation
number: 08099737
owner_city: Redwood Shores
owner_country: US
publication_date: 20070605
---
This application is related to co pending U.S. patent application Ser. No. 11 685 655 filed Mar. 13 2007 and entitled Virtualization and Quality of Data 

This application is related to co pending U.S. patent application Ser. No. 11 685 673 filed Mar. 13 2007 and entitled Real Time and Offline Location Tracking Using Passive RFID Technologies 

This application is related to co pending U.S. patent application Ser. No. 11 758 538 filed Jun. 5 2007 and entitled RFID Key Rotation System 

This application is related to co pending U.S. patent application Ser. No. 11 758 532 filed Jun. 5 2007 and entitled RFID and Sensor Signing System and

This application is related to co pending U.S. patent application Ser. No. 11 871 829 filed Oct. 12 2007 and entitled Industrial Identify Encoding and Decoding Language the respective disclosures of these applications patents are incorporated herein by reference in their entirety for all purposes.

Embodiments of the present invention generally relate to Radio Frequency Identification RFID applications. More specifically embodiments of the present invention relate to techniques for processing events using a finite state engine.

Radio Frequency Identification RFID is an automatic identification method which relies on the storing and remotely retrieving of data using devices such as RFID tags or transponders. RFID tags or transponders are also known as proximity proxy or contactless cards because data from an RFID tag can be retrieved without physical contact. Generally a device such as an RFID reader uses radio waves to remotely retrieve a unique identifier stored using the RFID tag when the RFID tag is within proximity of the RFID reader. RFID tags can be attached to or incorporated into a product animal or person for the purpose of identification by the RFID reader. RFID readers can be placed on doorways in train cars over freeways mounted on vehicles and also can be embodied in mobile handheld devices.

RFID technologies have been traditionally implemented in different ways by different manufacturers although global standards are being developed. Thus computer applications using RFID are also typically hard coded to specific RFID devices sold by the same manufacture. One problem with this arrangement is that these computer applications have traditionally been limited to using only the sensor data retrieved from the vendor supplied RFID readers.

Moreover in order to provide automated shipping and receiving real time inventory automated shipping and received and real time security other types of RFID sensor devices such as environment sensors e.g. temperature and humidity sensors location sensors e.g. Global Positioning System or GPS devices and notification devices may be required. Accordingly with the addition of each sensor device a specific application may be required to access the sensor data from the sensor device. This vendor lock in leads to having too many non integrated applications creates unnecessary complexity and also increases costs associated with the management and deployment of RFID technologies.

One solution is to embed the sensor device with the RFID tag. For example one cold chain solution provides an RFID tag embedded with a temperature sensor. Cold chain refers to a temperature controlled supply chain. An unbroken cold chain is an uninterrupted series of storage and distribution activities which maintain a given temperature range. A reader can read both the identifier of the RFID as well as the temperature from the embedded sensor.

However by embedding sensors with RFID tags the cost and complexity associated with each RFID tag increase. Furthermore computer applications configured to read the sensor data are still tied directly to specific RFID readers. Thus the only items for which sensor data can be used from those applications are still those that can be tagged and directly sensed using the specific vendor supplied RFID readers.

Accordingly what is desired are improved methods and apparatus for solving the problems discussed above while reducing the drawbacks discussed above.

Embodiments of the present invention generally relate to Radio Frequency Identification RFID applications. More specifically embodiments of the present invention relate to techniques for processing events using a finite state engine.

In various embodiments a method for processing event streams includes receiving a finite state machine defined in response to a set of processing components a set of states and a set of entry points. Event data associated with an event stream is also received. The event data is processes according to the finite state machine to generate an event.

In some embodiments the set of processing components may be received. Each of the processing components may include one or more operations. The one or more operations may include at least one of a logical operation an arithmetic operation a binary operation and a compare operation. In one embodiment the set of states is received. Each of the states may identify one or more relationships between a first processing component and a second processing component.

In various embodiments the set of entry points is received. Each entry point may identify one or more states as start states associated with the finite state machine. The finite state machine may be generated based on the set of processing components the set of states and the set of entry points.

In some embodiments a system for processing event streams includes a processor and a memory. The memory is coupled to the processor and configured to store a plurality of code modules which when executed by the processor cause the processor to receive a finite state machine defined in response to a set of processing components a set of states and a set of entry points receive event data associated with an event stream and process the event data according to the finite state machine to generate an event.

In further embodiments a computer program product is stored on a computer readable medium for processing event streams. The computer program product includes code for receiving a finite state machine defined in response to a set of processing components a set of states and a set of entry points code for receiving event data associated with an event stream and code for processing the event data according to the finite state machine to generate an event.

A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

Embodiments of the present invention generally relate to sensor technologies and more specifically to techniques for virtualization and quality of sensor data. In order to better understand the present invention aspects of the environment within which the invention operates will first be described.

In order to better understand the present invention aspects of the environment within which various embodiments operate will first be described.

In various embodiments methods and systems for collection of sensor data that may incorporate embodiments of the present invention augment enterprise software with RFID and sensor technologies. The methods and systems generally provides a faster reasons loop greater visibility an extensible framework and scalability for the collection of sensor data from a variety of sensor devices and the processing of sensor data by a variety of applications. The systems typically can be deployed in locations where sensor devices can provide better insight into business processes.

In various embodiments the methods and systems provide localized management and control of sensor devices through an extensible framework and interface. The methods and systems can funnel data sensor and environment data from RFID readers and sensor device typically located at the periphery of an enterprise for access by core applications.

As shown in system includes sensor devices middleware and applications . Middleware is communicatively coupled to sensor devices and to applications . Middleware includes sensor devices interface data management services analysis service and access services .

Sensor devices include contactless cards transponders RFID tags smart labels fixed interrogators readers mobile readers handheld readers image capture devices video captures devices audio capture devices environmental sensing devices e.g. temperature humidity and air pressure sensors location information devices e.g. Global Positioning System weight sensing devices notification and alert generation devices and the like. One example of an RFID tag is described further with respect to . One example of an RFID reader is described further with respect to . In some embodiments sensor devices include hardware and or software elements that respond to external input from middleware to perform actions manipulate objects and the like.

In general middleware includes hardware and or software elements that provide an interface for using sensor devices . In this example middleware includes sensor devices interface data management services analysis service and access services .

Sensor devices interface includes hardware and or software elements that communicate with sensor devices . One example of sensor devices interface is Oracle s Application Server Sensor Edge Server from Oracle Corporation Redwood Shores Calif. In various embodiments sensor devices interface receives sensor data from sensor devices . In some embodiments sensor devices interface communicates with one or more of sensor devices to provide external input from middleware to cause the one or more of sensor devices to display notifications and alerts and to perform responses actions or activities e.g. control a conveyor belt or robot .

In general sensor data is any information signal communication and the like received from sensor devices . Some examples of sensor data are unique or semi unique identifiers associated with RFID tags temperature information received from a temperature sensor data and information associated with humidity and pressure position and location information still image data video sequence data motion picture data audio data and the like.

Data management services include hardware and or software elements that provide storage of and access to collected sensor data. Some examples of data management services include databases storage arrays storage area networks network attached storage data security devices data management devices and the like.

Analysis services include hardware and or software elements that provide analysis of collected sensor data. Some examples of analysis which may be performed by analysis services include business intelligence business process management inventory management distribution and supply chain management accounting reporting and the like.

Access services include hardware and or software elements that provide access to features of middleware . In various embodiments access services include hardware and or software elements that manage sensor devices through sensor devices interface . In some embodiments access services include hardware and or software elements provide access to sensor data via data management services . In some embodiments access services include hardware and or software elements that provide access to analysis services . For example in various embodiments access services provides one or more users or computer processes with a portal using web services to access sensor data from analysis services and data management services . In further embodiments access services allows the one or more users or computer processes to initiate or coordinate actions or activities using sensor devices through sensor devices interface .

Applications include hardware and or software elements that access sensor data and or control sensor devices through middleware . Some examples of applications are Oracle s E Business Suite PeopleSoft Enterprise and JD Edwards Enterprise from Oracle Corporation Redwood Shores Calif.

In one example of operation system collects sensor data from one or more of sensor devices e.g. an RFID reader . For example a plurality of RFID readers detect the presents of a plurality of RFID tags at various times during the movement of objects in a warehouse or at locations in a supply chain.

In this example middleware collects the sensor data via sensor devices interface and stores the sensor data using data management services . Middleware provides access and analysis of collected and stored sensor data to applications via analysis service and access services . Accordingly system provides a framework for accessing a wide variety of sensor devices to obtain sensor data from a variety of applications.

In various embodiments system deployed in locations where sensor devices can provide better insight into business processes. System provides greater visibility of sensor data by allowing non vendor specific applications to have access to sensor data. This extensible framework also provides scalability for the collection of sensor data from a variety of sensor devices. In various embodiments system provides localized management and control of sensor devices through middleware and sensor devices interface .

In operation tag typically obtains power to operate circuitry from an inductive coupling of tag to energy circulating around a reader coil e.g. low frequency high frequency very high frequency and ultra high frequency radio waves . In some embodiments tag operates in a low frequency LF band e.g. 13.56 MHz . Alternatively tag may use radiative coupling such as in ultra high frequency UHF and microwave RFID systems to energize circuitry which in turn communicates data e.g. identifier stored in memory via antenna . Antenna typically is a conductive element that enables circuitry to communicate data.

In general tag and other contactless cards smart labels transponders and the like typically use three basic technologies active passive and semi passive. Active tags typically use a battery to power microchip circuitry and transmit signals to readers. Active tags can generally be read from distances of 100 ft. or more. Passive tags do not include a battery. Instead passive tags draw power from a magnetic field that is formed by the coupling of an antenna element in the tags with the coiled antenna from a reader. Semi passive tags are similar to active tags in that they use a battery to run microchip circuitry. However in semi passive tags the battery generally is not used to broadcast a signal to the reader.

In various embodiments circuitry may include an RF interface and control logic in addition to memory combined in a single integrated circuit IC such as a low power complementary metal oxide semiconductor CMOS IC. For example the RF interface can be an analog portion of the IC and the control logic and memory can be a digital portion of the IC. Memory may be a non volatile read write memory such as an electrically erasable programmable read only memory EEPROM .

In some embodiments circuitry includes an antenna tuning capacitor and an RF to DC rectifier system designed for Antenna which is the coupling element for tag . Antenna can enable tag using passive RFID to obtain power to energize and active circuitry . Antenna can have many different shapes and sizes depending on the type of coupling system e.g. RFID being employed.

Some examples of tag are ISO 11784 11785 tags ISO 14223 1 tags ISO 10536 tags ISO 14443 tags ISO 15693 tags ISO 18000 tags EPCglobal ANSI 371.1 2 and 3 AAR S918 and the like.

In some embodiments circuitry of tag is configured to read from and write to memory . Identifier is generally a unique serial number. Identifier may also be hard coded into circuitry . In some embodiments information such as a product information and location may be encoded in memory of circuitry .

In this example reader uses radio frequencies to communicate with tag using antenna . For example when tag is within proximity of reader tag draws power from a magnetic field that is formed by the coupling of antenna from tag with antenna from reader . Circuitry from tag then transmits identifier via antenna . Reader detects the transmission using antenna and receives identifier through antenna interface . In some embodiments reader stores the identifier in memory . Reader may transmit data including identifier in digital or analog form to sensor devices interface using communications interface .

In various embodiments reader uses low high ultra high and microwave frequencies to store and retrieve data from products or devices using RFID tags.

In this example sensor devices interface includes device abstraction layer groups module local processors internal store forward module dispatch interfaces administration interfaces data management interface and development services interface . Device abstraction layer is linked to groups module and local processors . Local processors are linked to groups module and to internal store forward module . Internal store forward module is link to dispatch interface .

Device abstraction layer communicates via line with sensor devices to received collected sensor data and drive operations of one or more of sensor devices . Dispatch interface communicates collected sensor data via line with one or more applications such as analysis services and applications . Administration interface is link via line to one or more computers systems that administer the operations of sensor devices interface . Data management interface communicates collected sensor data via line with data repositories such as a database provided by data management services . Development services interface communicates via line with applications to provide an Application Program Interface API to collected sensor data and operations of one or more of sensor devices .

Device abstraction layer includes hardware and or software elements that received collected sensor data and drive the operations of one or more of sensor devices . In one embodiment device abstraction layer provides a plug and play architecture and extendable driver framework that allows applications e.g. Applications to be device agnostic and utilize various sensors readers printers and notification devices. In some embodiments device abstraction layer may include out of the box drivers for readers printers and display notification devices from various vendors such as Alien of Morgan Hill Calif. and Intermec of Everett Wash.

Groups module and local processors include hardware and or software elements that provide a framework for simple aggregate and programmable filtering of sensor data received from device abstraction layer . For example using groups module filters executed by local processors are applied to a single device or to logical groups of devices to collect sensor data that satisfies predefined criteria. Local processors include hardware and or software elements for creating filters and rules using sensor data. Some examples of filters may include Pass Filter Movement Filter Shelf Filter Cross Reader Filter Check Tag Filter Pallet Shelf Filter Pallet Pass Filter and Debug Filter. In some embodiments filters and rules may be created using the JavaScript programming language and through the use of regular expressions.

Internal store forward module includes hardware and or software elements that provide an interface between local processors and dispatch interfaces . In one example internal store forward module includes a buffer used for communication between local processors and dispatch interfaces . Dispatch interfaces include hardware and or software elements that disseminate sensor data to applications e.g. applications . In some embodiments dispatch interfaces include a web services component an HTTP dispatcher component a stream dispatcher component and an interface supporting subscription or query based notification services.

Administration interface includes hardware and or software elements that managing operations of sensor devices interface . In one example administration interface provides a task oriented user interface for adding configuring and removing devices creating and enabling filters and rules and creating and enabling dispatchers that disseminate sensor data.

Data management services include hardware and or software elements that provide reporting associations and archiving of sensor data. Development services interface includes hardware and or software elements that provide an Application Program Interface API to collected sensor data and operations of one or more of sensor devices . Some examples of API services provided by development services interface include web services IS services device management monitoring interfaces EPC management and raw sensor data interfaces.

In one example of operation sensor devices interface collects sensor data from sensor devices e.g. RFID readers RFID tags or labels temperature sensors laser diodes etc. using device abstraction layer . Groups module and local processors filter clean and normalize the collected sensor data and forward relevant events such as those that meet predefined criteria or are obtained from a selected device to internal store forward interface .

The filtered sensor data is then distributed by internal store forward interface to various distribution systems through dispatch interfaces . The unfiltered and or filters sensor data may further be archived and storage using data management interface .

In various embodiments sensor devices interface provides a system for collection filtering and access to sensor data. Sensor devices interface can provide management and monitoring of sensor devices by printing labels operating sensors light stacks message boards carousels and the like. In some embodiments sensor devices interface provides scalability that allows access to sensor data without being tied to one specific vendor application.

In general sensor devices generate events. An event is typically an asynchronous message that includes event data. Typically processing is performed on the events rather than providing the raw event data to an application. This processing may include transformations and evaluation of event data and also may require a record or history of state because the messages are asynchronous.

Typically events may be transformed and mapped for example using XSLT before being used or consumed by applications. However much of the processing to transform or map events needs to be performed using compiled or scripted code. This leads to some inflexibilities when designing transformations because there may be no common agreements or interfaces between pieces of compiled or scripted code.

Accordingly in various embodiments system provides an engine and language that allows a user or administrator to quickly define a finite state machine that can process asynchronous messages received from sensor devices . In general system provides a metadata driven engine that allows in addition to data transformations complex functionality expression computation decision making capabilities. Accordingly system provides a finite state machine and a well defined context that provides transformations processing evaluation and manipulation of event data.

In general system implements a metadata based language that allows a user or administrator to define complex operations and processing on event streams. Thus system provides an engine to execute the metadata based language to create a finite state machine that receives and asynchronously processes event data.

Sensor hardware includes hardware and or software elements that generate events. An event may be contained in a discreet or a continuous stream of event data. Event processing engine includes hardware and or software elements for processing event data. One example of event processing engine is sensor devices interface of . However other components of system may perform event processing.

In one example of operation sensor hardware sends event data to event processing engine . Event processing engine may transform event data or perform any number of other operations transformations after which event processing engine sends event data to applications .

In order to process event data event processing engine receives a metadata based language which defines processing components sets of states and entry points that are used to build a finite state machine. The event processing engine executes the finite state machine defined by the metadata based language to asynchronously process event data . During the processing of event data event processing engine may call any number of internal or external services to process or manipulate event data as specified by the metadata based language.

Accordingly event processing engine may asynchronously process event data using the metadata based language. This allows a user to define complex operations and processing on event data at runtime using the metadata based language. Additionally processing components may be written at any time and provided as plug ins using the metadata based language such that event processing engine may be expanded without using compiled code.

Furthermore entry points into the finite state machine defined by the metadata based language may be also written at any time and provided as plug ins. This allows a user to define processing on event data at a particular starting point in the finite state machine or using pre existing processing components already part of another finite state machine.

In step sensor devices interface receives event data. Event data may be received in discreet form or as a continuous event stream. In step sensor devices interface processes the event data using a finite may state machine defined by a set of processing components a set of states and a set of entry points.

In general a processing component defines one or more operations to be performed on event data. Typically a processing component receives input in the form of parameters. The parameters define the data on which to operate. The processing component may generate a return value indicating success or failure of the one or more operations.

A state defines one or more processing components and one or more relationships between one or more processing components. The one or more relationships define transitions to and from the one or more processing components. For example a match state may include a processing component generates a set of results based on a comparison between a first input and a second input. The comparison may be a binary comparison a text comparison a numerical comparison and the like. One or more relationships defined in the match state indicate transitions to other states from the match state based on a set of results. The state may also define return values execution codes and error exceptions.

An entry point defines one or more states in which to enter processing of the finite state machine based on event data. For example if a particular attribute of event data is matched by a given entry point sensor devices interface begins processing of the event data at the state indicated by the given entry point. A finite state machine according to embodiments of the present invention may have more than one entry point.

Accordingly sensor devices interface may process event data asynchronously using the finite state machine. Based on one or more entry points sensor devices interface may enter processing according to the finite state machine to transform or otherwise manipulate event data to be output to applications. Thus in various embodiments processing components may be written and used by sensor devices interface as plug ins during runtime. This allows the processing capabilities of sensor devices interface to be expanded at any time simply by adding a new plug in and a possible entry point without using compiled or scripted code.

In step sensor devices interface receives a set of processing components. In step sensor devices interface receives a set of states. In step sensor devices interface receives a set of entry points. In step sensor devices interface generates a finite state machine using the set of processing components the set of states and the set of entry points.

In various embodiments sensor devices interface generates a graph representing a state machine from the set of processing components the set of states and the set of entry points. Sensor devices interface then uses the graph during asynchronous processing of event data to process the finite state machine represented by the graph. ends in step .

In general sensor devices interface generates a graph representing the finite state machine in response to metadata based language defining the set of processing components the set of states and the set of entry points. In this example sensor devices interface receives event data and analyzes the event data for a particular attribute or data set that is specified by entry point .

Upon finding the particular attribute or data set specified by entry point sensor devices interface passes the event data to processing component using transition . Processing component then performs one or more operations transformations evaluations and the like on the event data. In response to a successful execution by processing component processing component transitions to processing component using transition . Processing component may pass one or more parameters to processing component as a result of processing the event data. The one or more parameters may include the event data as transformed by processing component .

Processing component may also perform one or more operations transformations evaluations and the like on the event data or parameters received from processing component . Processing component then calls or transitions to processing component using transition . Processing component may also then perform one or more operations transformations evaluations and the like on the event data.

In this example processing component may transition to processing component using transition or transition to processing upon using transition . Processing component may perform one or more operations transformations evaluations and the like on the event data. If processing component represents the final or accepting state of finite state machine sensor devices interface then may forward be processed event data to one or more applications.

Entry point is linked to match state via transition . Entry point is linked to encode state via transition . Entry point is linked to decode state via transition . Match state is linked to encode state via transition and to log state via transition . Log state is linked to format state via transition . Format state is linked to encode state via transition . Encode state is linked to web services state via transition . Decode state is linked to web services state via transition . Web services state is linked to API state via transition .

In this example sensor devices interface receives event data and monitors or processes the event data for one or more attributes or data sets defined by entry points and . Each of the entry points and may specify a different attribute or data set to be monitored by sensor devices interface . For example entry point may direct sensor devices interface to monitor for RFID tags that include a UPC code while entry point may direct sensor devices interface to monitor for RFID tags that include a GLN code while entry point may direct sensor devices interface to monitor for RFID tags that include a GTLN code. Thus sensor devices interface asynchronously processes the event data and enters multiple points of finite state machine using entry points and .

Match state provides a processing component that performs one or more types of comparisons or matches on input data. Based on the one or more types of comparisons match state generates a set of results. Based on the set of results sensor devices interface either transitions to encode state or transitions to log state .

Log state provides a processing component that logs input data to a system log such as a file or a database. Log state may not transform event data received from match state but merely writes all or portions of the event data to the system log. Log state and transitions to format state .

Format state provides a processing component that formats event data according to predetermined criteria. For example format state may format the event data as plaintext encapsulate the event data in a markup language e.g. HTML or XML convert the event data to different number spaces and the like. Format state then transitions to encode state .

Encode state provides a processing component that encodes event data according to an encoding scheme. For example encoding state may encrypt or decrypt event data. Encoding state may also convert portions of the event data to different number spaces characters spaces and the like. Encoding state may also format the data similar to format state . Encoding state transitions to web services state .

Alternatively sensor devices interface may monitor for event data which matches an attribute field or data set defined by entry point . Sensor devices interface then may initiate processing of the event data at encoding state via transition .

In another alternative sensor devices interface may monitor for event data which matches an attribute field portion of event data or data set defined by entry point . Sensor devices interface then may initiate processing of the event data at decode state via transition .

Decode state provides a processing component ID codes event data according to a decoding scheme. For example decoding state may encrypt or decrypt event data decoding state may also convert portions of the event data to different number spaces character spaces and the like. Decode state then transitions to web services state via transition .

Web services state provides a processing component that provides web services. For example web services state may call a web service protocol stack. In general a web service protocol stack is a collection of computer networking protocols that are used to define locate implement and make web services interact with each other. Typically a web service protocol stack mainly comprises four areas service transport XML messaging service description and service discovery.

Service transport is typically responsible for transporting messages between network applications and includes protocols such as HTTP SMTP FTP and Blocks Extensible Exchange Protocol BEEP . XML messaging is typically responsible for encoding messages in a common XML format so that the messages can be understood at either end of a network connection. Some examples of protocols used for XML messaging include XML RPC SOAP and REST.

Service description is typically responsible for describing the public interface to a specific web service. One example of a service description is provided by the WSDL interface format. Service discovery is typically responsible for centralizing services into a common registry such that network web services can publish their location and description and makes it easy to discover what services are available. One example of a service discovery is provided by the UDDI API. Web service protocol stack may also include a range of defined protocols such as BPEL and SOAP DSIG.

In this example at the return of successful processing web services state transitions to API state via transition . API state includes a processing component that provides an interface to one or more applications for accessing transformed event data. In general an application programming interface API is an interface that a computer system or program library provides in order to support requests for services such as a coherent interface consisting of several classes or several sets of related functions or procedures. For example API state may include one or more buffers filters or further data transformations that allow applications to access the event data or to access operations to be further performed on the event data.

Thus finite state machine may include various types of processing components to perform different operations on event data. According to various embodiments the processing components may be written as plug ins and inserted into processing of event data at real time. This allows an administrator to implement or updated finite state machines doe real time asynchronous processing of event data.

Schema definition includes one or more statements that define the finite state machine. In this example the schema definition is written in the Extensible Markup Language XML . Other markup languages scripted or complied languages may be used to generate the one or more statements that define the finite state machine.

Components definition includes one or more statements that define at least one processing component. In this example components definition includes a Match Event processing component . Processing component e.g. expressed as includes a namespace and a class variable. The namespace is used by one or more states to reference processing component . The class variable in this example provides a pointer or URL to a set of functions or procedures e.g. a JAVA class or other API interface .

Entry point definition includes one or more statements that define at least one entry point. In this example entry point definition includes an entry point . Entry point e.g. expressed as includes a pointer or reference to one or more states e.g. state A.check .

State definition includes one or more statements that define at least one state. In this example state definition includes a state . State e.g. expressed as 

The following is an expanded view of specification . The following is merely one example and is not intended to be limiting in any manner.

As described above system provides an engine and a metadata based language that can implement finite state machines for asynchronously processing event data in real time. This allows new transformations evaluations and processing of event data received from sensor devices to be quickly and rapidly implemented using a plug in architecture. Using system a user can rapidly define complex operations and processing on event streams. Furthermore using system the user can further defined entry points into processing of event data using the finite state machines.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Network interface subsystem provides an interface to other computer systems and networks and devices. Network interface subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system .

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a barcode scanner a touchscreen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system .

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD or a projection device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system .

Storage subsystem may be configured to store the basic programming and data constructs that provide the functionality of the present invention. Software code modules or instructions that provides the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor s . Storage subsystem may also provide a repository for storing data used in accordance with the present invention. Storage subsystem may comprise memory subsystem and file disk storage subsystem .

Memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent non volatile storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a Compact Disk Read Only Memory CD ROM drive a DVD an optical drive removable media cartridges and other like storage media.

Computer system can be of various types including a personal computer a portable computer a workstation a network computer a mainframe a kiosk or any other data processing system. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in are possible.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The described invention is not restricted to operation within certain specific data processing environments but is free to operate within a plurality of data processing environments. Additionally although the present invention has been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while the present invention has been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

