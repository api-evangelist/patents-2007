---

title: Automatically controlling in-process software distributions through time prediction of a disturbance
abstract: A method and system for controlling an in-process software distribution to computing devices. A time of a disturbance in an environment of a computing device is predicted based on a change in a pressure exerted on the computing device. A checkpoint in a time interval of a distribution of a set of software upgrade increments to the computing device is automatically determined. The checkpoint is prior to the time of the disturbance. The determination of the checkpoint utilizes length(s) of increment(s) of the set of increments. Prior to the checkpoint, the computing device receives the increment(s). The computing device requests an interruption of the distribution beginning at the checkpoint. In one embodiment, the computing device is a buoy-like energy capture and generation device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962431&OS=07962431&RS=07962431
owner: International Business Machines Corporation
number: 07962431
owner_city: Armonk
owner_country: US
publication_date: 20070918
---
The present invention relates to an artificial intelligence based method and system for controlling an in process software distribution to computing devices via automatic checkpointing in response to a prediction of an environmental disturbance to which the computing devices are subjected. More particularly the present invention relates to a software distribution and pressure sensor system and related method for automatically checkpointing a software distribution to a buoy like energy capture and generation device in response to a prediction of a disruptive ocean wave.

One alternate energy generation technology is the utilization of ocean wave energy to generate and distribute power for commercial use. Wave energy generation fields that are in place in several ocean locations are comprised of buoy like energy capture and generation devices a.k.a. buoy like devices that are deployed offshore. For example the buoy like devices are deployed about a mile offshore over approximately 30 acres of the ocean s surface. The rising and falling of the ocean waves move each buoy like device in a wave energy field thereby creating mechanical energy which is then converted into electricity. The buoy like devices have onboard computers or control units to facilitate the capture and generation of electricity that is harnessed from each wave. The buoy like devices are programmed to shut down in order to protect themselves when the ocean waves go beyond a predetermined height. To upgrade or install new software code e.g. install new security patches on the onboard computers or control units conventional software distribution techniques can be used to distribute the software to the buoy like devices. Under the volatile conditions of the ocean environment e.g. waves going beyond the aforementioned predetermined height such software distribution is interrupted leading one or more onboard computers and or control units to fail come out of their maintenance modes or have operation complications such being out of sync with other buoy like devices in the same wave energy generation field. Other conventional techniques for upgrading the onboard computers or control units include transporting personnel offshore to the wave energy generation field to manually perform software updates on each device or to physically bring the devices or components of the devices back to shore for manual software maintenance. Such known manual software upgrade techniques that rely on offshore transportation of personnel are time consuming labor intensive and expensive. Furthermore these manual software upgrade techniques are based on human intervention and are therefore inconsistently applied across multiple buoy like devices. Similar problems of operational failure lack of synchronization time and labor costs of manual retrieval of components and or inconsistently applied software upgrades also pertain to software maintenance of computing devices residing in other volatile environments e.g. probes in lava fields . Thus there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.

The present invention provides a computer implemented method of controlling an in process software distribution to computing devices. A computing device predicts a time of a disturbance in an environment of the computing device. The prediction of the time of the disturbance is based on a change in a pressure exerted on the computing device. The computing device automatically determines a checkpoint in a time interval of a distribution of software upgrade increments to the computing device. The checkpoint is prior to the predicted time of the disturbance. The automatic determination of the checkpoint includes a utilization of length s of increment s of the software upgrade increments. Prior to the checkpoint the computing device receives the increment s . The computing device requests an interruption of the distribution. The requested interruption begins at the checkpoint in response to the request. In one embodiment the computing device is a buoy like energy capture and generation device.

A system and computer program product corresponding to the above summarized method are also described and claimed herein.

Advantageously the present invention provides a scalable reliable consistent flexible and effective software maintenance technique for computer devices included in buoy like energy capture and generation devices or any other devices that are sensitive to the changing of pressure or other environmental variables. Further the present invention provides a technique for quickly and efficiently installing security software patches on networked buoy like energy capture and generation devices to protect the network from intrusions. Still further the software distribution control process disclosed herein provides software distribution to buoy like devices while avoiding certain destructive effects of outages caused by disruptive ocean waves.

The present invention provides a method and system for controlling an in process software distribution to computing devices located in an environment in which environmental disturbances cause protective shutdowns of the computing devices. The method and system disclosed herein automatically determine a checkpoint and interrupt the software distribution at the checkpoint in response to a prediction of an environmental disturbance. The checkpoint is determined so that at least one software upgrade increment can be successfully distributed prior to the time of predicted environmental disturbance. The prediction of the environmental disturbance is based on changes in pressure exerted on the computing devices or on changes in other environmental variables associated with the computing devices. In one embodiment the computing devices are buoy like energy capture and generation devices a.k.a. buoy like devices located in an ocean and the predicted environmental disturbance is an ocean wave having predetermined characteristics that cause a shutdown of the buoy like devices.

Monitor monitors the conditions of the environment of computing device by receiving environmental readings of environmental variables. The environmental variables are used by decision and sensitivity analysis tool to determine 1 whether a stop and restart of a software distribution and upgrade process is needed and 2 when to stop and restart the software distribution and upgrade process. The software distribution and upgrade process is also referred to herein simply as the software distribution process or the software distribution. Monitor also sends environmental readings to data processing engine which stores the environmental readings in repository as a historical reference.

In one embodiment computing device is a buoy like energy capture and generation device included in a plurality of buoy like energy capture and generation devices placed in a wave energy generation field in an ocean environment. Monitor when included in a buoy like device receives for example readings for any combination of variables in the following non exhaustive list that is provided for illustrative purposes only 

1. pressure exerted by the ocean water and the atmosphere including gusting wind pressure on the buoy like device

7. historical climate data and historical ocean wave related data e.g. frequency amplitude and wavelength 

Hereinafter items numbered 1 through 7 in the list presented above are also referred to as environmental variables and items 8 and 9 are also referred to as characteristics of a software package.

Decision and sensitivity analysis tool processes input environmental readings received from monitor and characteristics of the software being updated from software distribution interface against data and rules obtained from data processing engine to determine if and when the software distribution process needs to stop and restart. Decision and sensitivity analysis tool is a computer based software program which interacts with each component within systems framework and uses an intelligent algorithm to determine if and when the software distribution of the upgrade can or cannot continue based on an analysis of historical pressure data residing in software distribution data repository current pressure readings included in readings other environmental variables listed and discussed above relative to the monitor component and characteristics of the software being upgraded.

When decision and sensitivity analysis tool receives input from software distribution interface indicating that a software distribution process is ready to start or is already in progress tool maps current readings of the environmental variables e.g. pressure readings from monitor against the data and trend information stored in repository and accessed via data processing engine to determine if there is any anticipated interruption of the software distribution process in the near future i.e. within a time period during which the software distribution process is able to complete gracefully . Such an interruption is anticipated if tool predicts the occurrence of an environmental disturbance in the near future which would cause a protective shutdown of the computing device . In one embodiment an environmental disturbance is a disruptive ocean wave caused by for instance a storm. As used herein a disruptive ocean wave a.k.a. disruptive wave is an ocean wave that has an amplitude exceeding a predefined threshold and that causes a protective shutdown of a buoy like device that includes computing device .

If the aforementioned anticipated interruption is determined tool determines the stopping point of the software distribution process based on the length of the increments of software code being distributed and the amount of time available prior to the anticipated interruption. This amount of time is determined by tool based on a trend generated from the historical data in repository collected under similar environmental conditions. Tool then sends a request to software distribution client via software distribution interface to stop the software distribution or upgrade at the determined stopping point.

In response to monitor detecting readings that have returned to normal after the environmental disturbance has passed tool evaluates if there is any other anticipated interruption in the near future. For example after a first disruptive wave passes and pressure readings return to normal i.e. return to a predefined operational range tool determines if pressure readings indicate that another disruptive wave is predicted in the near future. If there is sufficient time to allow the next increment or increments of the software distribution or upgrade process to complete before the next environmental disturbance tool sends a resume request i.e. a request to restart the software distribution or upgrade process to software distribution client via software distribution interface .

Software distribution interface interfaces with software distribution client to collect information regarding the characteristics of the software being updated by the software distribution and deliver a decision from tool to client regarding which increment will be the last increment processed prior to stopping the software distribution process if necessary. Software distribution client resides on for example the buoy like device. Interface includes for example a set of application programming interfaces APIs which reads the characteristics of the software being updated via a software distribution tool such as Tivoli Provisioning Manager TPM Express for Software Distribution. TPM Express for Software Distribution is offered by International Business Machines Corporation located in Armonk N.Y.

For example client is a TPM Express for Software Distribution agent that stops the distribution of a software package gracefully at the requested increment upon receiving the request from software distribution interface . Upon tool determining that pressure readings are within the predefined operational range to allow the distribution to complete its next increment tool sends a resume request to the agent via interface . The agent continues the software distribution process from where the software distribution process left off i.e. at the previously determined stopping point completes the download of the software upgrade and commits the changes gracefully.

Data processing engine and repository comprise a management database component that provides an integrated knowledge repository which stores facts rules and data pertaining to a software distribution knowledge domain location specific ocean wave pressure forecasting and historical measurement data for the operating environment of computing device . Data processing engine performs data management operations on the data stored in repository to generate trends of environmental disturbances e.g. storms and disruptive waves which tend to shut down computing devices thereby causing interruptions in software distributions.

Software distribution input data is input into data processing engine and stored in repository by for example one or more users e.g. an engineering team using a graphical user interface such as a web thin client or by a scheduled update via an automated batch process. Data includes for example a pressure threshold level that indicates that device will shut down a threshold probability level that indicates that a software distribution interruption will occur and historical ocean wave data for the area local to device . Additional details about data stored in repository are presented below in Section 4.

Systems framework is a software component that binds together monitor tool interface and data processing engine and ensures that these components of device work together in complete synergy within the framework as well as with components external to the framework. Systems framework runs on any conventional operating system OS and in any computer hardware environment. In one embodiment systems framework supports National Language Support NLS and hence can be run in any language covered under the NLS support umbrella. Systems framework may be implemented in a programming language such as Java to provide multi OS and multi hardware support distributed objects and multi language support. Framework provides controlled and secure program interfaces between the components it includes and the external system environment.

The software packages to be distributed to devices are completed on master server computing system and are placed in a central repository not shown residing on master computing system . The central repository also includes code for installing the software packages. The software packages are then replicated onto each distribution point computing system . Distribution point computing systems can be exact replicas of master server computing system or can include a subset of the software packages based on the location of specific software needs. The software packages at the distribution point computing systems are distributed to the buoy like devices that are coupled thereto. Each distribution point computing system e.g. computing system or may directly distribute the software packages to a set of one or more buoy like devices . Master server computing device also has the option of directly distributing the software packages to one or more buoy like devices . Alternatively a distribution point computing system may distribute the software packages to one buoy like device of a set of peer to peer enabled buoy like devices where the one buoy like device then distributes the software packages to the other buoy like devices in the set.

The software distribution computing device see also resides on each buoy like device and includes an interface with the client code of software distribution client see e.g. a TPM client . Again software distribution computing device includes an interface to receive readings see of environmental variables that device monitors and device allows users e.g. an engineering team to update data and rules that are stored in software distribution data repository see .

In step data processing engine see receives rules regarding checkpointing for the software distribution. Data processing engine see stores the rules received in step in software distribution data repository see . The rules for example specify increments e.g. expressed as a number of bytes used by computing device see to control a distribution of a particular software package. Step also includes data processing engine see receiving data see from users such as an engineering team. Data see includes for example input data listed and described in .

In step the software distribution is initiated by for example master server computing system see . In step monitor see receives environmental readings see for variables related to the environment of a device e.g. buoy like device of that includes computing device see . In step monitor see sends the received environmental readings see to data processing engine see which stores the environmental readings in repository see . Again environmental readings see include a measurement of pressure on a computing device e.g. buoy like device of where the pressure is exerted by an element of the device s environment e.g. exerted by water on which the buoy like device is floating . The environmental readings see may also include measures of climate and ocean activity changes. For example the environmental readings may include water temperature air temperature and ocean wave data such as wave frequency amplitude and length.

In step decision and sensitivity analysis tool see predicts the starting time of an environmental disturbance e.g. the time that a buoy like device that includes computing device of will be subjected to an ocean wave having an amplitude sufficient to cause a shut down of the buoy like device . The prediction in step uses artificial intelligence and is based on the readings received and stored in step . For example if computing device see is included in buoy like device see then step predicts the starting time of a pressure disturbance interval caused by an anticipated disruptive ocean wave. In step the prediction of the starting time of a pressure disturbance interval caused by a disruptive ocean wave is provided by for example the tri nested spectral wave model described in Cox A. T. Cardone V. J. Resio D. T. Nov. 3 5 1999 .

In step decision and sensitivity analysis tool see determines a checkpoint for the in process software distribution that was initiated in step . The determination of the checkpoint uses artificial intelligence and is based on the length of predefined increments for the software package being distributed the amount of time available until the time of the environmental disturbance predicted in step and optionally an amount of time that acts as a buffer a.k.a. buffer time . The checkpoint determined in step allows for a graceful interruption of the software distribution. That is upon a restart of the distribution following the interruption the restarted distribution does not require a repeat of any part of the distribution that occurred prior to the interruption. Thus the present invention advantageously prevents a restarted distribution from having to start from scratch with a distribution of the first byte of the software package which is what would be required if an interruption occurred before all bytes of one of the predefined increments were successfully distributed. Instead the restarted distribution of the present invention begins at the point of the interruption by distributing portions of the software package that immediately follow the portions of the software package that were distributed prior to the interruption.

The checkpoint is determined in step in response to computing device see determining that an amount of time remaining until the predicted disturbance is insufficient to allow a completion of the software distribution. That is the amount of time remaining until the predicted disturbance is less than the amount of time required to complete the software distribution or less than a sum of the amount of time required to complete the software distribution plus a predefined buffer time. The aforementioned determination of the insufficiency of the amount of time remaining until the predicted disturbance may be included in step or in a step not shown subsequent to step and prior to step . The amount of time required to complete the software distribution is determined by computing device see and is based on the characteristics received in step e.g. the size of the software package being distributed and the number of computing devices receiving the software distribution and input data see received in step e.g. network bandwidth available for the software distribution .

In the case of computing device see being included in a buoy like energy capture and generation device see the checkpoint determination in step uses artificial intelligence to determine which increment of the software distribution is able to complete gracefully prior to the pressure reaching a point at which the buoy like device is programmed to shut down.

In one embodiment the buffer time is determined in step and subtracted from the time predicted in step to generate a target time for completing a distribution of an increment of the software package. Determining the checkpoint so that an increment of the software package completes its distribution before the aforementioned target time increases the probability that the increment is completely distributed prior to a time of an actual occurrence of the environmental disturbance which may vary from the time predicted in step . As the use of artificial intelligence in step improves the prediction of times of subsequent environmental disturbances the buffer time may be updated accordingly e.g. as the predictions in step become more accurate the buffer time is decreased .

As an example in which a buffer time is not considered consider that a software package being distributed to buoy like devices see has 100 more bytes to be distributed starting at time T. For the purposes of this example the 100 bytes remaining to be distributed are numbered 1 through 100 inclusive. The software package has predefined increments where each increment is 20 bytes in size. Each 20 byte increment takes 1 minute to distribute to the buoy like devices. In this example the next disruptive ocean wave is predicted to hit the buoy like devices in 2.3 minutes from time T. Step determines how many increments of the software package can be distributed before the predicted time of the disruptive wave i.e. before time T 2.3 minutes . Because there is enough time to distribute the next two 20 byte increments i.e. bytes 1 through 20 and 21 through 40 before time T 2.3 minutes and because those two 20 byte increments will take 2 minutes to be distributed to the buoy like devices step determines a checkpoint at time T 2 minutes.

As a modification of the preceding example in which the disruptive ocean wave is predicted to hit the buoy like devices at time T 2.3 minutes consider that a buffer time of 0.5 minutes has been predetermined. In this case step determines how many increments can be distributed to the buoy like devices before a time generated by subtracting the buffer time from the predicted time of the disruptive ocean wave i.e. before time T 2.3 minutes 0.5 minutes or time T 1.8 minutes . In this modified example step determines that only one increment i.e. bytes 1 20 can be completely distributed before time T 1.8 minutes and therefore determines a checkpoint at time T 1 minute.

If the environmental disturbance time predicted in step does not provide for a checkpoint to be determined in step that allows enough time to distribute at least one predefined increment of the software package being distributed then system see waits until the environmental disturbance occurs waits for the environmental readings see to return to normal i.e. indicating that the environmental disturbance is no longer occurring and then repeats the checkpointing process of beginning at step with a prediction of a time of the next environmental disturbance.

In step decision and sensitivity analysis tool see sends an interruption request via software distribution interface see to interrupt the software distribution at the checkpoint determined in step . In response to the aforementioned interruption request the software distribution is interrupted at the checkpoint determined in step .

In step monitor see obtains environmental readings see that indicate that the environmental disturbance predicted in step has occurred and has ended. The software distribution control process continues with the steps of .

In step of decision and sensitivity analysis tool see uses the same technique described in step see to determine if another environmental disturbance is predicted starting at a time that precedes the anticipated completion time of the software distribution that was initiated in step see .

If step determines that another environmental disturbance is predicted i.e. the process follows the Yes branch of step then in step decision and sensitivity analysis tool see determines whether there is a sufficient amount of time to gracefully complete the distribution of one or more of the next increments of the software package prior to the time of the next environmental disturbance predicted in step .

If step determines that there is not a sufficient amount of time to distribute one or more of the next increments of the software package gracefully before the next environmental disturbance i.e. the process follows the No branch of step then monitor see obtains environmental readings see that indicate that the environmental disturbance predicted in step has occurred and has ended and the process of repeats starting at step with a prediction of the time of the next environmental disturbance.

If step determines that there is a sufficient amount of time to distribute one or more of the next increments of the software package gracefully before the next environmental disturbance i.e. the process follows the Yes branch of step then in step decision and sensitivity analysis tool see sends a resume request via software distribution interface see to restart the software distribution that was interrupted in step see . In response to the resume request the software distribution is gracefully restarted in step from the point of the interruption so that the distribution does not need to repeat a distribution of any portion of the software package that was distributed during the software distribution that occurred prior to the interruption of step see .

The restart of the software distribution in step is also performed if no environmental disturbance is predicted in step to occur before the anticipated completion time of the software distribution initiated in step see i.e. step follows the No branch of step .

In step the software distribution control process of repeats steps see through step until the software distribution initiated in step see is either completed successfully or terminated manually. In one embodiment the present invention provides software distribution reports describing the status of completed or in process software distributions. The software distribution control process ends at step .

The water pressure exerted on buoy like device see is included in either an operational pressure range i.e. a range in which the buoy like device remains operational or a warning pressure range i.e. a range in which the buoy like device shuts down . The operational and warning pressure ranges are dynamic based on the condition of the ocean wave. The artificial intelligence of the software distribution control process of utilizes the functions in to determine if and when the software distribution and upgrade will stop. Function in is evaluated to determine the anticipated amount of time for the current pressure on the buoy like device to reach the top of the operational pressure range. Function is evaluated in step see to predict the time of an environmental disturbance where the predicted time is prior to the anticipated completion time of the software distribution. Function in is evaluated to determine the amount of time to complete the software distribution to the end of its next increment. Function is evaluated in step see to determine the checkpoint for the software distribution so that the distribution can be interrupted gracefully.

Memory may comprise any known type of data storage media including bulk storage magnetic media optical media random access memory RAM read only memory ROM a data cache a data object etc. Cache memory elements of memory provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Storage unit is for example a magnetic disk drive or an optical disk drive that stores data. Moreover similar to CPU memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a LAN WAN or storage area network SAN not shown .

I O interface comprises any system for exchanging information to or from an external source. I O devices comprise any known type of external device including a display monitor keyboard mouse printer speakers handheld device printer facsimile etc. Bus provides a communication link between each of the components in computing unit and may comprise any type of transmission link including electrical optical wireless etc.

I O interface also allows computing unit to store and retrieve information e.g. program instructions or data from an auxiliary storage device e.g. storage unit . The auxiliary storage device may be a non volatile storage device e.g. a CD ROM drive which receives a CD ROM disk . Computing unit can store and retrieve information from other auxiliary storage devices not shown which can include a direct access storage device DASD e.g. hard disk or floppy diskette a magneto optical disk drive a tape drive or a wireless communication device.

Memory includes program code for the software distribution control process disclosed herein including monitor component decision and sensitivity analysis tool software distribution interface software distribution client data processing engine and systems framework component . Further memory includes an operating system e.g. Linux that runs on CPU and provides control of various components within and or connected to computing unit .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code and for use by or in connection with a computing system or any instruction execution system to provide and facilitate the capabilities of the present invention. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can store the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette RAM ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Any of the components of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to the method of controlling an in process software distribution to computing devices via automatic checkpointing in response to a prediction of an environmental disturbance to which the computing devices are subjected. Thus the present invention discloses a process for supporting computer infrastructure comprising integrating hosting maintaining and deploying computer readable code into a computing system e.g. computing system wherein the code in combination with the computing unit is capable of performing a method of controlling an in process software distribution to computing devices via automatic checkpointing in response to a prediction of an environmental disturbance to which the computing devices are subjected.

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a method of controlling an in process software distribution to computing devices via automatic checkpointing in response to a prediction of an environmental disturbance to which the computing devices are subjected. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The flow diagrams depicted herein are provided by way of example. There may be variations to these diagrams or the steps or operations described herein without departing from the spirit of the invention. For instance in certain cases the steps may be performed in differing order or steps may be added deleted or modified. All of these variations are considered a part of the present invention as recited in the appended claims.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

