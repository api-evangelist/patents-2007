---

title: Programming framework for closed systems
abstract: Mechanisms are disclosed that allow for platform abstraction of a computing platform using a programming framework. The programming framework allows application programs to interact with different platforms in an identical manner by abstracting the platform. The application uses identical instructions to the programming framework across different platforms, with the programming framework modifying the instructions to fit platform specific requirements. The programming framework also emulates platform specific expected application behavior on behalf of the application. The programming framework may also provide an additional layer of security for the platform, limiting the access of the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949998&OS=07949998&RS=07949998
owner: Microsoft Corporation
number: 07949998
owner_city: Redmond
owner_country: US
publication_date: 20070420
---
A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document Copyright 2007 Microsoft Corp.

Developing a software application that performs well on one computing platform is a complicated task but developing an application that performs well on multiple platforms is even more difficult. There are many tasks that must be performed and managed to control the hardware and operating system of a computing platform in order to produce the results desired by the developer and the ways these tasks are accomplished can vary widely between platforms. There are also expectations of application behavior that vary between platforms. For the professional software developer writing code that correctly performs all the tasks required on different platform and creating a new application that conforms to the expected behavior of those platforms is very time consuming and complicated despite having the full support of the platform manufacturer. For the hobbyist student developer or other programmer outside the manufacturer s circle of approved developers this aspect of application development is even more challenging.

This is especially true in closed systems such as game consoles. Game consoles typically allow only signed or authenticated games controlled by the manufacturer to execute on such consoles. This restriction may be done for various reasons including preservation of the business model of maintaining a tightly controlled environment for publishers prevention of intellectual property piracy or controlling the potential for cheating. However there is a burgeoning market of homebrew developers and hobbyists who want to create their own programs for closed systems as well as more open platforms. These developers spend time and effort to hack game consoles in order to allow the running of unsigned code on such consoles. It would be desirable to have a legitimate way for such developers to create their content without having to break into closed systems while still maintaining a level of protection for those systems.

Therefore what is needed is a way to free developers from having to customize their software for different platforms and operating systems. It would simplify their work greatly if developers could write programs using a standard interface to the operating system or programming framework that would allow the program to run on different platforms without customizing the application code to deal with different underlying software or hardware. Such a framework would need to allow developers to interact with the operating systems of various computing devices in the same way letting the programming framework deal with the differences in underlying code and hardware. The interface would also protect the underlying platform by including checks and validations ensuring that the supplied developer code adheres to the limitations and requirements of the platform. This would free the developer to focus their programming efforts on the creative aspects of their program without having to worry about the more tedious tasks of making the program work with different operating systems and hardware.

Mechanisms are provided that allow developer code to access the resources of a computing system through a programming framework that abstracts the underlying platform. By providing a consistent framework across multiple platforms a manufacturer can facilitate third party development of software by making it easier to gain access to operating system resources and hardware. In one aspect of the presently disclosed subject matter a programming framework is provided between a platform s operating system layer and the application software. This framework forms an intermediate layer which communicates on behalf of the application software with various system layers such as a graphics layer an audio layer an input layer and a storage layer. These system layers work with the platform operating system and hardware accomplishing the required tasks on the platform to implement the application software.

The programming framework provides a standard interface to the computing platform allowing developer content to control aspects of the operating system and associated resources. This provides a way to control various platforms using the same application code thus freeing the developer from having to worry about making specific hardware and operating system resources work with their application. The programming framework creates platform abstraction so that the developer code interacts the same way with a single abstracted version of a computing platform regardless of the actual platform on which the code is running. This framework implements the platform specific aspects of instructing the operating system and hardware to perform the tasks necessary to implement the developer application freeing the developer from this task. The framework also provides the appropriate behavior expected by the platform so that the application can successfully run on the platform and adds an additional layer of security between the application code and the platform.

It should be noted that this Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Typically an application running on a computer platform interacts directly with the operating system. Through the operating system the application manipulates the platform hardware and resources as needed to complete tasks. The application will usually use application program interfaces APIs to communicate with individual elements of the operating system to achieve the system level tasks that it requires. Examples of such tasks include rendering of graphical images on a monitor creating audio output on a speaker receiving input from the user through a device e.g. a keyboard mouse or game controller accessing memory and accessing storage devices e.g. a hard disk drive floppy disk drive or flash drive . The APIs and how they are used will vary from platform to platform necessarily as the hardware and operating system varies between platforms. Therefore each application running on a platform has to properly interact with the specific operating system of that platform and its associated APIs if it is to work as intended. Moreover there are behaviors that are expected of applications running on computer platforms. These expected behaviors also vary widely depending on the platform. Failure of an application to operate according to platform expectations can cause the application to fail or perform incorrectly.

On the other hand most application software running on computer platforms will have similar requirements with regards to what it needs and expects from platform resources. That is application software will most often require the use of hardware and software that is typical of most computing platforms such as memory a visual display a controller etc. Therefore it is possible to provide an interface for applications that abstracts the platform such that the application sees the same interface to the platform regardless of the platform while still providing access to the resources required by most applications. By providing such an interface developers are freed from having to concentrate on platform specific aspects of their applications and can create a single program that interacts successfully with multiple platforms.

In one exemplary and non limiting aspect of the present disclosure a programming framework is provided to perform platform abstraction. The programming framework provides an interface to the platform similar to an API for an individual platform resource but the programming framework may be an interface to the entire platform allowing access to several of its resources. Because the application software is working with an abstracted version of a platform the application software performs the same action to accomplish a task through the programming framework regardless of the hardware or software underlying the framework. The programming framework takes a request for a platform resource from the application and transmits that request to the resource modifying and formatting the request so that it is correctly received in the specific way required by the resource thereby ensuring correct execution of the request. Likewise information and requests from the system resources destined for the application software are communicated to the application software through the programming framework.

The programming framework also provides the expected behaviors to the platform on behalf of the application so that the application appears to be well behaved to the platform. This relieves the developer from having to accommodate the differences in expected behaviors of various platforms.

The programming framework provides an additional layer of security for the platform. By providing a standardized interface to the platform the framework controls how communication and requests from the application software reach the platform resources. This provides an additional check against application developer code that may otherwise access restricted platform resources or perform actions that are unsafe or undesirable to the platform or the platform manufacturer. The programming interface also reduces the incentive to hack computing systems especially closed systems such as game consoles by providing an easier more efficient way to access platform resources to the hobbyist or homebrew developer thus removing the need for such hacking.

This section of the presently disclosed subject matter focuses on aspects of a programming framework to provide platform abstraction. The presently disclosed subject matter applies to any computing device wherein it may be desirable to allow software developers to create application software that accesses at least one of the device s resources. In order to gain a better appreciation for this framework it is instructive to look at the prior art.

Each of these layers and helps to provide access to platform resources for an application. They also provide a secure gate between user mode and supervisor e.g. kernel mode that developer code may need to go through to ensure secure computing namely so that developer code does not take over the underlying native OS layer and any associated platform resources for purposes unintended by the platform manufacturer or other interested parties .

The layers and are typically platform operating system or hardware specific. For example the software composing the storage layer for a platform with a 32 GB hard drive will differ from the software used on a platform with a 64 GB hard drive. Likewise one version of a platform operating system may implement the storage layer differently than a previous version. This is necessarily the case because different hardware requires different software to control it. Likewise different versions of the underlying operating system are going to have different software and different methods of accomplishing system tasks.

Typically the layers and are going to be accessed through the application access layer by means of APIs. These APIs will vary as the software composing the layers varies. Therefore the application code has to allow for this and either detect and provide appropriate input to the various APIs that exist on all platforms where it is desired that the application software run properly or be limited to a single platform. While this is understood and handled by professional developers on a regular basis it would be much easier for them to have a common framework with which to work so that they did not have to spend time making sure their code was multi platform compatible. For novice developers and hobbyists multi platform support is an even greater challenge.

Moreover APIs that would be used to access layers and may be very specific and complicated requiring a thorough understanding of their requirements and how they function with the layer. Failure to provide complete and correct data to an API when requesting a task may result in failure of the task or error conditions. The API may also expect certain behaviors from applications in order to function properly. Knowledge of these behaviors may not be readily accessible to non professional developers or those not directly working with or with the approval of the platform manufacturer. Again while this is commonly handled by professional developers dealing with these aspects of software development can be a very daunting task for the novice developer.

In contrast to illustrates a system that utilizes a programming framework to facilitate communication between the developer code and elements of the platform . Platform may be a closed computing device such a gaming console or a more open platform such as a personal computer wherein the computing device is configured to execute operating system software components that implement the programming framework . The layers and in the application access layer are similar in function to those described above for . The programming framework abstracts the APIs used to access the layers and . In an exemplary and non limiting aspect of the present disclosure the programming framework provides a simplified interface to platform resources such as layers and . The term interface used herein contemplates a broad definition of any inputs and outputs that would be typically used by software.

Contrast with where a system is illustrated with platform video card native operating system graphics layer and programming framework . There is an LCD liquid crystal display monitor connected to platform via the video card . Here the same developer code is running on this platform and makes an identical request to the programming framework with the same command as in Display ABC . The programming framework takes this request and formats it properly for graphics layer but in this case since the platform has different resources than platform illustrated in the command requirements of the graphics layer are different than those of graphics layer . Therefore the programming framework issues the command GraphicsAPI printLCD 10 50 60 ABC to the graphics layer . However the application developer code can be completely agnostic to the differences in the underlying platforms and and still achieve the same result with the same command . The graphics layer then works with the operating system layer which controls the video card which in turn instructs the LCD monitor to display the characters.

This example shows how the programming framework provides platform abstraction. In both examples illustrated by and the developer code was able to transmit the same command to the programming frameworks and despite the differences in underlying software and hardware. The developer code was able to interact with the platforms and without having to address the differences between the platforms including different requirements for working with the graphics layer APIs. This ability to abstract the platform away from the developer code greatly simplifies the job of creating multi platform compatible applications. A large amount of the tedious labor required to ensure that code is viable across platforms is removed by the use of a programming framework as described herein.

The programming framework can also provide an added layer of security for the platform. Referring again to if the developer code issued a request to the programming framework for access to resources to which it should not have access or attempted to control or otherwise perform a task that was not permitted or desired by the platform manufacturer the programming framework would serve as an added defense. The programming framework may also simply not make available through its interface commands or program calls that allow such prohibited behavior. While systems within the platform such as the graphics layer or the storage layer typically have built in protection devices the addition of the programming framework serves to further secure those resources. For example if the developer code issued a request to write to a piece of memory that was currently in use as part of the kernel or native operating system software the programming framework would be the first line of defense against such a request. The framework may have a list of restricted memory locations received from the storage layer which it uses to check against memory requests from the developer code . In other cases the programming framework may have a static list of certain commands or functions that are strictly not allowed for developer code such as disk formatting or changing passwords.

An additional less direct security feature of a programming framework is the reduction in incentive to hack into the platform especially with regards to closed systems such as game consoles. If a programming framework such as that described herein is made available to hobbyists and novice developers allowing them to easily create software within the limits provided by the framework then those developers will likely choose to use it instead of hacking into the platform. The programming framework would allow such developers to concentrate their efforts on the creative aspects of developing their software. They would not have to spend time and energy figuring out how to get around the restrictions and required software signing of closed systems. Even in open systems the presence of an accessible and easy to use programming framework will allow developers to more efficiently take advantage of the resources available with the platform and stimulate user development of new software.

As mentioned the presently disclosed subject matter applies to any computing device wherein it may be desirable to allow software developers to create application software that accesses at least one of the device s resources. It should be understood however that other equivalent content to that of application software can work with presently disclosed programming framework and the presently disclosed subject matter can be implemented on computing devices of all kinds not limited to the examples described herein. Accordingly the general purpose computing device described below in is but one example and the present subject matter may be implemented with any client server portable or non portable device whether standalone or having network bus interoperability and interaction. Thus the present subject matter may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as an interface to the network bus such as an object placed in an appliance.

Although not required the present subject matter can partly be implemented via an operating system for use by a developer of services or software for a device or object and or included within application software that operates in connection with the present subject matter. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that the present subject matter may be practiced with other computer system configurations and protocols.

With reference to an exemplary computing device for implementing the aforementioned aspects includes a general purpose computing device in the form of a computer also referred to above as a platform. Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up may be stored in memory . Memory typically also contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example computer could include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and or an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. A hard disk drive is typically connected to the system bus through a non removable memory interface such as an interface and a magnetic disk drive or optical disk drive is typically connected to the system bus by a removable memory interface such as an interface .

In addition to a user being able to provide input to the closed computing device via controllers a user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. In addition to such peripheral devices other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through user input and associated interface s that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics subsystem may also be connected to the system bus . A monitor or other type of display device is also connected to the system bus via an interface such as output interface which may in turn communicate with video memory. In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface .

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer which may in turn have media capabilities different from device . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network examples of which include a local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the network through a network interface or adapter. When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. A modem which may be internal or external may be connected to the system bus via the user input interface of input or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. It will be appreciated by those skilled in the art that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

Referring next to which shows a block diagram illustrating another exemplary non limiting computing device an exemplary multimedia console which may be closed allowing access only to a limited amount of software components that are signed by some signing authority such as the closed device manufacturer or a gaming software publisher. shows the functional components of a multimedia console in which aspects of the presently disclosed subject matter may be implemented. The multimedia console has a central processing unit CPU having a level 1 L1 cache a level 2 L2 cache and a flash ROM Read only Memory . The level 1 cache and level 2 cache temporarily store data and hence reduce the number of memory access cycles thereby improving processing speed and throughput. The flash ROM may store executable code that is loaded during an initial phase of a boot process when the multimedia console is powered on. Alternatively the executable code that is loaded during the initial boot phase may be stored in a FLASH memory device not shown . Further ROM may be located separate from CPU .

This console may have a variety of resources available to it such as a graphics processing unit GPU and a video encoder video codec coder decoder from a video processing pipeline for high speed and high resolution graphics processing. In this setup data is carried from the graphics processing unit to the video encoder video codec via a bus. The video processing pipeline outputs data to an A V audio video port for transmission to a television or other display. A memory controller is connected to the GPU and CPU to facilitate processor access to various types of memory such as but not limited to a RAM Random Access Memory .

The multimedia console includes an I O controller a system management controller an audio processing unit a network interface controller a first USB host controller a second USB controller and a front panel I O subassembly that are preferably implemented on a module . The USB controllers and serve as hosts for peripheral controllers a wireless adapter and an external memory unit e.g. flash memory external CD DVD ROM drive removable media etc. . The network interface and or wireless adapter provide access to a network e.g. the Internet home network etc. and may be any of a wide variety of various wired or wireless interface components including an Ethernet card a modem a Bluetooth module a cable modem and the like.

System memory is provided to store application data that is loaded during the boot process. A media drive is provided and may comprise a DVD CD drive hard drive or other removable media drive etc. The media drive may be internal or external to the multimedia console . Application data may be accessed via the media drive for execution playback etc. by the multimedia console . The media drive is connected to the I O controller via a bus such as a Serial ATA bus or other high speed connection e.g. IEEE 1394 .

The system management controller provides a variety of service functions related to assuring availability of the multimedia console . The audio processing unit and an audio codec form a corresponding audio processing pipeline with high fidelity and stereo processing. Audio data is carried between the audio processing unit and the audio codec via a communication link. The audio processing pipeline outputs data to the A V port for reproduction by an external audio player or device having audio capabilities.

The front panel I O subassembly supports the functionality of the power button and the eject button as well as any LEDs light emitting diodes or other indicators exposed on the outer surface of the multimedia console . A system power supply module provides power to the components of the multimedia console . A fan cools the circuitry within the multimedia console .

The CPU GPU memory controller and various other components within the multimedia console are interconnected via one or more buses including serial and parallel buses a memory bus a peripheral bus and a processor or local bus using any of a variety of bus architectures.

When the multimedia console is powered on or rebooted application data may be loaded from the system memory into memory and or caches and and executed on the CPU . The application may present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . In operation applications and or other media contained within the media drive may be launched or played from the media drive to provide additional functionalities to the multimedia console .

The multimedia console may be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode the multimedia console may allow one or more users to interact with the system watch movies listen to music and the like. However with the integration of broadband connectivity made available through the network interface or the wireless adapter the multimedia console may further be operated as a participant in a larger network community.

The multimedia console depicted in is a typical multimedia console that may be used to execute a multimedia application such as a game. Multimedia applications may be enhanced with system features including for example system settings voice chat networked gaming the capability of interacting with other users over a network e mail a browser application etc. Such system features may enable improved functionality for multimedia console such as players in different locations having the capability to play a common game via the Internet.

Also over time system features may be updated or added to a multimedia application. Rather than requiring the multimedia developer to make significant modifications to the multimedia application to provide these system features the systems and methods described herein allow a multimedia developer to provide system features through separate system applications that work in conjunction with the multimedia application. For example a system application may embody functionality related to networked capabilities thereby enabling a multimedia application to be readily adapted to provide networked capabilities with little work by the multimedia e.g. game developer. One such capability is that of system level notifications for multiple and networked users. Making system level notifications part of a system application as opposed to being handled by individual multimedia applications such as games running on the system takes handling displaying notifications such as game invitations out of the development process for multimedia application developers and allows them to focus on the multimedia application itself.

As mentioned above while exemplary embodiments of the present subject matter have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which developer application software may be loaded and executed. For instance the algorithm s and hardware implementations of the discussed aspects may be applied to the operating system of a computing device provided as a separate object on the device as part of another object as a reusable control as a downloadable object from a server as a middle man between a device or object and the network as a distributed object as hardware in memory a combination of any of the foregoing etc. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed aspects. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and nonvolatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize any software provided in accordance with the these aspects are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the presently disclosed aspects may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer etc. the machine becomes an apparatus for practicing the presently disclosed subject matter. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present subject matter. Additionally any storage techniques used in connection with the present aspects may invariably be a combination of hardware and software.

While the aspects described above have been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function without deviating therefrom. For example one skilled in the art will recognize that the methods as described in the present application may apply to any computing device or environment such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network.

Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Still further functionality of the present subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the presently discussed aspects should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

