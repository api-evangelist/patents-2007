---

title: Data stream filters and plug-ins for storage managers
abstract: A storage manager and related method and computer program product manages client data on a data storage resource and includes the ability to utilize many different types of data stream filters that are neither built into the storage manager nor require a custom programming effort. A storage manager user may readily implement filtering by simply identifying a data stream filter the user wishes the storage manager to use for filtering the user's data. The filter can be an off-the-shelf program that is not part of the storage manager and which does not require client application or storage manager domain knowledge (e.g., knowledge of protocols or data types or formats used by the application or storage manager). The storage manager invokes the identified filter as part of a requested data stream operation and receives a data stream from a data stream source. The data stream is provided to the filter, which filters the data stream. Following filtering, the storage manager receives the data stream from the filter and sends it to a data stream destination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962638&OS=07962638&RS=07962638
owner: International Business Machines Corporation
number: 07962638
owner_city: Armonk
owner_country: US
publication_date: 20070326
---
The present invention relates to storage managers that provide data storage services to software applications. More particularly the invention concerns the provision of filtering functions such as encryption compression and other data conversions as part of storage manager operations.

By way of background a storage manager is a system that acts as an intermediary between a software application such as a backup restore program or a web server and a data storage resource such as a tape drive a disk drive a storage subsystem etc. . The storage manager which could be integrated with the application program or implemented separately therefrom provides an interface that accepts objects for storage and subsequently retrieves the objects upon request. Applications for which a storage manager has been used include the management of backup images of database installations enterprise application data individual workstations web content etc.

There is often a need for a storage manager to filter the data being written to or read from physical storage devices by compressing or encrypting the data. Existing storage managers that provide support for compression and or encryption do so in one of two ways. Most commonly such filtering is provided by algorithms that are embedded in the storage manager product itself. Less commonly such filtering is supported by providing a programming hook that gives a storage manager user the option of writing their own algorithm s . With this option the user is also required to re implement much of the functionality of the storage manager on their own.

Accordingly a need exists for a storage manager filtering technique that overcomes the foregoing disadvantages. What is required is a solution that allows storage manager filters to be easily implemented without having to redesign the storage manager or duplicate its functionality in a custom program. It would be further desirable to provide the capability of implementing new and different filters. At present the most common needs for storage manager filtering are compression and encryption. However it is submitted that the possibilities are broader and it may be advantageous in some circumstances to provide other data conversions such as converting between English and metric units or between different code pages or character sets like ASCII American Standard Code for Information Interchange EBCDIC Extended Binary Coded Decimal Interchange Code and Unicode. By way of example this capability would be useful if backup data was generated by a first system in a first character format e.g. a mainframe computer using EBCDIC character and the data needed to be restored to a second system that used a second character format e.g. a workstation using ASCII character encoding . Another area where storage manager filtering could be used is the generation of audit trails. Such a filter could be used to inspect the data being stored or retrieved and generate audit information for management purposes.

The foregoing problems are solved and an advance in the art is obtained by a method system and computer program product in which a storage manager that manages client data on a data storage resource has the ability to utilize many different types of data stream filters that are neither built into the storage manager nor require a custom programming effort. A storage manager user may readily implement filtering by simply identifying a data stream filter the user wishes the storage manager to use for filtering the user s data. The filter can be an off the shelf program that is not part of the storage manager and which does not require client application or storage manager domain knowledge e.g. knowledge of protocols or data types used by the client application or the storage manager . The storage manager invokes the identified filter as part of a requested data stream operation and receives a data stream from a data stream source. The data stream is provided to the filter which filters the data stream. Following filtering the storage manager receives the data stream from the filter and sends it to a data stream destination.

According to exemplary embodiments disclosed herein the filter identification may be received as one of an attribute of a storage manager transaction request a storage resource an application a host a user a storage object category etc. The filtering may or may not result in a transformation of the data stream. If the filter does transform the data stream it may be implemented as part of a filter pair comprising a write filter that performs a transformation on the data stream and a read filter that may or may not reverse the transformation. Such transformation may include compression decompression filtering encryption decryption filtering character set conversion filtering etc. If the filter does not transform the data stream it may instead be designed to generate information about the data stream such as an audit trail.

The filter may be invoked in its own execution context and the data stream may be exchanged with the filter via an interprocess communication mechanism. This mechanism may comprise a first and second pipes one for providing the data stream to the filter and the other for receiving the filtered data stream from the filter. The filter may be invoked with a filter argument that is passed if the filter is adapted to process the argument or suppressed otherwise. By way of example the filter may be an encryption or decryption filter and the filter argument may pertain to the identification of an encryption key.

In a further aspect the storage manager is adapted to manage client data on a data storage resource with data stream filtering as a service on behalf of a remote client. In order to implement filtering the storage manager receives either a copy of a client selected filter or an identification of such a filter from the remote client or a location specified by the remote client such as a trusted authority.

In a still further aspect a storage manager is adapted to a utilize plug in that is not necessarily a data stream filter. Such a plug in may be a custom program that has domain knowledge of the client application data format or the storage manager such that it is not a true data stream filter.

Turning now to drawing figures wherein like reference numerals indicate like elements in all of the several views illustrates a storage manager that stores and retrieves data generated by a client application . In the data storage mode the storage manager receives a stream of data objects data stream from the application and stores the objects in a data storage resource typically but not necessarily for archival purposes. In the data retrieval mode the storage manager retrieves previously stored objects from the data storage resource and returns them to the application . The storage manager logic may be implemented in software firmware hardware or any combination thereof. The application may represent any software application that desires to have its data placed in the data storage resource . The data storage resource may be implemented as any physical storage device or system including one or more tape drives disk drives storage subsystems etc.

Turning now to and without limiting the scope of the present disclosure a database system represents one possible environment in which the components of could be adapted for use. In the system the storage manager is exemplified by a tape and disk storage manager the application is exemplified by a database backup restore system and the data storage resource is exemplified by a set of tape storage volumes operable in a tape drive system not shown and disk storage volumes . The backup restore system provides data backup and restore services on behalf of a database server whose storage space and logical logs need to be periodically backed up and restored. By way of example only the backup restore system could be implemented in the environment of using a product such as the IBM Informix ON Bar Backup and Restore System. This product provides tape and disk backup and restore services to database servers such as the IBM Informix Dynamic Server IDS which may be used to implement the database server . The database server may communicate backup and restore requests to the backup restore system via an Archive API Application Programming Interface that is part of the Informix product. In response to these requests the backup restore system would invoke the storage manager to implement storage and retrieval operations via a protocol such as XBSA X Open Backup Services API . The storage manager may be implemented with appropriate modifications to support filtering as described herein using a product such as the IBM Informix Storage Manager ISM . The storage manager manages the tape storage volumes and disk storage volumes . The storage manager also maintains inside the disk storage volumes a catalog of backup and restore operations that correlates stored data objects with the corresponding tape storage volumes and disk storage volumes . Among the functions of the storage manager are writing and reading data on the actual tapes and disks keeping track of what data is on which tape or disk and assigning the data to categories.

A data backup operation may be initiated by an administrator of the database server issuing a backup request to the backup restore system . The backup restore system determines what data needs to be backed up and connects to the storage manager . The backup restore system then retrieves the appropriate data from the storage space and logical logs builds a list of backup objects and passes it to the storage manager . The storage manager creates a save set from the data object list and writes the save set comprising one or more data objects to the proper tape storage volumes and or disk storage volumes . The storage manager then enters a record of the save sets and the storage volumes in the catalog . The storage manager uses the catalog to track the save sets and the volumes on which they are backed up.

A data restore operation may be initiated by an administrator of the database server issuing a restore request to the backup restore system . The backup restore system determines what data needs to be restored and connects to the storage manager . The storage manager searches the catalog for the specific restore objects requested by the backup restore system and maps each restore object to its offset in the save set. The backup restore system then retrieves the data from the storage manager and passes it to the database server object by object. The database server writes the data to the proper location s in the storage space and logical logs .

As described by way of background above it is sometimes desirable for a storage manager to filter data being stored in or retrieved from a data storage resource. Conventional storage managers offer limited filtering options such as compression decompression and encryption decryption. As also mentioned such filters are either embedded in the storage manager logic and are thus difficult to modify or update or a complex programming effort is required to create and implement such filters using a programming hook. The storage manager improves upon this situation by providing a mechanism whereby a user can easily and straightforwardly plug in off the shelf compression encryption or other data conversion programs that can be applied to data being written to or read from the data storage resource .

The data storage manager further includes a data stream receiver and a data stream sender as well as a filter writer and a filter reader . A first conventional communication interface is also provided for communicating with the application see e.g. implementing the XBSA protocol and a second conventional communication interface is provided for communicating with the data storage resource see e.g. implementing a storage device specific protocol .

The arrangement of the data stream receiver the data stream sender the filter writer and the filter reader is shown in as is the relationship between the data stream writer and the data stream reader relative to a filter . The operation of the storage manager including the actions of the foregoing components will now be described with additional reference to the flow diagram of . As shown in step of the ability of the storage manager to utilize the filter begins with a user identifying the filter to the storage manager via the filter identification interface . In step of the storage manager stores the filter identification in the filter identification store . Either subsequent to or contemporaneously with the filter identification the storage manager will be requested to perform a data stream operation such as a backup or restore. In step of the filter invocation subsystem consults the filter identification store and then invokes the filter identified therein. In step of the data stream receiver receives a data stream from a data stream source. For some operations e.g. data backup the data stream source will be the application see . For other operations e.g. data restore the data stream source will be the data storage resource see . In step of the data stream receiver passes the incoming data stream to the filter writer . The function of the filter writer is to provide the data stream to the identified filter for filtering. Because the filter runs in a separate execution context or on a separate system the filter writer will use an appropriate inter process communication IPC mechanism such as a pair of pipes P and P see to communicate with the filter. Other IPC mechanisms such as sockets e.g. if the filter runs on a separate data processing system could also be used. In step of the filter reader receives the filtered data stream back from the filter that performed the filtering. It passes the filtered data stream to the data stream sender in step of which sends the data stream to a data stream destination. For some operations e.g. data backup the data stream destination will be the data storage resource see . For other operations e.g. data restore the data stream destination will be the application see .

In many cases the filter program that comprises the filter will not require any awareness of the protocols or data types used by the storage manager or the application hereinafter referred to as domain knowledge but need only read from stdin standard input and write to stdout standard output . Such programs are true filters that are capable of processing raw data streams according to the standard definition of filter that has been well known since the advent of the Unix operating system. The Unix compress and uncompress programs are just two of many examples of off the shelf programs that support this type of operation. Users may also specify a filter that implements other desired data transformations such as encryption and decryption or conversion between different character sets or code pages conversion between English units and metric etc. A non data transforming filter could also be specified such as a filter that performs a task such as auditing. For example such a filter could copy part of a user s data and the current username to a separate log that enables later identification of the users and the data they have accessed. Alternatively such a filter could inspect a data stream being processed by the storage manager and create log information about the transaction. Although many filter programs will be off the shelf software custom filter programs may also be created. Such filter programs may be true data stream filters in the Unix sense or they may be more in the nature of plug ins that require domain knowledge of the storage manager s protocols or the application s data types or formats or can accept or require arguments other than just an input stream. For example some filter programs may be called with arguments. One such argument would be a unique ID for an object being stored or retrieved Object ID . The filter program could choose to ignore this argument or it could use the argument as it sees fit. This capability would be useful for encryption filters because a customer may have a policy that requires data to be encrypted with more than one key. In such a case the object ID can be used to select the key to encrypt write filter or decrypt read filter the object in question. For example modulo n arithmetic could be used to select among n different keys key id object id MOD n . Note that not all encryption filter programs necessarily require such an argument for key selection. For example an encryption filter might hard code a single key that it always uses but this makes securing the filter itself as important as securing encryption keys in general .

Two types of filter programs that may be used for data transformation are write filters and read filters. Write filters are applied to data that the storage manager will write to the data storage resource . The data that a user has asked to be written is passed to the write filter as input then the output of the write filter is written to physical storage. Read filters are applied to data that the storage manager will read from the data storage resource . The data is read from physical storage and passed to the read filter as input then the output of the read filter is returned to the user who requested retrieval of this data.

If desired two filters may be defined as pair a write filter that transforms data in one direction e.g. Unix compress and a read filter that reverses the original transformation e.g. Unix uncompress . An example of such filter pairing is shown in which illustrates a write filter paired with a read filter . Note that a filter which simply passes data through unchanged may also be defined. Thus it would be possible to pair a write filter that transforms EBCDIC data to ASCII with a read filter that performs no transformations. The result would be that source data in EBCDIC would be stored in ASCII and later retrieved in ASCII rather than being converted back to EBCDIC.

As mentioned above in one implementation of the storage manager a filter may be defined as an attribute of a physical storage device e.g. representing part of the data storage resource . This is convenient because in many storage managers the attributes of physical storage devices must be described before they can be used to store and retrieve data. Such attributes may include 1 the path to the device 2 whether it is a disk or tape device and 3 the maximum number of bytes to store in the device. The storage manager may implement two new device attributes namely a read filter and writer filter. These attributes may be specified as flags on a device definition command such as the following 

As mentioned above filter specifications are not limited to the physical device level. They could also be specified at different granularities such as virtual device level application level host level etc. Filters may also be specified for different categories of storage objects such as log files data files etc. Filters may likewise be specified for different users or groups or according to any other categorization scheme. Alternatively if desired filters could be specified as a parameter of a data store or retrieve command each time the storage manager is invoked by the application .

If the storage manager is designed to pass filter arguments such as an id argument for determining an encryption key to an encryption decryption filter a technique may be needed to handle filters that do support this functionality. Ideally a filter would be capable of either using or ignoring this argument. However many off the shelf filters are required to read from stdin and write to stdout and may complain that they do not recognize the argument. One way to solve this problem is to write a very small wrapper script around the off the shelf filter component in order to process the argument. For example this could be done for encryption filters in order to implement key selection based on data object ID. For other off the shelf filter programs such as the Unix compress and uncompress programs one may write a wrapper that ignores arguments and simply passes data to the program. Such wrapper scripts could be made executable and defined as filters to the storage manager rather than defining the corresponding off the shelf filter programs directly to the storage manager.

In the following example a pair of two line wrapper scripts called myCompress which wraps Unix compress and myUncompress which wraps Unix uncompress allow the Unix commands to be used as filters even they do not recognize the arguments that the storage manager may pass. The wrappers simply invoke the Unix filter programs without passing on the argument 

Another approach for handling filter programs that do not handle filter arguments would be to define a flag that indicates to the filter invocation subsystem whether any arguments should be passed to the filters. If disabled for a given filter definition the filter invocation subsystem would not pass any argument to the filter thereby enabling pure off the shelf filters that do not recognize or need the extra argument such as a compress uncompress pair to be used without any wrapper script. Following is an example 

Another approach supports passing an arbitrary string of arguments to each filter . Following is an example 

There are various implementation mechanisms that the filter invocation subsystem may use to call external filters. One such example will now be described that utilizes Unix operating system facilities for creating child processes and redirecting their input and output streams. It should be understood that this example is not intended to limit the scope of the disclosure or the appended claims to any particular implementation but merely to illustrate one way that the storage manager could be designed. Nor is this example intended to limit the scope of the disclosure or the appended claims to the Unix operating system. Other operating systems have similar facilities for making child processes or threads and redirecting their input and output streams. For example Linux is a flavor of Unix that could also use the exemplary implementation below. With porting the same approach could be used in a Windows operating system environment etc.

According to the exemplary implementation a process in a Unix version of the storage manager that has data to write to physical storage can first pass it through a write filter as follows 

In the above implementation the parent storage manager process writes unprocessed data to the input end of in pipe P which the child filter process reads from the output end of in pipe because a filter always reads from stdin which the child has redirected to be the output end of in pipe . The child filter process writes the processed results to the input end of out pipe P because a filter always writes to stdout which the child has redirected to be the input end of out pipe . Finally the parent storage manager process retrieves the processed data from the output end of out pipe and writes it to physical storage.

Read processing can be performed in inverse fashion. Thus a process in a Unix version of the storage manager that has to read data from physical storage can first pass it through a read filter as follows 

In the above implementation the parent storage manager process reads unprocessed data from physical storage and writes it to the input end of in pipe P which the child filter process reads from the output end of in pipe because a filter always reads from stdin which the child has redirected to be the output end of in pipe . The child filter process writes the processed results to the input end of out pipe P because a filter always writes to stdout which the child has redirected to be the input end of out pipe . Finally the parent storage manager process retrieves the processed data from the output end of out pipe.

Turning now to a further exemplary implementation of the storage manager is shown in which the storage manager operates at a server site in order to provide storage manager services on behalf of a remote client via a network . The application and the data storage resource may also be located at the server site . Alternatively those components could be located off premises at other locations. The client could maintain a filter that it provides to the storage manager for use in filtering the client s data e.g. via a filter receiving interface . The storage manager would thus implement a copy of the filter locally at the server site . Alternatively if desired the client could maintain the sole copy of the filter and simply identify it to the storage manager e.g. via the filter identification interface . In that case the storage manager could invoke the filter using a remote procedure call and pass data to the filter across the network preferably using a secure connection e.g. SSL Secure Socket Layer . If the server site had a policy that prohibited the use of untrusted third party filters the client could specify a filter to the storage manager that resides in a repository maintained by a trusted filter authority.

Accordingly a technique has been disclosed that allows a storage manager to implement filters for processing data streams. It will be appreciated that the disclosed technique provides a number of advantages not found in conventional storage managers including the following 

It will be appreciated that the foregoing concepts may be variously embodied in any of a data processing system a machine implemented method and a computer program product in which programming logic is provided by one or more machine useable media for use in controlling a data processing system to perform the required functions. Relative to a data processing system and machine implemented method illustrates an exemplary hardware environment that may be used if the storage manager is implemented as software. The hardware environment includes a CPU or other data processing resource and a main memory that provide a data processing core a graphics card for generating visual output information to a display monitor a peripheral storage device other peripheral devices and a bus infrastructure interconnecting the foregoing elements. The storage manager may be loaded in the main memory . The application see could also be loaded in the memory if it runs on the same hardware platform. The storage device may be used as persistent storage for the filter identification store . A copy of the filter information could also be maintained in the memory . Other data sources may be accessed through I O Input Output resources provided by the peripheral devices which may include a USB bus controller a SCSI disk controller and a network interface card. The monitor may be used to present administrative information.

Relative to a computer program product having a machine readable media and programming logic exemplary data storage media for storing the programming logic are shown by reference numeral in . The media are shown as being portable optical storage disks of the type that are conventionally used for commercial software sales such as compact disk read only memory CD ROM disks compact disk read write CD R W disks and digital versatile disks DVDs . Such media can store the programming logic of the invention either alone or in conjunction with another software product that incorporates the required functionality. The programming logic could also be provided by portable magnetic media such as floppy disks flash memory sticks etc. or magnetic media combined with drive systems e.g. disk drives or media incorporated in data processing platforms such as random access memory RAM read only memory ROM or other semiconductor or solid state memory. More broadly the media could comprise any electronic magnetic optical electromagnetic infrared semiconductor system or apparatus or device transmission or propagation medium such as a network or signal or other entity that can contain store communicate propagate or transport the programming logic for use by or in connection with a data processing system computer or other instruction execution system apparatus or device.

While various embodiments of the invention have been described it should be apparent that many variations and alternative embodiments could be implemented in accordance with the invention. It is understood therefore that the invention is not to be in any way limited except in accordance with the spirit of the appended claims and their equivalents.

