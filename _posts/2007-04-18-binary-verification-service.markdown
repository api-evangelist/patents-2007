---

title: Binary verification service
abstract: A binary is received at a binary verification service from a binary verification client agent. The binary verification service performs binary verification of the binary, wherein binary verification includes determining whether the binary is complicit with a set of usage rules. The binary verification service sends a binary verification result to the binary verification client agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08074205&OS=08074205&RS=08074205
owner: Microsoft Corporation
number: 08074205
owner_city: Redmond
owner_country: US
publication_date: 20070418
---
Software quality is of paramount importance especially in the context of security and reliability. There are tools that may be run on source code as part of the development process that check for a variety of common bugs or vulnerabilities as well as verify the source code s compliance with certain rules. Source code may also be tested to ensure that the source code does not have serious security problems such as buffer overflow. However in any software system or product the content that s actually shipped to the customer is the raw bits referred to as a binary of different executables that comprise the product. Today s systems for providing binary verification are inadequate.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the invention are directed to a binary verification service. The binary verification service may determine whether a binary follows one or more sets of usage rules and score the binary accordingly. In one example scenario the binary verification service may check the quality of a binary before installation on a system. In another example scenario a programmer may use the binary verification service as part of software development of a product.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth the functions of the examples and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

Client includes a binary verification client agent for communicating with a binary verification service on server . Client agent may be used to verify a binary for a user at client . For example a user downloads a device driver for installation on client . However before installing the device driver on client the user may use client agent to verify the device driver binary. In this way the user can test whether the device driver is complicit with usage rules for the client operating system before installing the device driver and possibly crippling client with a poorly written driver.

As used herein a binary refers to executable machine code. As used herein binary verification refers to analyzing a binary to determine whether the binary is complicit with a set of usage rules. The usage rules define programming techniques that should be followed in order to minimize any disruption the binary may cause to the environment the binary is executed in. In other words the usage rules define proper interaction between the binary and the binary s operating environment such as an operating system. For example a device driver binary may be checked to ensure that the device driver binary conforms to Device Driver Interface rules e.g. a Microsoft Windows Driver Development Kit DDK etc. . The binary verification may validate behavior of a device driver binary and find defects in the binary s usage of kernel APIs. In another example a user mode binary may be verified against Applicant Programming Interface API rules e.g. Microsoft Win32 API . API usage rules may address a variety of areas including locking properties interrupt request calls plug and play power management and the like. Example usage rules verify the ranges of parameters to an API call verify the calling of APIs in a particular order and the like.

In system server includes binary verification service . While only one server is shown it will be appreciated that binary verification service may be supported by two or more servers. Binary verification service may receive a binary verification request to perform binary verification of a binary from client agent . Binary verification service returns binary verification result for the requested binary to client agent . Binary verification result may include a verification score for the binary e.g. a grade of A to F a scaled score of 1 to 10 etc. that indicate how complicit the binary is with a set of usage rules. In one embodiment the binary verification does not have to be sound or complete i.e. the verification may find some false positives or may miss some usage rule violations .

Client agent may then present the verification result to a user at client . The user may use the verification result to determine if the binary is to be installed and or executed. In another instance the user may include a programmer who uses verification result for developing a software program.

Turning to an embodiment of binary verification service is shown. Service may include a binary identification ID tool a binary verification engine and a binary verification service database . In one embodiment service may be implemented as computer readable instructions executable by one or more servers .

A binary verification request is received at service . Request may include binary identification information to uniquely identify a binary. For example a driver binary may be digitally signed and have a unique identification for the driver and the driver s version.

When binary ID information is received at service binary ID tool may search database to determine if the binary has already been verified. If the binary has been previously verified then the binary verification result for the binary is sent to the requesting client agent. If the binary has not been previously verified then service may request a copy of the binary from the client agent. Alternatively the original binary verification request may include the binary ID information as well as the binary itself.

Binary verification engine checks the binary against a set of usage rules . Service may perform static verification verify the binary without executing the binary and or dynamic verification instrument the binary and then examine the binary while the binary is executing . Binary verification engine may include two or more sets of usage rules . The appropriate set s of usage rules may be applied to a binary as appropriate for the binary. For example a device driver binary for Microsoft Windows Vista may be tested with a different set of usage rules than an application plug in for a browser such as Microsoft Internet Explorer. Binary verification engine may include binary verification engines such as Microsoft Error Detection via Scalable Program Analysis ESP and Microsoft Static Driver Verifier SDV which uses the SLAM analysis engine .

After verification by the binary verification engine the verification result may be saved in service database . In this way if verification of the binary is requested again service may provide verification results from service database instead of having to re verify the same binary. The binary itself may also be saved in service database along with the binary s verification result.

Service sends binary verification result to the requesting client agent. In one embodiment the verification result may include a graded scale indicating how closely the binary followed the usage rules. For example the binary may be rated a grade of A follows nearly all rules to F follows almost no rules or a scale of 10 follows nearly all rules to 1 follows almost no rules or the like. In another embodiment the verification result may indicate that the results for one or more usage rules these individual results may include pass fail or inconclusive for each usage rule. In yet another embodiment the verification result may indicate which set s of usage rules were used to test the binary.

Service may also receive a usage rules update . Usage rules update may include a revision to an existing usage rule or a new usage rule. In one embodiment one or more binaries stored in service database may be re verified in response to a usage rules update received at service discussed further below .

Turning to a flowchart shows the logic and operations of binary verification in accordance with an embodiment of the invention. In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting in block a client agent examines one or more binaries for verification. The client agent may gather binary identification information about a binary that uniquely identifies the binary. A binary may also have an electronic signature that indicates that the binary has already been verified and or the verification result. In one embodiment the client agent examines a binary in response to a user input. For example a user downloads a new device driver for client . The user may be presented with a command box by client agent offering to verify the new device driver before installation of the new device driver. In another example a user may request that client agent automatically verify new binaries and or periodically check for verification updates to previously verified binaries.

Next in decision block the logic determines if verification information is included in the binary such as in an electronic signature. If the answer to decision block is yes then the logic proceeds to block to present the verification result included in the binary itself to the user. The user may also be presented with the option to re verify the binary with service . In this way the user may feel confident that the binary has been verified with the latest usage rules.

If the answer to decision block is no then the logic proceeds to block . In block the client agent sends the binary identification information gathered previously to a binary verification service.

Continuing to block the binary verification service uses the binary identification information to look up the binary in a service database. It will be appreciated that the service database may include several databases at one physical location and or several databases at different physical locations but interconnected such as by a network.

Next in decision block the logic determines if a binary verification result for the binary is stored in the service database. If the answer to decision block is yes then the logic proceeds to block .

In block the binary verification service returns the verification result for the binary to the client agent. Next in block the client agent presents the verification result to the user. In one example the user may use the verification result to determine whether to install a new device driver on their system.

If the answer to decision block is no then the logic proceeds to block . In block the service requests a copy of the binary from the client agent. Proceeding to block the client sends the binary for verification to the service. Next in block the service verifies the binary.

Proceeding to block the service stores the verification result in the service database. This way when the service is requested to verify the same binary again from the current client agent or another client agent then the service may refer to the saved verification result instead of having to re verify the same binary. In one embodiment a copy of the binary itself may also be stored in the service database. As discussed further below a binary stored at the service may be re verified after the binary verification usage rules at the service have been updated.

Continuing to block the service returns the verification result to the client agent. Next in block the verification result is presented to the user by the client agent.

Turning to a flowchart shows the logic and operations of binary verification during software development using a binary verification service in accordance with an embodiment of the invention. In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting in block a user develops source code. The user may include a programmer software developer a vendor or the like. Next in block the user compiles the source code and sends the resulting binary to a binary verification service using a binary verification client agent. Continuing to block the service performs binary verification on the binary. The service then sends the binary verification result back to the user as shown in block .

The logic proceeds to decision block where the determination is made whether the binary is ready for release based at least in part on the received verification result. If the answer to decision block is no then the logic proceeds to block where the user makes updates to the source code to attempt to get the code to comply with more of the usage rules and thus improve the verification result. After block the logic returns to block where the user sends a binary corresponding to the updated source code to the service.

If the answer to decision block is yes then the logic proceeds to block . In block the binary may be certified with the received binary verification result. The binary may be electronically signed indicating that the binary has been verified by the service. At least a portion of the verification result may also be included with the binary so the verification result may be reviewed by users before installing and or executing the binary.

Turning to a flowchart shows the logic and operations of updating usage rules of a binary verification service in accordance with an embodiment of the invention. In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting in block a new usage rule is received at a binary verification service. A new rule may include a revision to an existing usage rule at the service. Proceeding to block the new usage rule is validated. The new usage rule may be validated by the platform provider e.g. validated by the Microsoft Corporation in the case of Microsoft Windows . The new usage rule may also be validated by a computing community discussion forum such as on a web discussion board standards board or other group.

Next in block if the new usage rule is validated then the binary verification service is updated with the new usage rule. In one instance the new usage rule is added to one or more set of usage rules as appropriate. For example a new usage rule pertinent to device drives is added to one or more sets of usage rules used to verify device drivers.

Proceeding to block binary verification is performed on at least a portion of the binaries stored in the service database using the new usage rule. Continuing to block the verification results of the binaries stored at the service are updated as a result of the new usage rule.

Proceeding to block one or more users are notified by the service of new verification results to their binaries. In the case of a software developer the updated verification result may be used to re code a product e.g. a device driver re verify and re certify the product. The software developer may then make customers aware of the updated product. In another example updated verification results may be pushed to users such as through Microsoft Windows Update to automatically alert users about new verification results. This may improve the reliability and stability of client systems and thus improve the user experience.

Embodiments of the invention provide a binary verification service. Performing binary verification on client machines is impractical due to the complexity and computational intensity of binary verification. Also in client binary verification end users are burdened with downloading updated usage rules to the client. A binary verification service provides a centralized location for end users as well as software developers to verify a binary against the latest usage rules. A binary verification service also allows a platform vendor to ensure quality and robustness of the platform in the presence of various applications developed by independent vendors running on its platform.

Although not required embodiments of the invention are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

In the description and claims the term coupled and its derivatives may be used. Coupled may mean that two or more elements are in contact physically electrically magnetically optically etc. . Coupled may also mean two or more elements are not in contact with each other but still cooperate or interact with each other for example communicatively coupled .

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

