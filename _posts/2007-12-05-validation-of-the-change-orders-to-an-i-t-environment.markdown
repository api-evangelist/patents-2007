---

title: Validation of the change orders to an I T environment
abstract: A change order to be executed at a scheduled time as part of a change plan is created, wherein the change order to define a change to an Information Technology (IT) environment. The change order is validated against validation rules to simulate execution of the change order at the scheduled time wherein other change orders scheduled to execute before the execution of the change order are included in the simulation. Breaks in change orders scheduled to execute after the change order are detected. Side effects caused by execution of the change order are determined. The results of validating the change order are output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08276152&OS=08276152&RS=08276152
owner: Microsoft Corporation
number: 08276152
owner_city: Redmond
owner_country: US
publication_date: 20071205
---
Whenever many people are focused on different aspects of an interconnected system to maintain order one needs processes and policies. In Information Technology IT management an Information Technology Infrastructure Library ITIL is an accepted group of best practices for information services management. The IT Service management disciplines include Change management Incident and Problem Management and Asset Management.

Change Management is the discipline of introducing changes to an IT environment e.g. an organization s enterprise in a planned and controlled manner. This involves human workflows for initiating reviewing approving and authorizing the changes scheduling them notifying effected parties enacting the changes and keeping record of the changes. It also involves periodically auditing the IT environment to make sure that the records indeed reflect reality.

Today most automation to help and coordinate IT work in Change Management is around the workflows that deal with change orders in the text form that define changes. Humans manually perform activities associated with change orders such as analysis design planning business decision making scheduling and negotiation. Further change orders are managed using different IT managements tools that refer to information about the IT environment which might not be up to date or even available.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the invention are directed to process aware change management. Changes to an IT environment may be created and scheduled. A sequence of one or more changes may be put together to form a change plan. The plan may be validated against IT rules and policies. Revisions to intermediate changes in the plan may cause re validation of the plan to determine if the revision results in change breaks downstream of the revised change. Also side effects of executing a change may be determined.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth the functions of the examples and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

Embodiments of the invention are directed to process aware change management. Process aware change management provides users e.g. system administrators automated help guidance and analysis to make the right planning decisions while protecting them from making decisions that violate policies and procedures or inadvertently affect another system adversely. Aspects of process aware change management include constructing a change plan analyzing changes to the plan and detecting side effects of executing the plan. Change management includes managing the life cycle of change orders from authoring to application to the Configuration Management Database CMDB when the corresponding configuration activity completes in the real world.

CONSTRUCTING A CHANGE PLAN Individuals from business and IT can put together a change plan for modifying an IT environment e.g. an enterprise . The execution of the plan involves one or more changes to the IT environment e.g. deploy a new service deploy new database update software change access control lists etc. . Embodiments of process aware change management provide integrated change planning simulations and validation.

As issues in the plans are detected solutions are put forth by making adjustments in Service Level Agreements SLAs costs process or IT infrastructure. Sometimes multiple alternative change plans are considered. At the end of the process a change plan may be scheduled that is mutually agreeable between service architecture resources policies metrics support processes and SLAs.

CHANGE OF PLANS While a new change is being designed or pending deployment the state of the IT environment may change. Ignoring those changes may result in failure during execution of the change e.g. deployment of a new service . Process aware change management provides automation to constantly keep the state of the IT environment up to date and to constantly re validate existing change plans.

Embodiments of the invention provide mechanisms to detect breakdowns of change plans and automation to correct for it and validate the correction. For example in some cases only certain sequences of changes are valid. Assume that a bunch of these valid branching sequences are in various stages of proposals reviews and approvals each leading to a different parallel universe. A new change could be appended to the end of a branch and to pass validation it might require versioning a change that executes before the new change. Or a new change could be inserted in the middle of a branching sequence and then downstream changes need to be revalidated and versioned if necessary to remain valid.

DISCOVERY OF SIDE EFFECTS When a change is enacted it can impact many individuals business processes and services because they share resources or processes. Process aware change management provides automation to schedule a change in such a way that the impact is minimized and the remaining impacted users notified to make sure that there are no surprises.

Before approving a change decision makers need to answer questions such as Does the change require a reboot Where How long does it take Does it require availability of an operator on site Does it require any interaction with an end user Does it temporarily violate any policies Does it require a lot of network I O What monitoring alerts should be suppressed to eliminate noise Embodiments of the invention provide ways to pre compute this impact on the IT environment.

Embodiments of the invention may include analysis across multiple tools simulated time travel and change notification spam control.

ANALYSIS ACROSS MULTIPLE TOOLS Embodiments of the invention provide a way to extract the change order information in a standardized document e.g. an XML document that can then be consumed by multiple tools and systems. When a certain change is contemplated it can have an impact on many areas business process contracts licensing performance SLAs availability power and cooling project schedules costs policy compliance development etc. However the deeper context knowledge and expertise required to do each analysis resides with different people and tools. In fact some tools might be third party. Embodiments herein allow different tools to subscribe to the process aware management system and provide validation of change orders.

TIME TRAVEL AND PARALLEL UNIVERSES Embodiments of the invention provide a way to extract the change information from a specific point in time in the past or future assuming a certain set of changes are made. At any given time multiple teams could be working on issues surrounding the same service. However people working on a problem analysis might be looking at a historic point in time people working on Plan A might be looking at a future point in time while other planners might be working on a Plan B which assumes another future while a help desk operator might be looking at the current point in time. Embodiments of the invention provide a single place to coordinate the activity and proposed changes of multiple teams.

Also a change manager might be working on a future change based on how the system ought to be at that time while a configuration manager might be studying why the scanned snapshot of the real world is not as it ought to be today. Embodiments herein allow a user to view snapshots of the state of the IT environment based on simulation of scheduled change orders against a model of the IT environment. In one embodiment the model includes a CMDB sandbox discussed below.

NOTIFICATION SPAM CONTROL Embodiments of the invention identify the users impacted by a change and send only notifications to those people. Also the notifications include information meaningful to a user e.g. Service A will be offline Saturday from 9 10 pm instead of cryptic messages that fail to convey meaningful information e.g. Server A will be offline Saturday from 9 10 pm when the user has no idea what services are hosted by Server A . Currently in IT users are overwhelmed and desensitized by broadcast notifications.

Environment includes a process aware change management system . System includes a user interface UI to allow users to interact with system . System also includes a validation module for determining if a proposed change is valid a break detection module for determining if any downstream changes break e.g. have errors when a new change is added to a change plan or an existing change modified and a side effects module for determining any side effects that may occur when a change is executed. UI and modules and may be interconnected by interfaces not shown .

Process aware change management system is connected to service manager . Service manager provides information about services in an organization s IT environment. Service manager views the IT environment from a service point of view and not just the states of various machines e.g. server A is down server B is rebooting etc . Service manager is connected to Configuration Management Database CMDB which stores information some in the form of objects related to an organization s computing assets and the relationships between them. In one embodiment service manager includes a Microsoft System Center Service Manager. Objects in CMDB may represent machines users jobs services etc.

CMDB is also connected to configuration manager and operations manager . Configuration manager handles asset deployment hardware and or software and updating. Configuration manager may also provide configuration monitoring to ensure systems comply with desired configuration models and policies. Configuration manager may also generate reports showing what operating systems applications and software updates are installed on an organization s machines. In one embodiment configuration manager includes a Microsoft System Center Configuration Manager. Operations manager provides monitoring and management of an organization s IT environment such as error handling and reporting services. In one embodiment operations manager includes a Microsoft System Center Operations Manager.

Process aware change management system works with CMDB . Process aware change management system adds to the models in the CMDB brought in by service management by bringing in other process business relevant objects e.g. business processes services people locations organizations policies licenses contracts projects schedules SLAs etc. System may also add new types of relationships between these objects like zone e.g. member ownership governs e.g. governed by peers uses e.g. used by layering e.g. layered over layered under etc.

Process aware change management system also brings in a different category of objects like Work Items WIs Workflows and Activities. Work items are objects like calls incidents problems service or change requests that need to be assigned to people and tracked. They change state under specific life cycle constraints. The constraints are work item type specific and control allowed transitions and state change constraints and privileges. A work item declares its context by referring to configuration items in CMDB . For instance an incident WI can express that user A is complaining that SLA B is being violated on Service C.

The data access layer to the CMDB provides object relational methods for querying or navigating relationships. All access is controlled via a scope and role based security. In one embodiment CMDB is based on the Service Modeling Language SML repository and uses the Common Model Library CML .

In one embodiment CMDB has information divided into two main categories isness e.g. actual state today and oughtness e.g. possible future state s . Isness is maintained by the scanning actions of operations manager and configuration manager . Oughtness including proposals approved pending changes etc. is maintained by the process aware management system by applying change orders to models of the CMDB data referred to as CMDB sandboxes . Thus process aware management system is both a consumer and maintainer of CMDB information.

Process aware change management system may also connect to tools . Tools include multi vendor design analysis and validation tools. Context extracted from the CMDB will be provided as standard SML documents. It will be up to the tool vendor or integrator to consume those documents. For example the validation of a new change could include a spreadsheet calculation for power budget a Microsoft System Center Capacity Planner SCCP performance and scale check a Microsoft Office Project Server portfolio decision and a configuration manager policy check.

In one embodiment tools have an API to be able to execute some of the simpler analysis programmatically this will allow substitution of manual steps in the work flow with automation. Since the underlying tool is identical the results will be consistent.

CMDB SANDBOXES CMDB is a vast interconnected object store. For most change plans one only needs to look at a certain aspects of the model. Process aware change management system includes built in functions to navigate a directed graph of objects in the CMDB both technical and business process objects and select the subset of the graph that is relevant to a particular workflow i.e. plan and extract that.

A standard workflow activity will enable the workflow to take a snapshot view of a certain part of the CMDB at a certain point in time in the past or the future and export it into an SML document which can be used by tools of any type. It can select objects and relationships only of certain types and scope eliminating clutter.

Referring to alternate change plans Plan A and Plan B can be applied to an initial view . Initial view may be the current oughtness view i.e. state of the IT environment or may be a view of the IT environment in the future. Plan A applies a sequence of changes and in that order to initial view to arrive at Final view Plan A . Plan B applies a sequence of changes and in that order to initial view to arrive at Final view Plan B . Thus alternate universes in the future can be maintained by system . To maintain alternative plans a temporary CMDB sandbox is established for each plan. In one embodiment CMDB sandboxes may extract and manipulate data from CMDB and may be stored memory. In some cases a series of simulations may be executed on the sandbox CMDBs. Example simulations include change break detection and side effect detection both discussed below .

CHANGE ORDERS Change orders are used for managing and bookkeeping changes. Typically a single change order is associated with each change. As shown in change management system receives a change order . A change order may include three parts a change workflow a change update query and a change process temporary impact query.

In one embodiment a change workflow includes machine readable instructions to enact the change. It will typically be a structured workflow including manual e.g. human puts new server in cabinet and or automated activities e.g. install software on new server that when completed will accomplish the change in the real world.

In one embodiment a change update query includes a query or a set of queries that when applied to a model e.g. CMDB sandbox of the IT environment will update all objects and relationships to a state as you would find them after successfully applying the change in the real world. For example in Final view Plan A was created by applying the change update queries associated with changes and in that sequence to initial view .

In one embodiment a change process temporary impact query includes a query that will result in all causes that will temporarily become true while enacting the change. This information is used to determine side effects created when the change is executed using causality rules.

CHANGE ORDER TEMPLATES Change orders are complex objects that need authoring. A change order template may be filled in to generate change order . Templates are pre authored so users only need to provide parameters by filling out a form to create a new change order. For example a template may be defined to create a change order to apply a software patch to all machines in a group. The parameters to be supplied to the template include a patch number and a computer group name to create a change order. Thus the user supplies the context to the change order template to create a change order. In one embodiment a user may use UI to fill in a template e.g. fill in a text form drag drop objects in a view of the IT environment etc. 

Turning to a flowchart shows operations of a process aware change management system in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting with operation a change order is received at the process aware change management system. In one embodiment the change order is received from a user interacting with UI . In one embodiment the change order includes an XML document that defines the change.

Next in operation the change order is validated against validation rules such as in tools to determine if the change order provides the desired changes. Simulated execution of the change order at the scheduled time is made. In one embodiment the simulated execution of the change order is examined by various tools available to change management system . In one embodiment after validation the user is shown errors in UI associated with executing the proposed change at the scheduled time. The user may use this error information to modify the change and then re validate the change.

Continuing in operation the logic detects breaks in already scheduled changes that depend on the new change i.e. downstream changes . Next in operation the logic determines side effects of executing the proposed change at the proposed future time. In operation results of the validation change break detection and or side effects determination are output. The results may be displayed in UI saved to a file and the like.

Impact of a change plan is studied by many people in an organization using appropriate tools. Change orders that make up the plan are validated against various IT environment restraints. A tool specific to a discipline will use a CMDB model typically created by applying a proposed change order to the model and apply evaluation techniques to help analyze it.

Examples of analysis tools for evaluating the validity of a change include a power budget analysis tool a performance check tool a portfolio decision tool a policy check tool and a best practices analysis tool.

Racks have power and cooling budgets. To evaluate a change that reconfigures the make up of installed computing devices e.g. blades a spreadsheet is automatically created from the CMDB view data and compared against a power budget. Power usage is picked up from information in the CMDB model for the machine.

Performance models may be applied to the configuration produced by the change order to evaluate resource utilization and response times as compared against SLA expectations.

In portfolio decision analysis evaluations are made as to the business costs associated with implementing a change order e.g. adding or removing a service . For example a decision to bring payroll business processes into a company as opposed to outsourcing is generated by finding out all the systems and services supporting the payroll functions and determining licensing and support overhead costs.

Policy checking evaluates the change order against policies associated with objects involved in the change. For example a tool compares objects in the resulting view from the change against policy objects to determine if any of the policies are violated. For example a policy may require all Web services available to the public remain in a particular zone of the enterprise network. The best practices tool analysis tools validates a change against best practice rules such as promulgated by ITIL.

Turning to an example of creating a change and validating the change using the process aware management system in accordance with embodiments of the invention are shown. In this example a bank will be making changes to its current IT environment. show interactions with a user interface for process aware change management system however embodiments of the invention are not limited to the user interface operations as described below.

In a user e.g. system administrator enterprise architect etc. wishes to create a new service for the bank s network Globalbank . At the user selects a scope of view for the IT environment. For system management purposes Globalbank is divided into ProductionCMDB and TestCMDB. ProductionCMDB is further divided into an Eastcoast Datacenter and a Westcoast Datacenter. The user has selected the Eastcoast Datacenter as the view for creating the new service.

In one embodiment the view is made from a system management point of view. In the Eastcoast Datacenter is the chosen scope of view.

Timeline also shows previously executed and scheduled change orders. For example previously executed change orders and are shown on timeline a change order is scheduled for the future.

User interface also allows the user to select from multiple timelines as shown at . shows the Plan of Record which is the change plan that will occur as scheduled. The user may also use a pull down to select saved alternate plans Plan A Plan B etc. . These alternate plans are associated with the CMDB sandboxes and allow a user to validate modify re validate and discover side effects of other change order plans in order to investigate alternative change order sequences. A user may use these alternative plans to test other change order plans e.g. validation detect change breaks determine side effects without disrupting the current Plan of Record.

Section is used for creating new change orders. The user may drag and drop objects e.g. machines applications etc. into view and assign the creation of the new objects to a change order. For example at the user may select an application accounting call center etc. or a machine servers clients etc. and place the object in the Eastcoast Datacenter view .

In the user creates an empty changer order in timeline . Change order is empty until the user assigns various activities to change order . Change order is to be executed at the point of time designated in timeline . As described below empty change order is filled using dragging dropping of objects from section but alternative techniques such as filling in a form may be used to fill change order .

In the user moves slider to the point in time in the future of execution of change order . When moved forward in time slider passed change order so change order was executed in view for purposes of the modeling in . To create the simulation of view in the future change order was applied to a CMDB model of the IT environment.

Change order created a PII Zone shown at in the DataZone. Datazone is a zone of SQL database servers. The SQL database servers are protected using backups Access Control Lists ACLs physical building security etc. PII Zone is a new zone to hold bank customer s personal information such as name address account numbers etc.

In the user is dragging dropping objects from section to fill the empty change request with various activities. In the user is adding an OnlineBankingWeb application to Cluster of the DMZ as shown at . In the user is adding an AccountsDatabase to DatabaseServer in the Datazone as shown at . It will be discovered during validation discussed below that placing an AccountsDatabase having customer personal data outside of the PII Zone is a violation of policy.

In the user selects Validate Diagram from menu to validate proposed change order . In one embodiment various tools may subscribe to validation and are called when Validate Diagram is selected. The subscribed tools will apply their rules to the change order and provide any errors to the user via user interface . Thus user interface provides a single place for change orders to be validated against multiple tools and for a user to view the validation results.

Embodiments herein consider change orders that are already scheduled for the future when adding a new change order to a change order plan. Process aware change management system models the state of the view in the future based on scheduled change orders. It will be appreciated that at real time when the user creates change order PII Zone does not yet exist. It is only when the user moves slider forward in time past change order that creates PII Zone that PII Zone appears in view . As the user moves slider forward change aware system applies the change orders in timeline to view .

Embodiments herein may also be used for past time travel. Slider may be moved to the past to show the state of view in the past. In one instance this may be used in an audit situation to prove changes were made in compliance with various requirements e.g. ITIL practices corporate requirements governmental requirements etc. .

Turning to a flowchart shows operations of change validation in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices. In one embodiment validation module may perform at least a portion of the operations of flowchart .

Starting in operation change order information is extracted from the change order and applied to the CMDB model of the IT environment. This is a simulated execution of the change order at the scheduled time of execution of the change order. Next in operation the state of objects and relationships after the simulated execution of the change order are provided to any subscribed tools . Continuing to operation results from tools associated with validation are received. Next in operation the results of the validation are output such as displayed in UI sent to a file etc.

When a change is inserted or revised embodiments herein re validate the plan s having the revised change to detect breaks in downstream changes from the revised change. Following dependencies between change order work items that are also stored in CMDB change management system returns all changes change orders having status of In Process or Approved that depend on the revised inserted change. Every new change order that is created is made assuming that a change plan is executed. Thus each change order declares an immediate dependency on a previous change order. The detection is done by running a set of validation tools on a sandbox CMDB corresponding to the downstream change orders from the new versioned view. In one embodiment the re validation is performed automatically when a change is modified. In another embodiment the re validation is performed on all plans e.g. Plan A B C having the modified or inserted change.

An example of detecting breaks caused by reversioned changes is shown in . shows an initial view of the IT environment. Initial view is modified via three branches Plans A B and C . The Plan A branch includes changes and that depend on each other in a sequence and results in Final view Plan A at . The Plan B branch includes changes and that depend on each other in a sequence and results in Final view Plan B at . The Plan C branch includes changes and that depend on each other and results in Final view Plan C at .

A user makes revisions to change from a version 1 V1 to a version 2 V2 . The revisions to change causes process aware change management system to automatically re validate all the changes in the three branches downstream of change . The re validation finds that plans A and B are broken because of the versioning change of change . For example version 2 of change may cause a server to be uninstalled. However change requires the use of this server to execute its change. Thus Plan A has an error condition. The user is alerted of the errors to Plans A and B and that the modification to change caused the errors. The user may then make additional revisions e.g. revise change revise changes upstream of change etc. to correct the errors. When a change break is detected a tree structure similarly as shown in may be presented in UI for displaying where the break occurred in the multiple change plans.

Referring to an example of detecting breaks in downstream changes is shown. This example continues the banking example as discussed in conjunction with . In this example GlobalBank has merged with another bank.

In users associated with the merged bank are shown at and includes 2820 employees 2.0 million banking customers and 450 partners. Timeline shows previously executed change orders and as well as future scheduled change orders and . The user is currently creating new change order in response to the bank merger. It will be noted that on timeline change order is being scheduled in between pre existing changer orders and .

In the user selects the status of new change order to In Progress. For In Progress status the change order will not execute in real time at its currently scheduled time until the status is change to Approved but the In Progress change is considered for simulation purposes such as validation and change break detection. Change order is shown in italics on timeline to indicate that change order will not execute at the scheduled real time unless its status is changed. The other menu options include Approved the change order will execute as scheduled and Rejected the change order will not be executed but is retained for planning purposes its status may be revised later .

In slider is moved forward and the scheduled change orders and get absorbed into the model. The changes to the view at the future time are shown in . In the DMZ an OnlineBankingService was added to Cluster and a NotificationService was added to Cluster . In the Application Zone a ProcessingWebService was added to WebServer and CallCenterApp was added to ApplServer. In the Data Zone an AccountsDB was added to the PII Zone. Since change order has an In Progress status the objects added by change order are also shown italicized in the view to indicate the In Progress status.

In change management system detects that downstream change order has become broken when change order occurs at its currently scheduled point on timeline . In one embodiment the user is presented with an alert in UI . Also a tree diagram showing the broken change orders such as is available to the user for viewing in UI .

In the user moves the new change order further into the future past change order to try and fix the break to change order . In the user uses menu to validate the current Plan of Record. Change orders with a state of Approved or In Progress like new change order are considered for validation but Rejected change orders are not considered.

In the validation results are shown at . While change order is no longer broken errors are shown for change order . The validation results include an error that according to policy data in the DataZone is to be on clustered SQL servers. In the user revises change order in view of the validation results. For example in the user changes DatabaseServer to a clustered server using a pull down menu .

In the user changes the state of change order from In Progress to Approved using menu . The appearance of change order in timeline changes from italicized to solid to indicate the Approved status. In at the user renames change order to V2 for version 2 and saves the changes.

Turning to a flowchart shows operations of detecting downstream broken changes in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices. In one embodiment break detection module may perform at least a portion of the operations of flowchart .

Starting in operation a revision to a change order in one or more change plans is detected. A revision may include a modification of pre existing change order e.g. version 1 to version 2 or insertion of a new change order before a pre existing change order.

Next in operation all changes that depend on the revised change order i.e. downstream change orders are re validated. This re validation is done in all change plans that include the revised change order. The re validation may be initiated automatically or manually be a user. A change order depends on a revised changed order if the change order it declares dependency on is that revised change order or is downstream from that revised change order in a chain of dependencies. In one embodiment the dependency between change orders is declared when creating a change order. A previous set of change orders chain together before the new change order.

Continuing to operation the validation results are output. The user may be alerted through UI that one or more downstream change orders in one or more change plans now have errors due to the revision of the change order.

Embodiments of process aware change management system may perform during change impact analysis. This analysis determines the side effects of executing the change order at the scheduled time. In one embodiment the side effects are found based on root cause analysis.

ROOT CAUSE ANALYSIS System management software e.g. Microsoft System Center may include models for the domains managed. It may also include rules to discover the objects and relationships and logic to detect the state of various aspects of these entities machines services jobs etc. . Operations manager may perform discovery and state keeping this gathered information is sent to CMDB and an Operations Manager store.

The models may also include causality models. A causality model declares the causes of effects that can be associated with a managed entity type and knowledge around diagnosing it. Causes are typically conditions that are not observed directly like monitors but inferred from the state of monitors i.e. the effects . The cause and monitor states are associated with each other with causality rules that use the relationships in the model to declare what monitors are tripped i.e. rendered true by what causes. These can be a one to many as well as cascading relationship. As discussed further below this same causality knowledge may be used to perform impact while changing analysis i.e. determining side effects .

In order to employ the causality rules state information is gathered at snapshot points in time. At any given time a snapshot of the IT environment provides monitor state data. Based on this information the certainty of a cause to be true is computed for all causes. Weights provided in the causality models may be used in this computation. For example if A causes B and C and if both B and C are true A is given a high certainty to be true. If both B and C are untrue A is given a high probability of being untrue. If B is true and C is untrue the certainty depends on the individual causal probabilities false positive probabilities and so on.

Causality rules for these monitors will be allowed to point to causes associated with policy or workflow failures that may cause the true states of these monitors. For example computers can have monitors that indicate Self configuration management for Patches timed out . Causality rules will list out what causes can cause this monitor indication i.e. effect . In this case this monitor points to the approval to reboot workflow i.e. the computer needs to be rebooted before Patches can execute . When many issues point to the same policy or workflow cause root cause analysis will surface it as the thing to investigate.

Database is managed by a re indexing self management policy e.g. database is re indexed once a week to maintain optimal performance . Policy has a monitor of missed re index cycle . Policy is managed by an approval process that has a pending scheduled maintenance monitor e.g. scheduled maintenance is not started until approved by a human system administrator .

Thus following the causality rules in from rule to rule to rule the root cause analysis determines that a likely cause of the underperforming monitor being tripped is the pending scheduled maintenance monitor at approval process . For example the system administrator in charge of monitor is on vacation. Another system administrator may take this root cause analysis and confirm whether maintenance is pending approval at process and take action as needed.

TEMPORARY IMPACT OF ENACTING A CHANGE ORDER As discussed above in the anatomy of a change order the change order provides a CMDB query to determine which causes will become true during the change. The causality rules are applied in reverse to determine which component monitors will also become true as a result. Health causality rules are applied to see which services and business processes will be affected. Also SLA causality rules are applied to determine scheduling so as not to affect SLAs and notifications are sent to appropriate people regarding the side effect.

Referring to an example of applying causality rules in reverse for predicting side effects of executing a change is shown. Server hosts service and service . Service is managed by change process . Server has a reboot monitor e.g. rendered true when server rebooting . Service has offline monitor and service has offline monitor e.g. indicates when the service is offline and thus unavailable . Change process includes executing monitor e.g. monitor rendered true when change process is executing . Change process is an upgrade to service .

Causality rule indicates that a cause of server rebooting is the execution of change process the upgrade requires that server be rebooted . Causality rule indicates that a cause of service being offline is server being rebooted. Since the cause is known i.e. execution of change process causality rules and can be followed backwards shown at and to reach offline monitor . Thus a side effect of executing change process is that service will be knocked offline temporarily.

In one embodiment the logic determines that a side effect of a change order has been reached when the object reached by following a causality rule backwards is not an entity e.g. object defined in the change order. Causality rules can fan out as they are traced backwards. As the logic hits causes or effects monitors associated with other entities these other impacted entities are side effects. It is assumed that the managed entity on which the change is being executed is going to be temporarily impacted side effect determination is looking for other unintended impact.

Once the system administrator knows the side effects of a change order the change order can be scheduled to minimize the side effects. For example in change process can be scheduled at night during a normal maintenance cycle when service is offline anyway etc. With knowledge that service will be offline a targeted notification e.g. email message can be sent to user of service of the service outage discussed further below . User can schedule around this outage or perhaps work with the system administrator to reschedule change process . For user a notification that service will be offline is much more meaningful than a notification that server will be offline because user may have no idea what services are hosted by server . In one embodiment a notification is automatically generated by change management system and sent to user .

One skilled in the art having the benefit of this description will appreciate that the example in is using root cause analysis to discover side effects of a scheduled change i.e. looking to the future while the example in uses root cause analysis to discover the cause of various effects that have already occurred i.e. looking to the past . In the root cause is known i.e. change process and following the causality rules backwards finds the side effects e.g. service knocked offline . The root cause is known and the logic determines the effect s as opposed to following all the effects to find the root cause. Also the causality rules that already exist for use in causality analysis may be used for determining side effects for impact analysis of executing a change order.

Also in some conventional implementations a conservative approach is taken to schedule changes even changes that have little or no side effects using rigid rules e.g. all changes must occur on Weekends . This is because the system administrators have no way to reliably determine change side effects so the change is scheduled for a time of least impact in case some severe side effect occurs. For example all human resources services will be offline Saturday night even though the change has no side effects and could be scheduled during normal work hours. Embodiments herein enable system administrators to schedule changes more efficiently by using the causality rules to determine side effects.

Knowledge of side effects may also be used for spam control of email notices of interruptions to IT resources. Embodiments herein may be used for automated targeted notifications of change impact on the IT environment. Embodiments herein do not use a general broadcast to users with information meaningless to users. Constant broadcasts of IT outages changes tend to overwhelm users such that the users start to ignore the notifications and miss notifications that actually affect them.

Turning to a flowchart shows operations of determining side effects of a change in accordance with an embodiment of the invention. In one embodiment at least a portion of flowchart may be implemented by computer readable instructions executable by one or more computing devices. In one embodiment side effects module may perform at least a portion of the operations of flowchart .

Starting in operation the causality rules associated with the change order are identified. In one embodiment the change process temporary impact query of the change order is used. Next in operation the causality rules are followed backwards until a side effect is encountered where a causality rule defines a cause of a change of state at an object.

Continuing in operation the side effect is output such as displayed in UI . In one embodiment a user selects a side effect button in UI to display the side effects for a selected change order. Next in operation notifications are sent to users affected by the side effect.

Although not required embodiments of the invention are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention such as change management system may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

In the description and claims the term coupled and its derivatives may be used. Coupled may mean that two or more elements are in contact physically electrically magnetically optically etc. . Coupled may also mean two or more elements are not in contact with each other but still cooperate or interact with each other for example communicatively coupled .

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

