---

title: Remote feature activator feature extraction
abstract: A database record controls a license to use a computational component. An input receives an order identifier associated with an order related to a computational component and an interface retrieves order information associated with the identifier. The order information comprises at least one material code. A material code mapping agent compares the material code with at least one material code mapping table to identify corresponding computational component information associated with the material code. In another configuration, a transaction record includes first information associated with the order, the order relates to at least a first computational component and/or feature thereof, a configuration file includes second information different from the first information, the configuration file relates to at least one telecommunication switch/server, and a configuration file processing agent compares some of the first information with some of the second information to form a system record having both first and second information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844572&OS=07844572&RS=07844572
owner: Avaya Inc.
number: 07844572
owner_city: Basking Ridge
owner_country: US
publication_date: 20071030
---
The present invention relates generally to the licensing of computational components and specifically to the licensing of computational components in telecommunication systems.

To protect software manufacturers copyrights in software sold to the public manufacturer s commonly license software to the purchaser. Additionally in many applications the purchaser has elected to pay only for certain features of software which must be selectively enabled by the manufacturer. In particular each release or version of a particular software package for a customer premise telecommunication switching system contains a large number of features and most customers elect to pay for only a subset of the total number of features. Features in a telecommunications switching system refer to certain specialized operations such as call hold call transfer automatic route selection etc. An ongoing problem in the art is to prevent newer versions of software from being pirated and used on unauthorized hardware and or otherwise authorized customers from actuating features for which the customer has not paid.

In one method passwords that allow only authorized individuals to have access to the telecommunication switching system are used to control enablement of features or new software versions. This method is inflexible and inconvenient for customers as an authorized technician must be scheduled to enable the features can be circumvented by a person misappropriating or misusing the password and does not provide for periodic license verification during system operation.

In another method a key is required to enable the software program. This solution does not solve the copying problem because the key is normally printed on the packaging of the software and anyone can install the software as many times as they wish however illegal it may be.

In yet another method a special piece of hardware or dongle is used. The dongle is a special piece of hardware that connects to the serial or parallel port of the computer. The software running on the computer sends a random number to the dongle. The dongle performs a secret computation and returns a result. The software makes a like computation if the two computations match the software continues to run. To work satisfactorily the response must include feature and version information. The use of the dongle is cumbersome when it fails. In the event that the dongle fails the system is down until a new dongle can be physically obtained on site. Also once made the dongle is fixed. If it was used for feature activation a new dongle is required for each additional feature that is purchased.

A further method is to freely distribute CD ROM disks. When the CD ROM is inserted into a computer the computer automatically connects to a remote server via the Internet or a dial up connection to receive a machine specific key. The key unlocks the software so that it can be utilized on that computer. The remote server also obtains the necessary payment information from the computer user. This method does not function well for a telecommunication switching system since it does not provide for the authorization to use different features of the same software application nor is it dependent on the version of the software being requested. In addition it does not provide the necessary authorization of personnel to make such a request.

Another method requires the software upon installation or first execution to record serial number information e.g. medium access control or MAC address regarding predetermined hardware components of the computer system. The software permits the user a specified number of hardware serial number changes before it disables itself. This method though effective is unfair to users who over time legitimately exceed the number of permitted serial number changes through reuse of the software on a number of different systems and or periodic replacement of some of the predetermined hardware components in a given system to upgrade or maintain the system.

The drawbacks of the various licensing methods discussed above are addressed by the licensing method discussed in detail in copending U.S. patent application entitled Securing Feature Activation in a Telecommunication System Ser. No. 09 357 679 filed Jul. 20 1999 to Serkowski which is incorporated herein by this reference. In this method a valid license file is required to run a computational component. The license file contains a serial number that must be present on the hardware that is to execute the licensed software for the license to be valid and the software to be executable. In telecommunication applications for example the serial number of the control processor must be in the license file for the control processor to run the licensed software.

The license file also contains a name and or version of the licensed telecommunication application and licensed features. The data structures corresponding to the features are of two types. In a type 1 feature the data structures reflected enablement or disablement of the corresponding feature using a simple on off state. Examples of features falling into this category include attendant vectoring restrict call forward off net and enhanced conferencing. In a type 2 feature the data structures include a single numeric value and or a name kind of entry. Examples of features falling into this category include maximum number of ports maximum number of administered IP trunks and call center release.

The licensing method described in the above patent application file can have drawbacks in certain applications. For example when a computational component is sold a system record is manually created for use in later generating a license file. In telecommunication applications material codes are used by an enterprise resource management or ERM system to track what hardware and or software and software features were purchased. These material codes are manually converted into the corresponding items for license file generation. Manual record creation suffers not only from high labor costs but also from human error and permits abuse by personnel who may provide a customer with additional unpaid for features. The licensing method though effective for controlling right to use for newly purchased components can be inefficient in licensing system upgrades. In new installations the software and or software features that the customer is entitled to use is based entirely upon what the customer ordered. In contrast when a system upgrade is purchased the customer is entitled to use not only the software and or software features ordered but also the software and or software features present on the system before installation of the upgrade.

These and other needs are addressed by the various embodiments and configurations of the present invention. The present invention provides a methodology for converting automatically material codes into corresponding items for license file generation and or for controlling right to use in system upgrades.

In one embodiment of the present invention a method is provided for creating a database record for generating a license to use a computational component. The computational component can be hardware software and or an operational feature thereof. The method comprises the steps of 

 b retrieving order information associated with the order identifier wherein the order information comprises one or more material codes 

 c comparing a material code with a material code mapping table to identify corresponding computational component information associated with the material code and

The order identifier can be in any form whether numerical alphabetical or alphanumerical and identifies a record describing an order involving the computational component. An example is an order number as used in database software sold by SAP Inc. The order can be from any type of business transaction whether a sale a lease or license a free trial a replacement and the like.

The order information in the record can include any desirable information. For example the order information can include not only material code s but also a description of the customer or customer information the quantity of the computational component associated with each material code included in the order and a description of the various computational components. As used herein material code refers to any code whether numerical alphabetical or alphanumerical that identifies an item or type of item such as a computational component.

The material code mapping table describes what the customer is entitled to in its license based on the material codes in the order. The computational component information in the mapping code mapping table can be of any type or form depending on the application. In one application the computational component information comprises for each material code a description of the computational component a platform description a module type an application description a release description and one or more feature codes or keywords.

A database or system record for the customer is generated from the mapping of the order information onto the computational component information. The database record reflects the correct license information. The license information for example includes software application name software version expiration date of the license software features and software capacities. The license file is generated from the database record.

This embodiment of the present invention can enable automatic creation of valid licenses without any manual translation between order information and computational component information. In the case of direct sales this ability can result in significant labor savings and a reduction in erroneous data entry. In the case of indirect sales customers and or distributors can place an order and generate their software license files using a website without having to contact or otherwise involve personnel of the supplier manufacturer. This ability can save substantial time reduce errors reduce support costs of the supplier manufacturer reduce abuse and provide high levels of customer satisfaction.

In yet another embodiment of the present invention a method is provided for creating a database record for generating a license in a system upgrade. The method comprises the steps of 

 a providing a transaction record comprising first information associated with an order the order relating to a first computational component and or feature thereof and a configuration file comprising second information different from the first information the configuration file relating to a telecommunication switch and or server 

 b comparing some or all of the first information with some or all of the second information to form a system record comprising both first and second information and

The first and second information can be any type or form of information associated with a computational component. For example the first and second information describes features and capacities associated with one or more computational components. The first information is typically generated from order information associated with the order and the second information is typically generated from the translation files of the switch and or server being upgraded by items in the order. A feature extraction tool or FET can be used to extract the second information from the translation files. As used herein a feature refers to an operational aspect of a computational component.

In the comparing step predefined priority rules can be used to determine when to use first and second information for a given field in the system record when the two types of information differ. Generally the system record includes all the features in the order plus all the features that were already on the switch server.

The licensing method can be effective for controlling not only right to use for newly purchased components but also right to use for system upgrades. The method considers the software and or software features both ordered by the customer and present on the system before installation of the upgrade.

The feature extraction tool can allow the feature activation system to create valid software licenses for an upgrade without any manual translation between existing features and capacities and license information. In the case of direct sales this ability can result in significant labor savings and prevent errors since a technician does not have to log onto the switch server read the feature and capacities and then manually update the license information on the system. In the case of indirect sales this ability can allow distributors and customers to place a software upgrade order and then run the tool upload the output of the tool into the manufacturer s supplier s web site and generate their license files without having to contact personnel of the manufacturer supplier. This can save time reduce errors reduce the manufacturer s supplier s support costs and provide high levels of customer satisfaction. By encrypting the FET output the feature extraction tool prevents the fraudulent modification of feature settings e.g. adding a feature or increasing a capacity .

The present application is related to U.S. patent application Ser. Nos. 10 231 999 entitled FLEXIBLE LICENSE FILE FEATURE CONTROLS to Walker et al. Ser. No. 10 232 508 entitled LICENSE MODES IN CALL PROCESSING to Serkowski et al. Ser. No. 10 232 507 entitled LICENSE FILE SERIAL NUMBER TRACKING to Serkowski et al. Ser. No. 10 231 957 entitled LICENSING DUPLICATED SYSTEMS to Serkowski et al. and Ser. No. 10 232 647 entitled SOFTWARE LICENSING FOR SPARE PROCESSORS to Walker et al. each of which were filed on Aug. 30 2002 and are incorporated herein by reference.

The above described embodiments and configurations are neither complete nor exhaustive. As will be appreciated other embodiments of the invention are possible utilizing alone or in combination one or more of the features set forth above or described in detail below.

Referring to the licensing verification system comprises an enterprise resource manager or ERM to add update modify and validate entries in a serial number database and an order database a remote feature activation or RFA system to supervise the licensing verification and issuance processes and a business application programming interface or BAPI to process messages between the ERM and RFA system . The RFA system comprises a material code mapping agent to form and populate transactions records by mapping order records in the order database using material code mapping tables a configuration file decryptor to convert encrypted configuration files for switch server received from a feature extraction tool into unencrypted switch server configuration files a configuration file processing agent to update the transaction records output by mapping agent using the feature information in the unencrypted switch configuration file and the switch configuration file mapping table and a remote feature activator to supervise the operation of the remote feature activation system and completion of the transaction records to update the licensing database . The feature extraction tool or FET comprises a feature extractor to access the translation file s to generate the encrypted configuration file by using configuration mapping tables to map the features in translation files onto fields in the configuration file .

The operation of the ERM is discussed in detail in copending U.S. application entitled LICENSE FILE SERIAL NUMBER TRACKING Ser. No. 10 232 507 to Serkowski et al. filed concurrently herewith and incorporated herein by this reference. The ERM is configured to cause the addition update modification and validation of entries in the databases and based on predetermined rules or policies. The ERM can be any suitable enterprise resource planning software such as ERP or Enterprise Resource Planning software sold by SAP.

The serial number database comprises a plurality of records corresponding to hardware e.g. processors or IP services interface cards sold to customers. The database includes two tables namely a current table and a historical table. The data structures in the two tables are similar and are shown in . Referring to each entry includes fields for the serial number serial number status or licensing state valid inactive serial number is available for licensing but is not yet assigned to a license file valid active serial number is available for licensing and has been assigned to a license file invalid open serial number is unavailable for licensing invalid returned serial number is unavailable for licensing and has been returned by the customer and invalid scrap serial number is unavailable for licensing and has been retired client or purchaser date and time of creation of the entry source of update or creation of the entry material code s e.g. a material code in SAP that defines the hardware having the serial number name of the user who created the entry system identifier SID indicating the system to which the serial number has been assigned for licensing module counter indicating the licensing identification number of the processor for use in switch server systems with multiple processing modules and user identifier of the user who created the entry. These entries are typically automatically generated when the serial number is assigned during manufacturing and whenever the licensing state of the serial number is changed using the RFA system .

The order database comprises a plurality of records corresponding to hardware and software corresponding to each customer order. The data structures can vary depending upon the precise implementation of the ERM . shows the data structures in one implementation. Each order entry comprises an SAP order number a group authorization identifier a user id customer name address and contact information fields and a series of quantity material code and description fields and respectively identifying the contents of each order. The entries for the orders can be generated manually or with the aid of a configurator.

BAPI processes messages conveyed between the ERM and the RFA system . In a typical licensing transaction a serial number based inquiry is forwarded via BAPI to ERM by RFA system . In response to serial number inquiries and updates from the RFA system ERM accesses the serial number database to read write serial number information accordingly. A serial number inquiry response is then returned via BAPI to RFA system by ERM . The RFA system then forwards via BAPI a status update to ERM and ERM then updates the database and returns via BAPI a serial number update response to the RFA system . The serial number based inquiry to ERM includes a source to identify the requesting system and an activity code to indicate the processing to be performed by ERM . The RFA system will use two activity codes namely inquiry and update to validate the current status of a serial number when it is entered into an RFA transaction and to update the status after the serial number is saved in a system record. Other activity codes include history to return all historical activity for a serial number and add to insert a new serial number entry in a table . The RFA system uses a number of transaction statuses to characterize a serial number transaction namely PENDING COMPLETION to indicate that the status of the serial number has been validated in ERM and is ready to be updated to a VALID ACTIVE state discussed below PENDING ERROR to indicate that the status of the serial number in ERM indicates that it cannot be updated to VALID ACTIVE and the user must enter a new serial number PENDING VALIDATION to indicate that the serial number has not been validated due to a system problem and the user must resubmit the serial number for validation and COMPLETE to indicate that the status of the serial number in ERM has been updated to VALID ACTIVE.

The RFA system comprises a material code mapping agent to populate transactions records by mapping order records in the order database using material code mapping tables . As discussed below with reference to the mapping agent reads each of the material codes in an order and converts the material code to a corresponding hardware and or software component or feature. The pertinent fields in a transaction record are then populated.

The data structures in the material code mapping tables used by the mapping agent are shown in . The fields in the table are material code description of the item or feature corresponding to the material code platform or platform type which typically is a type or model of hardware such as a processor module type e.g. whether or not the processor is a PPN a remote spare processor or a WAN spare processor application e.g. DEFINITY sold by Avaya Inc. release release or version of the application and feature code s e.g. FEAT ARS on locked FEAT CWFD on locked VALUE PORT or the V and V values for the telephony ports and VALUE CCRELEASE 9.1 9.1 or the release identifier for the corresponding application . Depending on the purpose of a given material code e.g. licensing of base software feature addition capacity addition or release upgrade one or more of the fields and may not be populated.

The RFA system further includes a configuration file decryptor to convert encrypted configuration files for a switch server uploaded into the RFA system into unencrypted configuration files .

Referring to the data structures for the switch server configuration files output by the configuration file decryptor are depicted. The table comprises a series of keywords and corresponding data . The keyword fields comprise a field for the beginning of the header tool this field describes the type of tool that produced the configuration file tool version this field denotes the version of the tool identified in the tool field create date the date of creation of the output file correlation identifier or ID this value allows the output file to be correlated with the switch server being upgraded platform type serial number product ID or PID ending of the header software release the software load version of the system prior to the upgrade the beginning of the Type I features the various Type I features the ending of the Type I features the beginning of the Type II features the various Type II features the ending of the Type II features the beginning of the Type III features the various Type III features the ending of the Type III features and the ending of the application .

The RFA system comprises a configuration file processing agent to apply validation rules to confirm that a configuration file is valid and populate the fields of transaction records using switch configuration files and switch configuration file mapping table and a Remote Feature Activator to apply rules for converting transaction records into valid system records. As will be appreciated a transaction record differs from a system record in that the transaction record does not yet qualify as a system record. Some of the fields in the transaction remain unpopulated and or the transaction record fails to comply with or satisfy certain predefined rules or policies required for all system records. The operation of the configuration file processing agent is described below with reference to .

The data structures for the switch configuration file mapping table are shown in . Moving from left to right the column corresponds to the feature keyword the column to the feature type and columns and to the range definition . Columns and set forth for each feature keyword the corresponding values for V and V.

The RFA system maintains in the licensing database a current system record indicating the features and capacities of each switch server. The system record serves as the input for the creation of a license file. When a system is purchased or upgraded information regarding the features and capacities purchased by the customer is needed to create or update the system record. The purpose of the BAPI is to allow the RFA system to retrieve the required information from the order record in the order database .

The data structures in the transaction and system records are shown in . Each record comprises the following fields system ID sold to customer information distributor information dealer information customer information authorized user access information license generation information which comprises platform type serial number PID application name software version and expiration date Type I feature information which comprises Type I ON OFF feature settings right to use and Type I ON OFF feature settings features activated Type II feature information which comprises Type II value feature right to use Type II value feature range containing a number or numerical range defined by V and V and Type II value feature settings containing the value setting in the range of V to V inclusive for each Type II feature with a right to use Type III feature information which comprises Type III registration feature right to use Type III registration feature release which has a release value for each Type III feature with a right to use Type III registration feature range containing a number or numerical range defined by V and V and Type III registration feature setting containing a number or numerical range defined by V and V license delivery information module information for systems containing multiple processors e.g. main server with WAN Spare Processors application information and system record history .

The data structures in the license file which is generated from the system record are discussed in detail in copending U.S. patent application Ser. No. 10 231 999 entitled FLEXIBLE LICENSE FILE FEATURE CONTROLS filed on Aug. 30 2002 Walker et al. which is incorporated herein by reference in its entirety. The data structures for the license file are shown in . Referring to the license file comprises a header section and one or more application definition sections . For a system using more than a single licensed application the application definition section will be repeated in the license file for each of the controlled telecommunications applications. The header section comprises a header beginning serial number field platform type field PID field and header ending . Each application definition section comprises application beginning software release field license expiration field Type I feature key words fields Type II feature key words fields Type III feature key words fields and application ending . The software application name is defined in the Begin Application field .

The remote feature activator is the supervisor or controlling application for the various other modules in the RFA system . The activator can be embodied in any suitable script. Other operations of the activator are discussed in copending U.S. application entitled LICENSE FILE SERIAL NUMBER TRACKING Ser. No. 10 232 507 to Serkowski et al. filed concurrently herewith. Such other operations include the generation of a license file from a system record in the licensing database and forwarding of the license file to a controlling and or controlled application of a remote switch and or server.

The feature extraction tool or FET accesses the translation file s to generate a configuration file when a switch server is upgraded from an earlier version of software that was not licensed using the licensing system . As noted above the file is used to generate a license for the upgraded system. The configuration file is generated by the feature extractor using FET mapping tables to map features in translation files to corresponding feature codes or keywords recognized by the RFA system . The data structures for the FET mapping tables are shown in . The mapping tables are for Type I and II features respectively. As discussed in detail in copending U.S. patent application Ser. No. 10 231 999 entitled FLEXIBLE LICENSE FILE FEATURE CONTROLS to Walker et al. filed concurrently herewith and incorporated herein by this reference Type I features are features having a simple on off state. Type II features are features having a numeric value. Type III features are features having a product ID a release number and a numeric value.

Referring to the data structures for the mapping table for Type I features are depicted. The table comprises fields for the feature keyword which identifies a corresponding feature and is the variable that the features in the switch server are being mapped to the title string on the switch administration terminal or SAT screen the page number the pertinent page of the customer options form the field ID the feature field used in the translation files or the feature identifier that is being mapped from feature setting defines the rules for setting the features in the configuration file based on the feature setting s in the translation files of the switch server e.g. Copy indicates that the setting from the switch is used directly to populate the setting in the configuration file and the platform applicability defines the platform types for which the feature is valid .

Referring to the data structures for the mapping table for Type II features are depicted. The table comprises fields for the feature keyword the title string on the SAT screen the page number the field ID and the rules for setting the feature value .

The tool is typically executed on a customer s personal computer or PC and the encrypted configuration file uploaded onto communication link and forwarded to the RFA system for processing by the configuration file processing agent . The data is stored in the PC as an encrypted file to prevent the user from tampering with the file in an attempt to illicitly acquire additional features or capacities. The configuration file includes a correlation ID to match the file with the customer and the switch server to which it applies. As will be appreciated the file transfer to RFA system can be done automatically without user input.

The feature extraction tool is preferably a single user tool that provides a simple user interface and step by step instructions for generating the feature file consistent with the tool being used by untrained customers. The tool for example could provide the customer with instructions on returning the encrypted file to the RFA system and with the option for automatically e mailing the feature file to the RFA system if an e mail connection is available.

Referring to the operation of the material code mapping agent will now be discussed. In response to a command from the RFA activator which is typically in turn in response to a request from a user the mapping agent in step forwards a status request to the BAPI . The request includes the SAP order number.

The BAPI forwards the request to the ERM . The ERM retrieves from the order database the order corresponding to the order number. The BAPI thereafter interacts with the ERM to verify the success of the transaction validate the order type validate the order status e.g. complete being processed awaiting scheduling and product delivered awaiting installation extract the SAP customer number to be used for user authorization to view the order extract the customer sold to name and address to be displayed by a graphic user interface of the RFA system and for each line item of the order extract the material quantity and material code for the translation to its corresponding features and capacities during the mapping operation. The response to the status request comprises the order status the status success or failure of the remote function call the line items on the order packing information and partner customer name and address information.

Upon receipt of the response from the BAPI in step the mapping agent creates a transaction record and performs mapping to populate the various fields of a transaction record. In step the mapping agent reads the order status the status success or failure of the remote function call packing information and partner customer name and address information and populates the appropriate fields in the transaction record. In step the mapping agent reads the first line item in the response. In step the mapping agent extracts the material quantity and material code from the first line item. In step the mapping agent reads the material code mapping table compares the material code in the first line item with the various material codes in the table and translates the material code to the corresponding features and or capabilities in the table e.g. finds the corresponding description platform module type application release and or feature code s for the material code . The located information and quantity information is then used to populate the corresponding fields in the transaction record as appropriate. If the material code in the order is not found in the mapping tables then the material is not used to populate fields in the transaction record. In step the mapping agent determines whether or not there is a next unprocessed line item in the response. When there is a next line item the mapping agent returns to step and repeats steps and for the line item. When there is no next line item the mapping agent saves the transaction record in the licensing database and terminates operation with respect to that transaction.

In step the feature extraction tool contacts the switch server by any suitable technique. In step the feature extractor reads the PID platform type software version serial number s and duplication information off from the translation files stored in the memory of the switch server . In step the feature extractor next reads the application information and in step the first feature entry for the application in the files .

The information acquired from the feature entry depends upon the type of feature namely whether the feature is a Type I II or III feature. For a Type I feature the feature extractor first determines in step if the platform type of the telecommunication switch server is marked with an N in the Platform Applicability column of the Type I feature mapping table . If so the setting state for the feature keyword is set in step to OFF . If not the setting state for the feature keyword is set in step in accordance with the feature setting column of the configuration mapping table for Type I features . For a Type II feature which are capacity value features the feature extractor in step sets the value in the configuration file for the corresponding feature keyword in accordance with the feature value column in the Type II configuration mapping table . As noted when the feature extractor has no data for a Type I or II feature keyword the keyword is included in the file with the data as set forth in the corresponding mapping table. For a Type III feature which are registration features the feature extractor in step reads the PID version and capacity information for the corresponding feature keyword. When the feature extractor does not have data related to a given Type III feature keyword the keyword is omitted from the switch configuration file . When the feature extractor does not have any information for the application PID or software release keyword within an application section the keyword is included without any data. The information read for the pertinent type of feature is used to populate the corresponding fields in the configuration file .

In step the feature extractor determines if there is a next unprocessed feature in the translation files for the subject application. If so the feature extractor repeats steps and the pertinent of steps and steps and . If not the feature extractor next determines in step if there is a next unprocessed application in the translation files . When there is a next application the feature extractor returns to step and repeats the ensuing steps as appropriate. When there is no next application the feature extractor encrypts the file in step . The user then uploads the file into the RFA system .

For security reasons the tool both saves the files and transmits the files in an encrypted form. As will be appreciated when the file is saved in a plain text or unencrypted form the customer can alter the file to provide unpaid for features capacities. These unpaid for features capacities will in certain situations be carried over into the license for the upgraded system.

The encrypted file is received and downloaded by the configuration file decryptor in step . The agent decrypts the file in step to form a plain text file. Finally in step the resulting unencrypted switch configuration file is saved.

In step the agent opens for a selected switch server the corresponding switch configuration file and transaction record previously generated by the material code mapping agent .

In step the agent determines whether or not to reject the switch configuration file before proceeding to later steps. When the switch configuration file fails to meet predetermined format requirements has an application PID value that is not a default value or blank and that was in a previously imported switch configuration file includes a correlation ID which is unique for a given switch server that is in another switch configuration file that was successfully imported and or has a correlation ID that does not match the transaction ID of the corresponding transaction record the switch configuration file is rejected in step and not used to alter the corresponding transaction record. In step an error message is returned to the user with a brief description of the error and information on whom to contact to resolve the issue. In step the rejected switch configuration file the error that caused the file to be rejected the user name of the person who tried to import the file the date and time and the associated transaction record ID are archived in the licensing database as part of the system record history. When the foregoing conditions are not found to exist the agent proceeds to step .

In step the agent determines if the serial number in the configuration file is contained in another successfully uploaded configuration file . When the same serial number appears in two separate configuration files it is an indication of attempted fraud. When the same serial number appears in another successfully uploaded configuration file the agent proceeds to step . When the same serial number does not appear in another successfully uploaded configuration file the agent proceeds to step .

In step the agent checks the serial number strings in the configuration file against the entries in the serial number database to ensure that the serial number s is valid for licensing i.e. the state is VALID INACTIVE . When all of the serial numbers pass the serial number database check the agent proceeds to step and uses the serial number s to populate the serial number field s in the transaction record when the field s are not already populated . When one or more of the serial number s fail the serial number database check the agent proceeds to step .

In step the agent determines if the platform type of the switch server in the transaction record matches the platform type string in the switch configuration file. If not the agent proceeds to step . If so the agent proceeds to step .

In step the agent uses the PID value to populate the PID in the transaction record regardless of whether the value is a default or not and that field is already populated.

In step the agent reads the next first application information in the configuration file and in step the next first feature entry for that application.

The ensuing steps depend on whether the feature corresponding to the feature keyword is a Type I II or III feature.

For a Type I feature the agent proceeds to step and determines whether the setting state is ON. If so the feature keyword and associated information is added in step to the Type I right to use list or field in the transaction record if the feature keyword is not already present from the SAP order. These are features for which the customer has already paid. Next in step the processing agent sets the corresponding feature activation setting field to ON in accordance with the setting in the configuration file. If the setting is OFF in step the agent does not add the feature to the right to use list instead it proceeds to step in which the agent determines if the feature keyword is already in the transaction s Type I feature right to use list from the material code mapping. If so then the processing agent proceeds to step and sets the feature activation setting field to OFF to match the configuration file. If not the processing agent proceeds to . Features that are OFF have not previously been paid for by the customer and are therefore not added to the right to use list. However if the feature is in the right to use list as a result of the action material code mapping but was previously OFF on the switch server it is left OFF in the transaction record in case it is a feature that the customer does not want activated the feature can be activated later if desired since it is in the right to use list . As will be appreciated importing a switch configuration file has no impact on the Type I feature right to use field previously populated by the material code mapping agent during material code mapping.

In any event the agent next proceeds to step in which the agent determines if there are any remaining features for the application requiring processing. If so the agent returns to step with respect to that feature. If not the agent next determines in step if there is any application the features of which have not yet been processed. If so the agent returns to step with respect to that application. If not the agent terminates.

Returning again to step for a Type II feature in the configuration file the agent in step processes the Type II feature.

A more detailed flowchart of this process is depicted in . Referring to the agent in step determines for the selected Type II feature keyword from the switch configuration file whether the feature is also listed in the corresponding entry in the transaction record.

When the feature is not listed in the transaction record the agent proceeds to step . In step the selected Type II feature keyword is added to the right to use list .

In step the agent determines whether the feature type for the keyword is Range in column of the mapping table . If so the licensed range values and in the mapping table are used in step to populate the V and V values in the value feature range in the transaction record. In step the agent determines whether or not the feature setting in the switch configuration file is in the value feature range in the mapping table . When the feature setting is in the value feature range the feature setting field in the transaction record in step is set to the feature setting value in the configuration file . When the feature setting in the configuration file is not in the value feature range the feature setting field in step is set equal to the value for V. Returning again to step when the feature keyword does not have a feature type of Range in the mapping table the agent in step sets the values for V and V in the value feature range in the corresponding transaction record to the respective value in the switch configuration file .

Returning again to step when the selected Type II feature keyword in the switch configuration file is not listed in the corresponding transaction record the ensuing actions of the agent depend on whether the keyword is a capacity keyword a set value keyword or a range keyword as defined in the mapping table . A capacity keyword provides a capacity value for a switch server function. Examples of capacity keywords include maximum ports maximum concurrently registered IP stations maximum administered IP trunks and maximum number of logged in ACD agents. A set value keyword is a feature that has non numeric settings. Examples of set value features include offer category e.g. allowed settings of A or B G3 version e.g. allowed settings of V V and call center release e.g. allowed settings of pre 8.1 8.1 8.3 9.1 and 11.1 . A range keyword is a feature that customers are allowed to set within an allowed range. An example of a range feature is location allowed values are 1 for domestic and 2 for international .

When the feature keyword is a capacity keyword the agent in step sets the values for V and V in the corresponding transaction record to the current value plus the single value from the switch configuration file . Thus when the current value in the transaction record for telephony ports is 25 for both V and V and the port value in the configuration file is 100 the value for both V and V is set to 125 as the values for V and V are the same .

When the feature keyword is a set value keyword the agent in step ignores the set value keyword for purposes of populating the value feature setting field transaction record.

When the feature keyword is a range keyword the agent in step determines whether or not the feature setting in the switch configuration file is in the range of V to V inclusive in the corresponding feature range field of the transaction record. If so the feature setting value in step is set equal to the feature setting value in the configuration file . If not in step no change is made to the field in the transaction record.

Returning again to the agent in step determines whether there is a next unprocessed feature in the current application. If so the agent proceeds to step . If not the agent next determines in step whether there is a next unprocessed application. If so the agent returns to step . If not the agent terminates.

Returning again to step for a Type III feature in the configuration file the agent proceeds to step and determines whether or not the Type III feature product ID and release combination listed in the configuration file is also in the transaction record. When the Type III feature product ID and release combination are listed in the transaction record the agent sets the range V and V field in the transaction record to the current values plus the single value from the switch configuration file. Since the range value V equals V the feature setting field is also set to this single value V V. When the Type III feature product ID and release combination are not listed in the transaction record the agent adds the product ID and release to the corresponding fields and of the transaction record and sets the range V and V field in the transaction record to the value from the switch configuration file. Since the range value V equals V the feature setting field is also set to the single value from the switch configuration file. The agent next proceeds to step and determines whether there is a next unprocessed feature in the current application. If so the agent proceeds to step . If not the agent next determines in step whether there is a next unprocessed application. If so the agent returns to step . If not the agent terminates the Type III feature population subroutine.

When the fields of the transaction record are fully populated and the transaction record satisfies other selected database rules and policies the agent submits the transaction record to the activator . The activator converts the transaction record to a system record to be used for generation of a license file.

A number of variations and modifications of the invention can be used. It would be possible to provide for some features of the invention without providing others.

For example in one alternative embodiment RFA system and or some or all of its various components ERM BAPI and or tool are implemented in whole or part as software and or an application specific integrated circuit.

In another alternative embodiment the division of the various functions performed by the system and or some or all of its various components ERM BAPI and or tool modules are different.

The present invention in various embodiments includes components methods processes systems and or apparatus substantially as depicted and described herein including various embodiments subcombinations and subsets thereof. Those of skill in the art will understand how to make and use the present invention after understanding the present disclosure. The present invention in various embodiments includes providing devices and processes in the absence of items not depicted and or described herein or in various embodiments hereof including in the absence of such items as may have been used in previous devices or processes e.g. for improving performance achieving ease and or reducing cost of implementation.

The foregoing discussion of the invention has been presented for purposes of illustration and description. The foregoing is not intended to limit the invention to the form or forms disclosed herein. Although the description of the invention has included description of one or more embodiments and certain variations and modifications other variations and modifications are within the scope of the invention e.g. as may be within the skill and knowledge of those in the art after understanding the present disclosure. It is intended to obtain rights which include alternative embodiments to the extent permitted including alternate interchangeable and or equivalent structures functions ranges or steps to those claimed whether or not such alternate interchangeable and or equivalent structures functions ranges or steps are disclosed herein and without intending to publicly dedicate any patentable subject matter.

