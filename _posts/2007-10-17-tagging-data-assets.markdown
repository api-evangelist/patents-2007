---

title: Tagging data assets
abstract: Systems and apparatus, including computer program products, for tagging data assets. In one aspect, a computer program product includes instructions operable to cause a computer to establish a database of concept data elements, asset references, and associations. The concept data elements each represent a concept and have a hierarchy specified by concept hierarchy information. The asset references each include a storage location identifier for a corresponding one of a plurality of data assets. Each association defines a type of relationship, from a plurality of types of relationships, between a data asset and a concept represented by a concept data element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08626756&OS=08626756&RS=08626756
owner: Adobe Systems Incorporated
number: 08626756
owner_city: San Jose
owner_country: US
publication_date: 20071017
---
This application is a continuation application of and claims priority to U.S. patent application Ser. No. 10 672 252 entitled TAGGING DATA ASSETS which was filed on Sep. 25 2003 which is a continuation of U.S. patent application Ser. No. 09 224 915 entitled TAGGING DATA ASSETS which was filed on Jan. 4 1999 now issued as U.S. Pat. No. 6 704 739. The disclosures of the above applications are incorporated herein by reference in their entirety.

Diverse types of digital assets are stored in computer systems. For example a computer system can store files and database records containing electronic mail messages digitized photographs compressed motion video sound and text. Such information can be stored as file objects in a hierarchically arranged directory tree or as records within a relational database. Some storage systems have limited organization capabilities that are restricted by static relationships between the stored digital asset and its location in the file system directory hierarchy or database.

Improvements in the logical organization storage and retrieval of digital assets can be obtained using metadata. Metadata also referred to as data about data is information that can be used to describe characteristics of a stored asset and that can be altered independently of the asset itself. For example metadata can be used to describe the author and creation data of a graphic image file without altering the stored graphic image.

In general in one aspect the invention features a method of responding to a user request that a computer program application open a data asset. The method includes presenting to the user a location interface to receive data asset location information from the user to locate a desired data asset. The location interface is linked to a searchable tag database that includes concept data elements asset references and associations. Concept data elements each represent a concept and have a hierarchy specified by concept hierarchy information. Asset references each comprise a storage location identifier for a corresponding data asset. Each association represents a relation between a data asset and a concept. The method also includes receiving from the user a query identifying a concept and a relation. In response to the query the tag database may be used to identify a set of data assets each having a specified relation with an identified concept. The identified set of data assets may thereafter be presented to the user.

In general in another aspect the invention features a computer program product tangibly stored on a computer readable medium for responding to a user request that a computer program application open a data asset. The program includes instructions operable to cause a computer to present a location interface to the user instructions to receive data asset location information from the user instructions to link the location interface to a searchable tag database of concept data elements asset references and associations instructions to receive a query identifying a concept and a relation instructions to use the tag database to identify a set of data assets each having the relation with the concept and instructions to present information identifying the set of data assets.

Implementations may include one or more of the following features. The tag database can include a plurality of relation data elements. Each relation data element represents a relation between other tag database elements. Relations can have a hierarchy specified by relation hierarchy information. A tag data interface can be used to display concepts and relations that can be searched for during an open operation. A user can use the tag data interface to select elements defining a query. In response to the query information identifying a set of data assets satisfying the query can be displayed. The set of data assets can be identified by finding each asset reference in the tag database having a specified relation or a relation that is hierarchically related to the specified relation with an identified concept or with a concept what is hierarchically related to the identified concept . A query can identify multiple associations each represented by a concept and corresponding relation that are logically grouped. For example multiple associations may be grouped using boolean logic operations. A user can use the tag data interface to select a data asset from the set of data assets and a file handle for the selected asset can be returned to the application.

In general in another aspect the invention features a method of responding to a user request that a computer program application save a data asset. The method includes presenting a storage interface to the user and linking the storage interface to a searchable tag database. The storage interface can be used to receive location information from the user to identify a storage location identifier for a data asset to be saved. The tag database includes concept data elements asset references and associations. The method also includes receiving location information and an association for the data asset being saved and storing an asset reference and the association in the tag database.

Implementations may include one or more of the following features. Information identifying all concepts and relations that can be selected during a save operation can be received from the tag database and displayed to a user through a tag data interface. The tag data interface can be used to select tag elements identifying associations for an asset. A tag creation interface can be provided to a user to define concepts relations and the hierarchical organization of concepts and relations. The asset location information may be a file name or a database identifier.

The invention may provide one or more of the following advantages. Digital assets can be stored and organized based on user defined criteria. Asset organization restrictions imposed by a computer file system hierarchy can be reduced. Dynamic organization of documents based on query parameters can be provided. Text based descriptive data can be associated with non text data. Organization storage and retrieval of assets by descriptive parameters can be provided. Descriptive information can be associated with stored data without altering the data s contents.

As shown in a computer includes software applications used to create and store data assets. These data assets can include word processing files database files picture files database records or any other type of electronically stored data. Once a data asset has been created it can be stored in an asset storage system which may be a disk based file system . Assets stored in the system may thereafter be retrieved by the computer as well as by other computers having access to the data asset on the storage system . The storage system can include multiple physical devices and can include local and remote storage devices. For example the storage system can include a local hard disk drive of computer as well as remote server based storage storage across multiple servers on a network and storage in a database. Assets in the storage system can be organized in a hierarchical manner such as files stored in a UNIX file system or may be loosely organized such as files stored across multiple computers connected by the Internet network or may be rigidly organized such as records stored in a relational database.

The logical arrangement cataloging storage and retrieval of data assets in the storage system is facilitated by metadata tags tags associated with the stored data assets. Tags are used to represent concrete or abstract objects and ideas and are used to organize data assets in the storage system by relationships established between the tags and data assets. In the system tags are stored in a tag database and through software operations of the computer system and of a tag database server relationships are established between the tags and data assets. The relationships between tags in the database and data assets in the storage system can be independent of data asset storage types the applications that create the data assets and the arrangement of the assets in the storage system .

Tags can be stored in a tag database by the tag database server . Software programs executing on the computer send requests to the server and receive responses from the server to access and alter tag data. Tag data manipulation and access requests and tag server responses can be exchanged when a data asset is initially created and stored in the storage system when an existing data asset is altered or at other times as may be determined by a user of the computer system . For example a data asset can be an Adobe FrameMaker Version 5.5 file. The asset can be stored in the system by selecting the Save operation from the FrameMaker File menu and designating the storage system as the storage destination for the asset . Contemporaneous with the saving of file actions to create and or alter tag data can be performed at the computer and server . For example on a Microsoft Windows 95 system tag data can be created at the computer using modified operating system Save procedures. The modified Save procedures as will be explained later can provide an interface to a user at the computer to receive tag data information or to derive tag information from file contents. The tag data received from the user or derived from the file can then be sent to the server for storage in the tag database . As explained below the tag data sent to the database can be interrelated with tag elements existing in the database to logically catalog and logically organize the asset .

The logical organization and cataloging of tag data in the database is provided through the use of a tag model. The tag model includes several tag categories and defines relationships allowed between tags of a given category and between tags in different categories. These tag relationships can be logically represented in the form of a semantic network known herein as a tag network . As shown in a tag network is a lattice or graph structure formed from interconnected nodes and . The tag network provides a metadata description of an asset represented by node . As described by the tag network and as will be more fully explained below the asset represented by node is a document about monochrome printers entitled HP 1703 Specification is related to a project named Jasper has an author named Simons and a primary author named Jones. 

A tag semantic network can represent assets in the storage system using asset reference tags asset references . For example the network includes the asset reference . An asset reference is directly related to an asset stored in the storage system . Asset references include pointer data identifying a method to retrieve a stored asset. The stored pointer data can include a hierarchical file system directory and file name a URI Uniform Resource Identifier a Structured Query Language SQL program or other asset retrieval information. Asset references can also include additional data such as the asset type and information about the asset s representation in the storage system . Each asset reference in the network can be formed by operating system procedures that provide appropriate pointer data and instructions to a tag server when data assets are stored in the storage system .

A tag network includes various metadata elements that can be interrelated and used to describe stored assets. One tag model metadata type referred to as a named concept is used to describes concrete or abstract idea that a user may wish to interrelate with asset references. For example the idea of a computer printer is represented by concept uniquely named Printer. Named concepts can be associated with asset references and with other tags in a tag network. Named concepts can be created using an interface provided at computer or server whereby a user can enter unique text strings describing a concept. After entry of the unique text string data storage instructions are provided to the server to store each string as a concept in the tag database . Additionally associations between named concepts and asset references can be created by a user using an interface provided at computer or server .

Named concepts can be hierarchically organized through the use of user specified refinements. In the tag network refinements are shown as solid lines interconnecting named concepts and . As shown in refinements interconnecting named concepts and establish three concept hierarchies. The first hierarchy includes concepts related to product types the second hierarchy includes concepts related to printer color capabilities and the third hierarchy includes concepts related to people. Concept hierarchies allow a parent concept to be partitioned into multiple child concept subdivisions. Additionally concept hierarchies can be used to establish peer relationships among concepts. For example in the semantic network the parent concept Product is subdivided into two child concepts Computer S W and Computer H W . The child concepts and are peers since they are each direct refinements of a common parent concept . A concept may also have multiple parent concepts if it is a logical subdivision of each. Thus concepts may be flexibly arranged in a variety of lattice or directed graph structures. For example a user may organize a car concept as a subdivision of a product concept but also consider the car concept as a subdivision of a entertainment concept not shown if he or she is a car enthusiast. Refinements may be specified by a user using a graphical user interface GUI at the computer or server to specify parent child relationships. For example a user can specify a parent child relationship by dragging a graphical icon representative of a child concept onto a graphical icon representative of a parent concept.

The hierarchical organization of concepts facilitates navigation of a tag network and facilitates searching for data in the tag network. For example a user may wish to search the tag network to retrieve all assets associated with the product concept . To do so a user may select the product concept using a search query interface provided at computer . As can be seen in no asset references are directly associated with the product concept . However the network includes asset reference that is associated with the printer concept through a concept instance . As will be explained below each concept instance functions as a logical surrogate for the concept that it is an instance of. Using information concerning the hierarchical relationship among concepts a tag network search routine can determine that the printer concept is a subdivision of the computer hardware concept which in turn is a subdivision of the product concept . A tag network search routine can therefore conclude that the printer concept is a subdivision of the product concept and therefore the printer concept logically satisfies a search for the product concept . The search routine can therefore determine that asset reference satisfies a query for assets associated with the product concept .

In the above example it was appropriate for the search routines to consider subdivision of a concept when trying to find a match for the concept in the network. In other instances it is appropriate to search only for the specific concept or even to consider the ancestors rather than descendents. This may be specified as search routine query parameters.

A tag network can also include anonymous concepts. Like named concepts anonymous concepts can be joined by refinements to other anonymous concepts and to named concepts. Unlike named concepts however anonymous concepts do not require a unique distinguishing name. Instead anonymous concepts are uniquely distinguished by the refinement relations between the anonymous concept and other anonymous or named concepts. Anonymous concepts can be used to group descendent concepts and alter peer relationships among concepts in a concept hierarchy.

Implementations of the tag model can also include interconnection points referred to as concept instances. Concept instances function as logical surrogates for the concepts that they are instances of. Concept instances can be used to organize and structure logical interconnection between concepts and other types of metadata in a tag network. For example in the network concept instance is used as a connection point between asset reference and the Printer concept . A single concept can have multiple instances that descend from the concept. Each concept instance is uniquely defined by the concept from which it descends and by its detail associations explained later to other tag network elements. Thus through the use of concept instances particular interconnections to a concept can remain logically distinct and separate from other interconnections to that concept. In some implementations concept instances may be created automatically by the server whenever an association to a concept element or between concept elements is created.

In addition to concepts instances and asset references a tag network can include primitive data elements. Primitive data elements are general purpose storage types used to represent for example integers floating point numbers character strings and dates that are entered by a user or created in the system . For example in the tag network a string primitive is used to store the string value HP 1703 Specification and a date primitive is used to store the date that the asset was first encountered. The string primitive may be entered by a user while the data primitive may be set by the computer . The value of a primitive data element can be dynamically altered.

By interrelating concepts instances asset references primitive elements and other tag model elements a meaningful description of a stored asset can be structured. Such interrelations can be provided through association relationships associations . Associations can be specified by a user when a non hierarchical relationship exists between a source and a target concept concept instance asset reference or primitive data element. In the tag network associations are shown as dashed lines . For example in the network asset reference pertains to a document about monochrome printers. Asset reference is therefore logically related to the printer concept but is not a sub division of the printer concept . Since asset reference is not a sub division of the printer concept it is semantically incorrect to use a refinement relationship to interconnect the asset reference and the Printer concept . Instead the relationship between the asset reference and Printer concept is specified through the use of an association .

Associations include about associations and named associations . An about association provides information about a source that is expressed by a target. For example an about association exists between asset reference and the instance of the Jasper concept . The association thereby describes the asset referred to by the reference as being about the Jasper project . Associations between a source and target can also be described using named associations. Named associations include additional information describing the nature of the association between the source and target of the association.

The additional detail provided by a named association is referred to as the relation between the source and target. In the tag semantic network named associations have respectively relations entitled Author Primary Author Encounter Via Encounter On and Title. A named association s relation provides further information regarding the association between a source and a target. For example the named association has the Primary Author relation This relation indicates that Jones is the primary author of the document referred to by asset reference . In various implementations an about association may be implemented as a named association with a blank or null value as its name or a particular predetermined relation value may be used to indicate about associations.

Like concepts relations can be user defined and hierarchically organized. As shown in three hierarchies are formed from relations and . Relations are referenced by named associations while relations and exist in the hierarchies and but are not referenced by a named association. The hierarchical organization of relations like that of concepts facilitates navigation of a tag network and facilitates searching for data in the tag network. For example a user may wish to search for a document with an author of Jones. To do so search routines are used to search the tag network to find an association with the relation Author interconnecting an asset reference and an instance of the Jones concept. In the network no such association exists. However using the relation hierarchy a search routine could determine that the Primary Author relation is a subdivision of the Author relation and therefore satisfies queries requiring the Author relation . Thus a search routine could determine that the asset reference having a Primary Author of Jones satisfies a query for assets with an Author of Jones. As with searching over concepts searching over relations may also consider only the specified relation or ancestors of that relation.

At times a user may wish to refine one or more concepts without creating further subdivisions of the particular concepts. This may be desirable where for example a second and distinct concept hierarchy includes the desired subdivision information. In such a case the user may want to subdivide a concept using information from the second hierarchy but without duplicating the second hierarchy as a descendent of the concept to be subdivided. For example as shown in a tag network includes concept hierarchies and . Concept hierarchy including concepts related to products and in particular includes concept representing the Adobe Illustrator software product. Concept hierarchy includes concepts related to computer operating systems. A user may wish to subdivide the Illustrator concept based on operating systems that the software runs on. Although a user can use refinements to subdivide the Illustrator concept into additional operating system dependent subdivision concepts it may be preferable to refer instead to the concept hierarchy . To do so the user can make use of a particular type of association referred to as a detail association.

A detail association permits a user to subdivide a concept or instance using a reference to another concept or concept hierarchy in a tag network. In the network detail associations are shown as dotted lines interconnecting instances with respectively concept and with instances and . A detail association like a named association includes a relation. Detail associations and each include the Runs On relation while detail association includes the Works with relation . The detail s relation describes the nature of the details being added to the concept or instance. For example instance of the Illustrator concept has detail association . The detail association has the Runs On relation and couples the instance to an instance of the UNIX operating system concept . The detail association thereby indicates that the instance of the Illustrator concept refers to a version of the Adobe Illustrator software that runs on a UNIX operating system. Consequently if an asset reference were to have an about association to the instance it would indicate that the referenced asset was about Illustrator software running on a UNIX operating system.

Each instance or concept can include multiple detail associations. For example instance could include a second detail association not shown having the relation version to a numeric primitive element having a value of 5.5 not shown . The combination of the detail with this second detail would indicate that instance refers to version 5.5 of Illustrator that runs on UNIX. Each concept instance e.g. of in a tag semantic network is uniquely defined by its parent concept and its collection of detail associations. In various implementations relation hierarchies may or may not be considered during a search for a particular detail. Thus in some implementations a search for a instance having a particular detail association will be so satisfied only by the detail having the particular specified relation.

Implementations of the tag model may also include rules placing particular requirements or restrictions on the organization of tag data. These rules known as prescriptions can help ensure a consistent and meaningful organization of tag data. For example a consistent organization of tag data may be enforced by prescriptions requiring particular detail associations for instances of a specified concept. The tag model may also include prescriptions limiting refinements associations and the accepted data range for the values of particular primitive elements. Prescriptions affecting a concept or relation may be inherited by descendent concepts instances and relations. For example as shown in the computer software concept may have a prescription requiring all instances of the concept to include a Runs On detail association. This prescription may be inherited by descendent concepts such as the Illustrator concept thereby requiring instances and of the Illustrator concept to have a detail including the Runs On relation . Inherited prescriptions may affect both population of data structures and navigation of the tag network. For example during searching and data entry if a user fails to specify a particular required detail association that detail may by default have a distinguished target value of all. The all value will match any particular value specified in a search.

In a multi user implementations tag model data may be simultaneously accessed deleted and updated by multiple users or software processes. Alterations made by a first user or application may in some circumstances be problematic. In particular alterations made by a first user or application may change the aggregate information in the tag model database so as to alter a second user s or program s understanding of the information. The second user or application may thereafter behave in an erroneous manner due to its incorrect understanding of the state of the tag model data. Therefore the tag model may implement a data integrity mechanism called a contract that avoids such errant behavior. A contract is a request between a user or application and the tag model database indicating that the requesting user or application needs to maintain a particular view of certain specified tag model elements. When a contract has been established the tag model database server limits alterations that can be subsequently so made. If a second user or application requests a change to the tag model database and that change would cause a contract to be broken the tag model database server may prevent the operation or may require the second user to explicitly break the contract such as by entering a command to override the contract.

Tag data may be presented and manipulated independent of specific software applications. This can be done for example using modified operating system functions or through the use of a tag data helper application. As shown in a computer has a software environment including one or more application software programs and operating system software . The application software is for example the Adobe Illustrator program and the operating software is for example a graphical user interface GUI operating system such as Microsoft Windows 95. By modifying operating system software operations on data in the tag database can be initiated by a software application without requiring the explicit alteration of the application.

Modifications to the operating system to provide tag data features can include modifications to operating system procedures that provide Save and Open functionality. Such procedures may be used to create a file system handle that is subsequently used by the operating system or application procedure to store retrieve or manipulate a data asset. As shown in A and B a GUI operating system typically includes graphical interface functions to facilitate file Save and Open operations. These save and open may be initiated by a selection provided in a graphical menu and when initiated may provide functions as shown in . In particular Save and Open operations may present a GUI interface to receive input from a user . In response asset storage data is received from the user . The received data identifies a location in the storage system where a data asset can be stored or where a previously stored data asset can be found. Additionally a file system handle is determined and provided to the application that initiated the Save or Open operation . The application may subsequently use the file handle to store or manipulate a data asset in the storage system .

 Save and Open procedures provided by an operating system can be modified and the modified procedures linked to a program application to access and manipulate tag data. For example Save and Open procedures provided in a dynamically linked library such as in a Microsoft Windows 95 .dll dynamically linked library can be modified. When an application using the particular dynamically linked library is linked to the modified library such as by operating system run time linking procedures the new tag database capabilities present in the modified library will be available to the application. As shown in A and C data asset software access procedures executing on a computer can include functions to store and manipulate tag data in a tag database when these operating system Save and Open functions are initiated by an application .

Referring to and B to manipulate tag data in the database Save and Open procedures can for example present a GUI interface to receive asset location information from a user . Additionally an initial query is sent from the operating system to the tag server to determine the state of tag networks in the tag database . The initial query can be sent using operating system remote procedure calls to send a request to the tag server . In response the tag server may return a listing of all concepts named associations and relations that can be associated with a data asset being saved or that can be searched for during an Open operation.

Tag information returned by the tag server to the save or open procedure can then be displayed to a user using a tag data interface step . The tag data interface step can be a graphical user interface that allows a user to select particular tag elements enter new tag elements or compose arrangements of elements such as concepts associations relations and details. During a file open operation the tag data received at the interface step can be used to form a second tag query step . In response to the query step the tag server can invoke search routines to identify a list of data assets and their storage locations. This data asset list can be returned to the Open procedure and presented to the user of the computer step . The user can then select one of the listed assets as the target of the Open procedure step . Subsequently a file handle is determined step and returned to an application for subsequent use by application and operating system so software procedures step . An application program may subsequently manipulate the identified asset. Many modifications may be made to the exemplary procedures of . Additionally modified operating system procedures are not limited to procedures like Open and Save but may be extended to many types of operating system procedures. For example if a data asset is to be printed the print procedures can query the tag server to determine printer related characteristics of the data asset. For example data in the tag database may indicate that the data asset is a color picture and therefore should be printed using a color output device.

Modified operating system procedures are only one way to access create and manipulate tag data. A tag data viewer application can be used to access create and manipulate data in the tag database. A tag data viewer is a software application that exchanges data with the tag server to manipulate data in the tag database . The tag viewer provides software functions to identify particular assets in the storage system . These functions can include Internet browser like functions to select data stored on hypertext markup language HTML servers. Additionally functions to examine data assets in a database on a hard disk or on a collection of network servers may be included. For example a tag viewer can be used to browse directories graphically in a hierarchical file system. Once a user has identified a data asset using the tag viewer the asset can be associated with tag data. The tag viewer may query the tag server to identify tags that can be associated with the identified asset present the identified tags to a user allow a user to select tags and facilitate the creation of new tags and tag interrelations.

A tag semantic network can be implemented using various data structuring techniques. In the embodiment described below the tag semantic network is implemented using multiple tables stored in a relational database. As shown in in an exemplary relational database implementation the tag model uses the following database tables Asset Refs Concepts Concept Instances Concept Refinements Relations Relation Refinements Associations Strings Numbers Dates . The tables in correspond to the examples in A and .

As shown in asset references can be stored in the Asset Refs database table . Each row of the table encodes a separate asset reference. An encoded asset reference includes for example a URI Uniform Resource Identifier or other data identifying how the asset is accessed. Each asset reference may also include format information to indicates the type of stored asset. For example the format identification information can be used to indicate that the stored asset is a text file or an Adobe Photoshop file. Each asset reference may also include an identification number that uniquely identifies the asset reference. The identification number may be used in other tag model database tables to identify the asset reference.

As shown in concept definitions can be stored in the Concepts table . For each concept in the tag model the table includes a row having a unique numerical identification the concept s unique name and an indication of whether the concept is anonymous. For example the product concept is stored as the unique name string Product and the unique identification number . The identification number is a mechanism used to refer indirectly to the concept definition in other tag model database tables. In alternative implementations the unique concept name a memory pointer or other identifier may also be used to refer to a concept. Concept instances can be stored in the Concept Instances table . Each row of the Concept Instances table includes a unique instance identification number and the identification number of the concept to which the instance refers.

Concept refinements can be stored in the Concept Refinements table . The Concept Refinements table defines the hierarchical relationships among concepts in the Concepts table . In the table concepts are identified by the concept identification numbers defined in table . Each row of the Concept Refinements table defines a relationship between an ancestor concept and a descendent concept ancestor descendent relationships include parent child relationships in which there is a direct relationship between the ancestor and the descendent and also include relationships in which the ancestor and descendent are separated by multiple hierarchical levels . Multiple child concepts can be directly connected to a common parent concept thereby forming subdivisions of the parent conceit. For example rows form the hierarchical concept relationship . Multiple parent concepts can be directly connected to a common descendent concept not shown . The Concept Refinements table may also indicate indirect relationships in the concept hierarchy. For example row of table indicates that the Illustrator concept is a descendent of the Product concept. However since the Illustrator concept is at a minimum distance of 2 from the Product concept the Product concept is not a parent ancestor of the Illustrator concept. Indirect relationships can be used to optimize search functions by allowing ancestor descendent relationships to be determined without traversing a concept hierarchy at search time. The distance between concepts need not be included in the Concept Refinements table if only parent child relations i.e. direct relations between ancestor and descendent concepts are represented.

As shown in relations can be stored in the Relations table . For each relation in the tag model the table includes a row having a unique numerical identification and the relation s unique name. For example the Title Relation is stored in row which includes the relation name Title and the identification number 276 . Relation identification numbers are used to refer indirectly to the relation in other tag model database tables. In alternative implementations the unique relation name a memory pointer or other identifier may also be used to refer to the relation.

Relation refinements can be stored in the Relation Refinements table . The Relation Refinements table defines the hierarchical relationship among relations in the Relations table . Each row of the table defines a relationship between an ancestor Relation and a descendent Relation. Multiple descendent Relations can have a common ancestor Relation thereby forming subdivisions of the ancestor Relation. For example rows form the Relation hierarchy . Like the Concept Refinements table the Relation Refinements table may in various implementations indicate indirect relationships by including for example indirect relations and minimum distance data.

As shown in primitives can be stored in tables . The tables store respectively string primitives numeric primitives and date primitives. Each row of primitive tables includes an identification number and the value of the primitive. The identification number may be used as the target of an association. An implementation may also include additional tables or language type identification information stored along with data representing other primitive elements.

As shown in the Associations table can store associations between source and target concepts instances asset references and primitive values. Each row of the table defines an association between a source and a target. Additionally each row of the table includes a source type identifier and a target type identifier. For example the type identifiers A C I S N D are used to designate asset references concepts concept instances string primitive elements numeric primitive elements and date primitive elements respectively. The use of source and target type identifiers in the table facilitates determination of the source s or target s definition table . Additionally for each named association the table includes the numeric identifier corresponding to a relation defined in table . In the case of About associations a Relation is not designated. The table further includes a column Is A Detail indicating whether a particular named association is a detail association. In various implementations various association type A C I S N D may be stored in a separate table as may detail associations.

The encoding of the tag model allows complex queries to be generated. For example the target of a search can include enumerations of concepts relations or primitive values string regular expressions and ranges of values. Additionally searching and manipulation of tag model data can be performed using conventional database query languages. For example in a relational database implementation supporting the structured query language SQL and having database tables such as those illustrated in through a user query for documents about computer hardware authored by Simons may be translated into the structured query language SQL query of Table 1 to retrieve relevant asset references.

The interface to the tag model database can be a graphical user interface GUI . In a GUI implementation such as that provided by the Apple MacOS operating system or the Microsoft Windows 95 operating system search queries can be entered using graphical interface elements such choice lists push buttons check boxes and text entry dialog boxes. Such graphical interface elements may provide an interface to a search query generation routine. For example a GUI may present a list of concept elements which can be selected to define a search query. The selected concept elements can then be used by a query generation routine to generate SQL or other query code and thereby to interact with the tag model database. Additionally the GUI interface can contain interface functionality to input concept element names input relation element names manipulate hierarchies of concepts and relations define asset references and define interconnections between such elements. In non GUI implementations these functions may be performed by inputting text and commands using a keyboard in response to computer system prompts. In a program to program implementation the interface to the tag model database may be an application programming interface accessible to other software programs. For example a program may use the tag model database to logically structure and organize data associated with the internal operation of the first program. Such data may be hidden from a human user of the first program.

In some implementations the all or part of the storage system and tag database can be on the same storage media while in other implementations the tag database is stored separate from the asset database and may be distributed across a network of storage servers. Additionally the tag database server can be a software process executing on a dedicated server computer or in some implementations all or part of the server can be a software process executed at the computer along with various user applications. Furthermore the tag database may include predefined tag elements. For example a tag database having predefined concepts relations and details describing various work and leisure activities may be provided.

The invention may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Apparatus of the invention may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the invention may be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention may advantageously be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. Each computer program may be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language may be a compiled or interpreted language. Suitable processors include by way of example both general and special purpose microprocessors. Generally a processor will receive instructions and data from a read only memory and or a random access memory. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing may be supplemented by or incorporated in specially designed ASICs application specific integrated circuits .

