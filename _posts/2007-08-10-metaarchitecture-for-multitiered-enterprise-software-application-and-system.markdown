---

title: Meta-architecture for multi-tiered enterprise software application and system
abstract: A method for dynamic manipulation of a multi-tiered enterprise software application comprises providing a meta-architecture in a presentation tier of a multi-tiered enterprise software application. The meta-architecture comprises at least screen content associated with the software application. The meta-architecture is capable of tying at least two tiers of the multi-tiered enterprise software application together, and allowing the dynamic manipulation of the multi-tiered enterprise software application without at least one of reprogramming the multi-tiered enterprise software application and recompiling source code for the multi-tiered enterprise software application. The method concludes by storing the meta-architecture in a database repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185915&OS=08185915&RS=08185915
owner: Computer Associates Think, Inc.
number: 08185915
owner_city: Islandia
owner_country: US
publication_date: 20070810
---
This invention relates generally to information handling systems and more particularly to a meta architecture for multi tiered enterprise software application.

Conventional database management systems DBMS contain system tables that hold object definitions for tables fields indexes and the like. However the scope of the conventional object definitions does not expand beyond the database tier. Moreover the conventional database management systems DBMS do not conceal the proprietary language and syntax of any database management systems DBMS utilized as a backend repository.

Examples of problems with conventional architectures for conventional database management systems DBMS include relationship types and relationship examples. For example concerning relationship types conventional system tables do a good job of storing information about tables fields and indexes and the like. This information has proven beneficial when developing the application programming interface API tier and graphic user interface GUI tier. There are some limitations however when it comes to information about the classes and attributes in the application programming interface API tier and how the classes and attributes relate to tables and fields in the database DB tier. For example there are two relationships between database DB objects and application programming interface API objects currently modeled in a conventional architecture. The first relationship is the link between a class and the table the class represents. The second relationship is the link between an attribute and the field the attribute represents. Storing the class and attribute values in a field record indicates that these class table and attribute field relationships are one to one when in reality the relationships are many to one. Similar concerns exist for relationship examples.

In accordance with the present invention the disadvantages and problems associated with traditional systems have been substantially reduced or eliminated.

According to various illustrative embodiments of the present invention a method for dynamic manipulation of a multi tiered enterprise software application comprises providing a meta architecture in a presentation tier of a multi tiered enterprise software application. The meta architecture comprises at least screen content associated with the software application. The meta architecture is capable of tying at least two tiers of the multi tiered enterprise software application together and allowing the dynamic manipulation of the multi tiered enterprise software application without at least one of reprogramming the multi tiered enterprise software application and recompiling source code for the multi tiered enterprise software application. The method further comprises storing the meta architecture in a database repository.

The invention has several important technical advantages. Various embodiments of the invention may have none some or all of these advantages. The system and method disclosed herein are advantageous in providing business applications that provides dynamic manipulation of a multi tiered enterprise software application without the need for reprogramming and or recompiling source code. The system and method disclosed herein are further advantageous in providing a scope of the object definitions that expands beyond the database tier. The system and method disclosed herein are also advantageous in providing object definitions that conceal the proprietary language and syntax of any database management systems DBMS utilized as a backend repository.

The system and method disclosed herein are still further advantageous in improving the performance of business critical applications and hence in improving the user and or customer experience. Other technical advantages will be apparent to those of ordinary skill in the art having the benefit of the present disclosure and in view of the following specification claims and drawings.

The information processing system may comprise an extensible markup language XML type definition and or screen definition component and an extensible markup language XML criteria definition component . The information processing system may also comprise an engine repository comprising at least one structured query language SQL engine at least one business rules engine and at least one reconciliation engine .

The master structure system may comprise an extensible markup language XML master type structure component and an extensible markup language XML master schema structure component . The extensible markup language XML master type structure component may comprise master type structure information relating to types classes and properties. The extensible markup language XML master schema structure component may comprise master schema structure information relating to tables fields and joins.

In various illustrative embodiments the customer application programming interface API may request lookups from the information processing system and or may receive results from the information processing system as indicated at . Similarly the web interface may request lookups from the information processing system and or may receive lookup requests from the information processing system as indicated at . Likewise the future interface may request lookups from the information processing system and or may receive lookup requests from the information processing system as indicated at .

In various illustrative embodiments within the information processing system the extensible markup language XML type definition and or screen definition component and the extensible markup language XML criteria definition component may combine properties and criteria values and send the combination of the properties and criteria values to the engine repository as indicated at . The engine repository may return data to either the extensible markup language XML type definition and or screen definition component and or the extensible markup language XML criteria definition component as indicated at for example.

In various illustrative embodiments the engine repository of the information processing system may send property names to the extensible markup language XML master type structure component of the master structure system as indicated at . Similarly the information processing system may receive field names from the extensible markup language XML master schema structure component of the master structure system as indicated at . Within the master structure system the extensible markup language XML master type structure component may send links to tables and or fields to the extensible markup language XML master schema structure component as indicated at .

In various illustrative embodiments the engine repository of the information processing system may communicate with the database DB by executing structured query language SQL statements as indicated at . In various particular illustrative embodiments the structured query language SQL engine of the engine repository of the information processing system may communicate with the database DB by executing structured query language SQL statements as indicated at .

In various illustrative embodiments as shown in a method for dynamic manipulation of a multi tiered enterprise software application may be provided. The method may comprise providing a meta architecture comprising a set of data describing a plurality of entities in at least one tier of the multi tiered enterprise software application and a corresponding plurality of relationships between the plurality of the entities in the at least one tier of the multi tiered enterprise software application the meta architecture capable of tying at least two tiers of the multi tiered enterprise software application together allowing the dynamic manipulation of the multi tiered enterprise software application without at least one of reprogramming the multi tiered enterprise software application and recompiling source code for the multi tiered enterprise software application as indicated at . The method may also comprise storing the meta architecture in a database repository as indicated at .

In various illustrative embodiments methods and systems according to the present disclosure enable business applications that provides dynamic manipulation of a multi tiered enterprise software application without the need for reprogramming and or recompiling source code. In addition in various illustrative embodiments one or more of the following may be provided 1 Support for Screen Painter that has the ability to add change remove screen elements and functionality 2 Dynamic Database DB Extension that has the ability to add remove tables to the database DB in order to extend the application s business value for specific customer requirements with total transparency of the underlying database DB functions involved and or 3 Dynamic Application Extension that has the ability to extend the software application with data contained in other product s tables and or customer created tables without code modifications.

In various illustrative embodiments a method and a system for dynamic manipulation of a multi tiered enterprise software application are provided. The method may comprise providing a meta architecture comprising a set of data describing a plurality of entities in at least one tier of the multi tiered enterprise software application and a corresponding plurality of relationships between the plurality of the entities in the at least one tier of the multi tiered enterprise software application. The meta architecture may be capable of tying at least two tiers of the multi tiered enterprise software application together allowing the dynamic manipulation of the multi tiered enterprise software application without reprogramming the multi tiered enterprise software application and or recompiling source code for the multi tiered enterprise software application. The meta architecture may shield an end user from the complexities of details of an application customization while preserving functional capabilities of the application customization.

In various illustrative embodiments the method may also comprise storing the meta architecture in a database repository. The meta architecture may offer a centralized location for architecture administration and or customization between a plurality of products sharing the database repository. The meta architecture may be data driven and hence may allow seamless integration of customizations to one or more other instances of the multi tiered enterprise software application.

In various illustrative embodiments providing the meta architecture comprising the set of the data describing the plurality of the entities in at least one tier of the multi tiered enterprise software application and the corresponding plurality of the relationships between the plurality of the entities in at least one tier of the multi tiered enterprise software application may further comprise providing the meta architecture comprising the set of the data describing screen content and functionality in a presentation tier of the multi tiered enterprise software application.

In various illustrative embodiments systems and methods according to the present disclosure may improve upon conventional database management systems DBMS that contain system tables that hold object definitions for tables fields indexes and the like because various illustrative embodiments of the systems and methods according to the present disclosure may expand the scope of the object definitions beyond the database tier and may conceal the proprietary language and or syntax of any database management systems DBMS utilized as a backend database repository. In various illustrative embodiments table and field definitions in the meta architecture for example may contain attributes relevant to the business application tier and or the presentation tier. The meta architecture may also contain object definitions for non database management system non DBMS objects such as classes and or attributes from the business application tier.

In various illustrative embodiments the meta architecture may be a set of data that describes the various entities and relationships between entities in the tiers of a software application. For example at the database tier the meta architecture may describe tables columns indexes and joins. At the business application tier the meta architecture may describe classes and attributes. At the presentation tier the meta architecture may describe screen content and functionality. The meta architecture may also tie the tiers together for example describing how classes and or attributes may relate to tables and or columns and or how screens and or fields may relate to classes and or attributes. This may allow for the dynamic manipulation of the software application in question without the need for reprogramming and or recompiling source code.

The meta architecture may shield the end user from the complexities of application customization details while at the same preserving the functional capabilities of such customizations.

Examples of enhancements in new architectures for various illustrative embodiments include join definitions view definitions class and attribute definitions and subclass definitions. For example concerning join definitions in addition to storing information about the database DB tier the system tables also store information for the joins between tables. Having join information is useful when trying to navigate the database DB structure for lookups and or reporting. To support these goals the system tables may include join definitions that describe the join and list the fields and values that make up the join. It may also be useful to store a join value on the attribute definition of attributes that represent foreign key sibling classes and or dependent children classes. Having join information may allow the application programming interface API dynamically to navigate the database DB structure when working with these attributes.

Similarly concerning view definitions another database DB object that may be represented in the system definitions are views. Since a view acts like a virtual table the main view description may be stored in the table definition table. A separate table may store the list of fields that make up the view.

Likewise concerning class and attribute definitions to resolve the limitations of conventional architectures the system definition tables for classes and attributes may be used. These class and attribute definition tables may be able to link multiple times to the definition tables for tables and fields to represent adequately the many to one relationships between the two. A class definition may have a table attribute that links the class definition to the table that the class definition represents. An attribute definition may have a field attribute that links the attribute definition to the field that the attribute definition represents. Since a field may be used by more than one attribute the label value that may be stored with the field definition may be moved to the attribute definition.

Concerning subclass definitions for example classes may be used in different types of ways within the system. For example the attributes displayed on an asset lookup screen an asset lookup results list and an asset data screen may all differ from each other. For this reason it may be useful to define a subclass definition that describes the different uses of a class and the attributes of that class.

In various illustrative embodiments there may be three basic features that are particularly useful to users of methods and systems for dynamic manipulation of a multi tiered enterprise software application in accordance with the present disclosure the three basic features being 1 Search for Data to locate existing data 2 Enter Data to insert or update data and 3 Report on Data to report on existing data . The following describes how the system table meta architecture in various illustrative embodiments supports these features. For example the Search for Data may be supported by an Advanced Search feature the Enter Data may be supported by a Screen Painter feature and the Report on Data may be supported by an Application Reporter.

Concerning the Advanced Search for example a search feature that allows a user to lookup data may have two sub components. The first sub component of a search feature may be a list of selectable attributes for which criteria can be specified in order to limit the number of records returned by the search. If more than one record is returned the second sub component of a search feature may be a list of lookup results with identifying attributes that further assist the user in selecting a record.

The Advanced Search feature may derive several important benefits from the system table meta architecture in various illustrative embodiments. For example a subclass definition that defines an Asset Lookup type may be used to build the list of selectable attributes on the lookup criteria screen. Once attributes have been selected by the user for criteria selection the attribute definition information may be used as a lookup structured query language SQL statement that may be generated to change attributes names into field names and dynamically include joins if required for foreign key and or child classes. Finally another subclass definition that defines an Asset Lookup Result may be used to build the list of identifying fields that may assist the user in selecting a record.

The system table meta architecture in various illustrative embodiments may provide mappings between classes and attributes to a much greater extent and with more accurate detail than in conventional systems. Since join information may be hard coded in each of the applications in which the join information is required the system table meta architecture in various illustrative embodiments may also provide greater flexibility and or the ability to utilize all classes in Advanced Search.

Concerning the Screen Painter for example the data entry feature that may allow a user to update records may have several characteristics. First a data entry screen may typically have more attributes on the data entry screen than a lookup criteria screen and or a lookup results screen. Second specific field characteristics for each attribute such as data type popup and or format mask may determine the type and or style of control used for each attribute. Third a user may wish to customize certain screens by adding and or removing fields and or changing the labels of existing fields.

All of these characteristics may be supported by the system table meta architecture in various illustrative embodiments. A subclass definition for each screen may define which attributes appear on the screen. Linking from the attribute definition to the field definition may enable the retrieval of the field characteristics that might dictate changes to the screen controls. Allowing the modification of screen subclass definitions may allow for adding and or removing fields and changing the label value of an attribute may cause the screen labels to change.

Concerning the Application Reporter for example the reporting feature may allow a user to locate and summarize data within their system. The Application Reporter may be used as a reporting engine that creates a series of results tables that the user may use to write reports. The Application Reporter may be driven by an attribute file that may describe the database DB and all of the joins within the database DB .

The system table meta architecture may support the generation of the attribute file. The join definitions may provide the information that may be useful to link fields on foreign key and or dependent children tables. The subclass definitions may provide the list of fields that should be included in reporting results tables.

Further examples of enhancements in new architectures for various illustrative embodiments may include performance enhancements and database DB extendibility. Concerning the performance enhancements for example the benefits to the Advanced Search feature may include the ability to turn class and attribute names into table and field names which can then be used dynamically to build structured query language SQL statements with all required joins. The system table meta architecture may provide the mappings between classes and attributes to a much greater and more accurate detail than is done conventionally. The system table meta architecture may also provide join information which does not exist in conventional systems and which is conventionally hard coded in each of the applications in which the join information is required.

The benefits from a performance perspective may include the opportunity to remove hard coded lists of attribute names hard coded joins and structured query language SQL statements in lookups and hard coded exceptions to attributes. If enough data is entered into the design of the system tables many pieces may be modified to be dynamically data driven. With the merging of existing control specific records in the security tables with the comprehensive data stored in the system table meta architecture less processing may be used for security administration resulting in better performance.

Concerning the database DB extendibility for example the system table meta architecture may work with and provide for database DB extendibility. As the user creates new classes and attributes records may be inserted into the system tables and database DB tables may be created. Since the extended records may be part of the same system definitions all features built on the system tables may automatically be able to use the extended tables and may not have to do special processing to navigate to extended data.

Although the present invention has been described in detail it should be understood the various changes substitutions and alterations can be made hereto without departing from the scope of the invention as defined by the appended claims.

