---

title: Generalized WBEM/CIM indication provider simulation engine
abstract: A simulator of WBEM/CIM indication providers conforming to the CIM Indication Provider object specification simulates both the CIM indication provider and the means to drive the associated CIM events. The simulator comprises three functionally unique pieces: one or more CIM indication provider drivers, one or more CIM event trigger drivers, and a control application. This modularization creates flexibility in configuring the simulator to stress test different aspects of an operating system's underlying support for CIM indications. Modularization also makes the simulator design operating system independent. Provision is made in the simulation for generation of additional CIM events as background activity on the operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945918&OS=07945918&RS=07945918
owner: International Business Machines Corporation
number: 07945918
owner_city: Armonk
owner_country: US
publication_date: 20070629
---
This invention relates to a method and apparatus for simulating an indication provider especially a WBEM CIM indication provider for the purpose of testing a computer operating system s underlying support for such indication providers.

The Common Information Model CIM is an open standard that according to its promulgator the Distributed Management Task Force DMTF provides a common definition of management information for systems networks applications and services and allows for vendor extensions its common definitions enable vendors to exchange semantically rich management information between systems throughout the network . CIM has been developed in conjunction with Web Based Enterprise Management WBEM characterized by the same promulgator as a set of management and Internet standard technologies developed to unify the management of distributed computing environments WBEM provides the ability for the industry to deliver a well integrated set of standard based management tools facilitating the exchange of data across otherwise disparate technologies and platforms . Current versions of CIM and WBEM are well known in the art and are described on Web pages published by DMTF. The basic relationship between the two standards is that CIM provides underlying support for WBEM.

WBEM and CIM have the notion of indication providers . An indication provider is a mechanism implemented in software that allows an end user or controlling program to monitor for the occurrence of CIM event s of interest on a target computer system and to be notified when the event has occurred. In the WBEM architecture the end user or controlling program is operating system independent at a source code or application programming interface API level while the indication provider is operating system dependent. In addition the end user or controlling program may be executing on the target operating system or on a remote system.

As depicted in the CIM indication provider on the target operating system makes use of the underlying operating system specific support to detect the occurrence of an actual CIM event. Some currently available CIM testing tools do allow for functional validation of CIM indication providers and the underlying operating system support . They typically do this by simulating an end user or controlling program as shown in . Because of this approach they are lacking in their ability to easily drive high levels of stress on the underlying operating system specific indication provider support . Such stress testing is desired in a software system level test as it uncovers a different class of problems than is exposed by functional level testing that focuses on coverage of all code paths.

In general the present invention contemplates a method and apparatus for simulating an indication provider to test operating system support functionality therefor as defined in the appended independent claims. Preferred embodiments thereof are defined in the subclaims. The invention is preferably implemented as a software program more particularly a computer program product stored on a computer usable medium comprising computer readable program means for causing a computer to perform the invention.

More particularly the present invention contemplates an indication provider simulator preferably a CIM indication provider simulator CIPS that combines a platform independent control application with small replaceable platform dependent drivers of the underlying operating system indication provider support. The control application contains functionality to support the concepts e.g. WBEM CIM concepts basic to indication providers on any operating system platform.

Preferably the platform dependent drivers are divided into two sets. The first set of drivers consists of drivers associated with operating system specific application programming interfaces APIs that monitor for CIM events. These APIs are used in a manner consistent with a real CIM indication provider object so that the underlying operating system indication provider support is exercised in a manner consistent with a real world usage.

The second set of drivers consists of drivers associated with causing the system activity needed to trigger a CIM event. The amount of stress on the operating system s indication provider infrastructure is a function of the rate of triggering related system events. This trigger rate is dynamically controllable by the end user of the simulator of the present invention.

Dividing the operating system dependent drivers into two parts allows for multiple instances of simulators to cooperate in a test to allow additional control over the amount of stress placed on the target operating system indication provider support.

Furthermore the simulator of the present invention is able to generate additional CIM event triggers that are not being monitored for by any CIM indication provider. This tests the underlying operating system indication provider support s ability to filter only events of interest.

Simulator tests the operating system indication provider support by allowing that support to be isolated from the overall WBEM CIM architecture elements and in and driven directly. This is accomplished by dividing the simulator into three subcomponents as depicted in . Referring to that figure the simulator comprises one or more CIM indication provider drivers one or more CIM event trigger drivers and a control application .

Such an arrangement provides the following advantages. The control application is platform independent like the end user or controlling program at a source code or API level and can be used to test various operating systems besides the target operating system . This is especially important as WBEM is intended to be a platform independent architecture. The rate of stress on the target operating system is dynamically determined by the tester via control of the rate of triggering events as described below. Dividing the operating system dependent drivers into two sets and allows for multiple instances of the simulator to cooperate in a test with the intent of allowing additional control over the amount of stress placed on the target operating system.

Tables 1 2 and 3 describe the set of functions implemented by each of the three simulator subcomponents.

The CIM indication provider drivers respond to requests for the functions related to monitoring for CIM events that are listed in Table 1. These functions map directly to the required methods of a CIM indication provider as described by Open Pegasus CIM Indication Provider object specification. Background information on these functions may be found in the document entitled PEGASUS Public APIs version 1.01 Oct. 30 2003 Pegasus 2.3 especially the page for the class CIMIndicationProvider available online from the Web site of The Open Group and incorporated herein by reference.

Because the indication provider driver conforms to the Open Pegasus CIM Indication Provider object specification it is feasible that an existing CIM indication provider object could be used directly as a CIPS indication provider driver. In practice it is preferable that a specific driver be written for this purpose that is more generic in nature than an existing CIM indication provider.

Each function calls the operating system API or APIs that are appropriate to accomplish the intended functionality. It is important to note that a particular operating system may or may not provide APIs that correspond to these functions on a one to one basis. For instance the z OS operating system requires a connect function prior to the first subscribe request. Also it does not have an API that allows modification of an existing event. 

The CIM event trigger drivers respond to requests for the functions listed in Table 2 related to triggering a specific CIM event. Each function calls the operating system API or APIs that are appropriate to accomplish the intended functionality. As in the case of the indication provider drivers the operating system may or may not provide APIs that correspond to these functions on a one to one basis. This applies especially to the generate and monitor functions. The validate function is called directly by the simulator in response to a receive of CIM indication data and should preferably always be implemented.

The CIPS control application provides a central point of control for the indication provider drivers and event trigger drivers . One possible set of end user controls are listed in Table 3. These controls would typically but not necessarily be implemented as commands. Any suitable means may be used to enter these commands such as a UNIX command line.

Most of the commands listed in Table 3 correspond directly to driving the functions defined for the CIM indication provider drivers and the CIM event trigger driver . Two exceptions should be noted. The noise and unnoise commands are provided to control triggering events for which the simulator is not subscribed. This is useful in testing the ability of the operating system indication provider support to filter only events of interest. The statistics command allows for collection and reporting of data related to a specific event.

Next the OS indication provider function detects the event and determines that the simulator is subscribed. It passes information about the event to the monitor interface of the event trigger driver . The monitor then returns to the OS indication provider function which passes the event information to the waiting receive function in the control application .

The final step is to pass the received event information to validate by invoking the validate function of the event trigger driver to be checked for accuracy.

The amount of stress on the OS indication provider support is determined by the number and rate of different events being driven by the simulator .

The command set for the simulator allows it to utilize only the functions of the indication provider drivers only the functions of the CIM event trigger drivers or the functions of both drivers and together. This allows the simulator to run in several configurations as shown in . The different configurations allow for stressing different facets of the operation system s indication provider infrastructure as shown in the examples described below.

In a single simulator instance similar to simulator in is configured to utilize both its indication provider drivers and its event trigger drivers . In this configuration instance simulates a single indication provider listening for one or more types of events. It is a balanced test in that the occurrence of one CIM event results in an event notification being delivered to a single indication provider.

In three simulator instances each of which is similar to simulator in are used to simulate multiple indication providers listening for a single type of CIM event. The first simulator instance is configured to utilize only its event trigger drivers while the other two simulator instances and are configured to utilize only their indication provider drivers .

In only the CIM event trigger driver of a single simulator similar to simulator in is used. In this configuration the event listener is a real CIM indication provider hosted on a CIM Object Manager CIMOM server . CIMOM server may be either on the same or a different system than the target operating system .

While particular embodiments have been shown and described it will be apparent to those skilled in the art that various modifications may be made without departing from the invention as defined in the appended claims. Thus while the invention has been described in the environment of the IBM z OS operating system running on an IBM System z server the invention is not limited to any particular hardware software platform. Further while the invention has been described in the context of a WBEM CIM environment in its broadest aspects it is not necessarily so limited. Still other variations and modification will be apparent to those skilled in the art.

