---

title: Programmable intelligent search memory
abstract: Memory architecture provides capabilities for high performance content search. The architecture creates an innovative memory that can be programmed with content search rules which are used by the memory to evaluate presented content for matching with the programmed rules. When the content being searched matches any of the rules programmed in the Programmable Intelligent Search Memory (PRISM) action(s) associated with the matched rule(s) are taken. Content search rules comprise of regular expressions which are converted to finite state automata and then programmed in PRISM for evaluating content with the search rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07899977&OS=07899977&RS=07899977
owner: 
number: 07899977
owner_city: 
owner_country: 
publication_date: 20071206
---
Priority is claimed to Provisional Application Ser. No. 60 965 267 filed on Aug. 17 2007 entitled Embedded programmable intelligent search memory Provisional Application Ser. No. 60 965 170 filed on Aug. 17 2007 entitled 100 Gbps security and search architecture using programmable intelligent search memory Provisional Application Ser. No. 60 963 059 filed on Aug. 1 2007 entitled Signature search architecture for programmable intelligent search memory Provisional Application Ser. No. 60 961 596 filed on Jul. 23 2007 entitled Interval symbol architecture for programmable intelligent search memory Provisional Application Ser. No. 60 933 313 filed on Jun. 6 2007 entitled FSA context switch architecture for programmable intelligent search memory Provisional Application Ser. No. 60 933 332 filed on Jun. 6 2007 entitled FSA extension architecture for programmable intelligent search memory Provisional Application Ser. No. 60 930 607 filed on May 17 2007 entitled Compiler for programmable intelligent search memory Provisional Application Ser. No. 60 928 883 filed on May 10 2007 entitled Complex symbol evaluation for programmable intelligent search memory Provisional Application Ser. No. 60 873 632 filed on Dec. 8 2006 entitled Programmable intelligent search memory Provisional Application Ser. No. 60 873 889 filed on Dec. 8 2006 entitled Dynamic programmable intelligent search memory which are all incorporated herein by reference in their entirety as if fully set forth herein.

Priority is also claimed to U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Embedded programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled 100 Gbps security and search architecture using programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Signature search architecture for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Interval symbol architecture for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled FSA context switch architecture for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled FSA extension architecture for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Compiler for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Complex symbol evaluation for programmable intelligent search memory U.S. patent application number not yet assigned filed on Dec. 6 2007 entitled Dynamic programmable intelligent search memory which are all co pending U.S. patent applications of common ownership.

This invention relates generally to memory technology and in particular to a new high performance intelligent content search memory.

Many modern applications depend on fast information search and retrieval. With the advent of the world wide web and the phenomenal growth in its usage content search has become a critical capability. A large number of servers get deployed in web search applications due to the performance limitations of the state of the art microprocessors for regular expression driven search.

There have been significant research and development resources devoted to the topic of searching of lexical information or patterns in strings. Regular expressions have been used extensively since the mid 1950s to describe the patterns in strings for content search lexical analysis information retrieval systems and the like. Regular expressions were first studied by S. C. Kleene in mid 1950s to describe the events of nervous activity. It is well understood in the industry that regular expression RE can also be represented using finite state automata FSA . Non deterministic FSA NFA and deterministic FSA DFA are two types of FSAs that have been used extensively over the history of computing. Rabin and Scott were the first to show the equivalence of DFA and NFA as far as their ability to recognize languages in 1959. In general a significant body of research exists on regular expressions. Theory of regular expressions can be found in Introduction to Automata Theory Languages and Computation by Hopcroft and Ullman and a significant discussion of the topics can also be found in book Compilers Principles Techniques and Tools by Aho Sethi and Ullman.

Computers are increasingly networked within enterprises and around the world. These networked computers are changing the paradigm of information management and security. Vast amount of information including highly confidential personal and sensitive information is now being generated accessed and stored over the network. This information needs to be protected from unauthorized access. Further there is a continuous onslaught of spam viruses and other inappropriate content on the users through email web access instant messaging web download and other means resulting in significant loss of productivity and resources.

Enterprise and service provider networks are rapidly evolving from 10 100 Mbps line rates to 1 Gbps 10 Gbps and higher line rates. Traditional model of perimeter security to protect information systems pose many issues due to the blurring boundary of an organization s perimeter. Today as employees contractors remote users partners and customers require access to enterprise networks from outside a perimeter security model is inadequate. This usage model poses serious security vulnerabilities to critical information and computing resources for these organizations. Thus the traditional model of perimeter security has to be bolstered with security at the core of the network. Further the convergence of new sources of threats and high line rate networks is making software based perimeter security to stop the external and internal attacks inadequate. There is a clear need for enabling security processing in hardware inside core or end systems beside a perimeter security as one of the prominent means of security to thwart ever increasing security breaches and attacks.

FBI and other leading research institutions have reported in recent years that over 70 of intrusions in organizations have been internal. Hence a perimeter defense relying on protecting an organization from external attacks is not sufficient as discussed above. Organizations are also required to screen outbound traffic to prevent accidental or malicious disclosure of proprietary and confidential information as well as to prevent its network resources from being used to proliferate spam viruses worms and other malware. There is a clear need to inspect the data payloads of the network traffic to protect and secure an organization s network for inbound and outbound security.

Data transported using TCP IP or other protocols is processed at the source the destination or intermediate systems in the network or a combination thereof to provide data security or other services like secure sockets layer SSL for socket layer security Transport layer security encryption decryption RDMA RDMA security application layer security virtualization or higher application layer processing which may further involve application level protocol processing for example protocol processing for HTTP HTTPS XML SGML Secure XML other XML derivatives Telnet FTP IP Storage NFS CIFS DAFS and the like . Many of these processing tasks put a significant burden on the host processor that can have a direct impact on the performance of applications and the hardware system. Hence some of these tasks need to be accelerated using dedicated hardware for example SSL or TLS acceleration. As the usage of XML increases for web applications it is creating a significant performance burden on the host processor and can also benefit significantly from hardware acceleration. Detection of spam viruses and other inappropriate content require deep packet inspection and analysis. Such tasks can put huge processing burden on the host processor and can substantially lower network line rate. Hence deep packet content search and analysis hardware is also required.

Internet has become an essential tool for doing business at small to large organizations. HTML based static web is being transformed into a dynamic environment over last several years with deployment of XML based services. XML is becoming the lingua franca of the web and its usage is expected to increase substantially. XML is a descriptive language that offers many advantages by making the documents self describing for automated processing but is also known to cause huge performance overhead for best of class server processors. Decisions can be made by processing the intelligence embedded in XML documents to enable business to business transactions as well as other information exchange. However due to the performance overload on the best of class server processors from analyzing XML documents they cannot be used in systems that require network line rate XML processing to provide intelligent networking. There is a clear need for acceleration solutions for XML document parsing and content inspection at network line rates which are approaching 1 Gbps and 10 Gbps to realize the benefits of a dynamic web based on XML services.

Regular expressions can be used to represent the content search strings for a variety of applications like those discussed above. A set of regular expressions can then form a rule set for searching for a specific application and can be applied to any document file message packet or stream of data for examination of the same. Regular expressions are used in describing anti spam rules anti virus rules anti spyware rules anti phishing rules intrusion detection rules intrusion prevention rules extrusion detection rules extrusion prevention rules digital rights management rules legal compliance rules worm detection rules instant message inspection rules VOIP security rules XML document security and search constructs genetics proteomics XML based protocols like XMPP web search database search bioinformatics signature recognition speech recognition web indexing and the like. These expressions get converted into NFAs or DFAs for evaluation on a general purpose processor. However significant performance and storage limitations arise for each type of the representation. For example an N character regular expression can take up to the order of 2memory for the states of a DFA while the same for an NFA is in the order of N. On the other hand the performance for the DFA evaluation for an M byte input data stream is in the order of M memory accesses and the order of N M processor cycles for the NFA representation on modern microprocessors.

When the number of regular expressions increases the impact on the performance deteriorates as well. For example in an application like anti spam there may be hundreds of regular expression rules. These regular expressions can be evaluated on the server processors using individual NFAs or DFAs. It may also be possible to create a composite DFA to represent the rules. Assuming that there are X REs for an application then a DFA based representation of each individual RE would result up to the order of X 2 states however the evaluation time would grow up to the order of X N memory cycles. Generally due to the potential expansion in the number of states for a DFA they would need to be stored in off chip memories. Using a typical access time latency of main memory systems of 60 ns it would require about X 60 ns N M time to process an X RE DFA with N states over an M byte data stream. This can result in tens of Mbps performance for modest size of X N M. Such performance is obviously significantly below the needs of today s network line rates of 1 Gbps to 10 Gbps. On the other hand if a composite DFA is created it can result in an upper bound of storage in the order of 2 which may not be within physical limits of memory size for typical commercial computing systems even for a few hundred REs. Thus the upper bound in memory expansion for DFAs can be a significant issue. Then on the other hand NFAs are non deterministic in nature and can result in multiple state transitions that can happen simultaneously. NFAs can only be processed on a state of the art microprocessor in a scalar fashion resulting in multiple executions of the NFA for each of the enabled paths. X REs with N characters on average can be represented in the upper bound of X N states as NFAs. However each NFA would require M iterations for an M byte stream causing an upper bound of X N M processor cycles per loop . Assuming the number of processing cycles are in the order of 10 cycles then for a best of class processor at 4 GHz the processing time can be around X N M 2.5 ns which for a nominal N of 8 and X in tens can result in below 100 Mbps performance. There is a clear need to create high performance regular expression based content search acceleration which can provide the performance in line with the network rates which are going to 1 Gbps and 10 Gbps.

The methods for converting a regular expression to Thompson s NFA and DFA are well known. The resulting automata are able to distinguish whether a string belongs to the language defined by the regular expression however it is not very efficient to figure out if a specific sub expression of a regular expression is in a matching string or the extent of the string. Tagged NFAs enable such queries to be conducted efficiently without having to scan the matching string again. For a discussion on Tagged NFA refer to the paper NFAs with Tagged Transitions their Conversion to Deterministic Automata and Application to Regular Expressions by Ville Laurikari Helsinki University of Technology Finland.

US Patent Applications 20040059443 and 20050012521 describe a method and apparatus for efficient implementation and evaluation of state machines and programmable finite state automata using programmable registers and associated logic. These applications describe single chip regular expression processor that can support 1000 to 2000 finite state machines implemented in the state of the art 0.13 um to 90 nm process technology. These applications describe a state machine architecture where nodes of the state machine architecture are interconnected with each other using an interconnection network which forms an AND OR logic based on the current state received symbol and state transition connectivity control. However for basic operations the apparatus and the method described in these applications becomes virtually inoperable in the event of input stream containing a symbol not recognized by the regular expression. For instance if the finite state machine receives a symbol which is not in the set of symbols that are programmed for it to recognize the finite state machine can enter into a condition where all the states are inactive or disabled and from that point forward the state machine stays in that state and does not recognize any symbols that are even part of the defined symbols. For example if a finite state machine is programmed to search for a string sequence help then the machine may get programmed with h e l p as the symbols of the state machine. The state machine gets initialized in a start state that may optionally be provided using the start state control. However if the input stream being searched includes a symbol other than those programmed the state machine described in these applications reach a state where all nodes of the state machine become inactive and stay inactive until they are re initialized at startup of the finite state machine apparatus. For example if the input string received is henk will help you then the finite state machine of these applications will reach an inactive state on processing the symbol n third character of the phrase henk will help you and then will not recognize the help string that follows later. Thus these applications are virtually inoperable for regular expression matching as described. Beside this the number of regular expressions that can be implemented and supported in the state of the art process technology using these methods are small compared to the needs of the applications as described below.

There is a class of applications like routing access control policy based processing and the like in the field of networking that require a special class of content search which amounts to looking up a set of data stored in the memory and detecting whether the data set contains data being searched. The data being searched may be an Internet Protocol IP address in a router or switch s forwarding database which can be hundreds of thousand entries. Since the speeds at which these searches have to be done to support high line rates like 1 Gbps 10 Gbps and beyond the traditional method of trie based searches is very time inefficient. For these types of applications that require rapid lookup of data among a large database a class of memory called Content Addressable Memory CAM has been used. CAMs have been used in high speed networking for a long time. The CAM architectures essentially compare incoming data with all data that is stored in the CAM simultaneously and deliver an indication of match or no match and the location of the match. However these devices can only search for a fixed set of string of characters and are not well suited for regular expression searches. For example a regular expression like a b which states to find a string of zero or more occurrences of character a followed by character b cannot be adequately represented in a CAM or would occupy a large number of entries and it becomes impractical for a set of regular expressions with any more complexity. Thus CAMs generally get used for searching for fixed patterns typically network packet headers and are not suited for regular expressions search. However the systems that use CAMs like unified threat management devices or routers or switches or gateways or the like that provide content based intelligent applications like upper layer security have a clear need for high speed deep packet inspection or content search which involves a large number of rich regular expressions.

I describe a high performance Programmable Intelligent Search Memory PRISM for searching content with regular expressions as well as other pattern searches. The high performance programmable intelligent content search memory can have myriad of uses wherever any type of content needs to be searched for example in networking storage security web search applications XML processing bio informatics signature recognition genetics proteomics speech recognition database search enterprise search and the like. The programmable intelligent search memory of my invention may be embodied as independent PRISM memory integrated circuits working with or may also be embodied within microprocessors multi core processors network processors TCP Offload Engines network packet classification engines protocol processors regular expression processors content search processors network search engines content addressable memories mainframe computers grid computers servers workstations personal computers laptops notebook computers PDAs handheld devices cellular phones wired or wireless networked devices switches routers gateways unified threat management devices firewalls VPNs intrusion detection and prevention systems extrusion detection systems compliance management systems wearable computers data warehouses storage area network devices storage systems data vaults chipsets and the like or their derivatives or any combination thereof.

Content search applications require lot more regular expressions to be searched than those that can fit on state of the art regular expression processor like those described by the applications 20040059443 and 20050012521. For example a very popular open source intrusion detection and prevention technology SNORT uses around 3500 to 5000 regular expressions. This is only one of the security applications that unified security threat management devices routers servers and the like support. These applications modestly need support for well over 10 000 regular expressions. However as the security threats continue to grow the number of regular expressions needed for just these applications may rise substantially. Applications like gene database searches or web search applications like Google and others require orders of magnitude more regular expressions support than what can be supported by the state of the art regular expression processors.

Thus there is a clear need to for a solution that can support orders of magnitude larger number of regular expressions in a single chip for current and emerging content search applications. My invention describes such architectures methods and apparatuses that can meet the needs of current and future applications for intelligent content search.

I describe programmable intelligent search memory in this invention unlike a regular expression processor of the patent applications above that overcomes the issues described above. I also show search memory architecture for performing a large number of regular expression searches at high line rates. I also show how my search memory architecture can be configured to behave like content addressable memory which can be very advantageous in applications that require a combination of searches that may be done using CAMs and deep packet content searches requiring regular expression search. I describe a content search memory which performs content search using regular expressions represented as left biased or right biased NFAs. My invention also provides capabilities to support Tagged NFA implementations. My invention also shows how content search memory can be used to provide application acceleration through search application programmer interface and the search memory of this invention. For clarity as used in this patent the terms programmable intelligent search memory search memory content search memory or PRISM memory are used interchangeably and have the same meaning unless specifically noted. Further for clarity as used in this patent the term memory when used independently is used to refer to random access memory or RAM or Dynamic RAM DRAM or DDR or QDR or RLDRAM or RDRAM or FCRAM or Static RAM SRAM or read only memory ROM or FLASH or cache memory or the like or any future derivatives of such memories.

The regular expressions may optionally be tagged to detect sub expression matches beside the full regular expression match. The regular expressions are converted into equivalent FSAs that may optionally be NFAs and may optionally be converted into tagged NFAs. The PRISM memory also optionally provides ternary content addressable memory functionality. So fixed string searches may optionally be programmed into the PRISM memory of my invention. PRISM memory of this invention enables a very efficient and compact realization of intelligent content search using FSA to meet the needs of current and emerging content search applications. Unlike a regular expression processor based approach the PRISM memory can support tens of thousands to hundreds of thousands of content search rules defined as regular expressions as well as patterns of strings of characters.

The PRISM memory performs simultaneous search of regular expressions and other patterns also referred to as rules or regular expression rules or pattern search rules or patterns or regular expressions in this patent against the content being examined. The content may be presented to the search memory by a companion processor or PRISM controller or content stream logic or a master processor or the like which may be on the same integrated circuit chip as the PRISM memory or may be on a separate device. The content to be searched may be streaming content or network packets or data from a master processor or data from a disk or a file or reside in on chip memory or off chip memory or buffers or the like from which a controller may present it to the search memory arrays for examination. The content search memory arrays may initially be configured with the regular expression rules converted into NFAs or tagged NFAs and optionally other pattern search rules. PRISM memory may optionally comprise of configuration control logic which may be distributed or central or a combination thereof. The configuration control logic may optionally address PRISM memory cells to read and or write FSA rules or other patterns to be searched. Once the PRISM memory is setup with all the related information about the NFAs and other rules the content to be examined can be presented to the PRISM memory. PRISM memory provides capabilities to update rules or program new rules or additional rules in line with the content examination within a few clock cycles unlike the current regular expression processors which require the content evaluation to stop for long periods of time until large tables of composite DFAs are updated in an external or internal memory. Typically the content is presented as a stream of characters or symbols which get examined against the rules in the PRISM memory simultaneously and whenever a rule is matched the PRISM memory array provides that indication as a rule match signal which is interpreted by the control logic of the PRISM. There may be multiple rule matches simultaneously in which case a priority encoder which may also be programmable is used to select one or more matches as the winner s . The priority encoder may then provide a tag or an address or an action or a combination that may have already been programmed in the priority encoder which may be used to look up related data from associated on chip or off chip memory that may optionally determine the next set of actions that may need to be taken on the content being examined. For example in case of a security application if a set of regular expressions are defined and programmed for spam detection then if one or more of these rules when matched can have action s associated with them that the message or content may need to quarantined for future examination by a user or it can have an action that says the content should be dropped or enable a group of regular expressions in the PRISM memory to be applied to the content or the like depending on the specific application. The PRISM memory architecture comprises of means or circuits or the like for programming and reprogramming of the FSA rules and optionally CAM signatures and masks. It further comprises of means or circuits or the like to stream the content to be searched to the PRISM memory arrays. It may further comprise of priority encoder which may optionally be programmable. The PRISM memory may optionally comprise of random access memory on chip or off chip which is used to store actions associated with specific rule matches. The PRISM memory may optionally comprise of database extension ports which may be optionally used when the number of rules is larger than those that may fit in a single integrated circuit chip. The PRISM memory may optionally comprise of clusters of PRISM memory cells that enable a group of FSA rules to be programmed per cluster. The PRISM clusters may optionally comprise of memory for fast storage and retrieval of FSA states for examination of content that belongs to different streams or contexts or flows or sessions or the like as described below referred to as context memory. For clarity context memory or global context memory or local context memory or cluster context memory all comprise of memory like random access memory or RAM or Dynamic RAM DRAM or DDR or QDR or RLDRAM or RDRAM or FCRAM or Static RAM SRAM or read only memory ROM or FLASH or cache memory or the like or any future derivatives of such memories as discussed above. The PRISM memory may optionally comprise of global context memory beside local duster context memory for storage and retrieval of FSA states of different contexts and enable supporting a large number of contexts. The cluster context memory may optionally cache a certain number of active contexts while the other contexts may be stored in the global context memory. There may optionally be off chip context memory as well which can be used to store and retrieve FSA states for much larger number of contexts. The PRISM memory may optionally comprise of cache or context control logic also referred as context controller that manages the cluster global or external context memory or cache or a combination thereof. The cache or context control logic may optionally be distributed per cluster or may be central for the PRISM memory or any combination thereof. The PRISM controller or the content stream logic that streams the content to be searched may be provided with an indication of the context of the content being searched or it may detect the context of the content or a combination thereof and may optionally direct the context memory and associated control logic i.e. the context controller to get the appropriate context ready. Once the context memory has the required context available an indication may be provided to PRISM configuration control logic that it may program or load the context states in the PRISM memory. The PRISM configuration control logic also referred as configuration controller in this patent may optionally first save the current context loaded in the set of active FSA blocks before loading the new context. The configuration controller s and the context controller s may thus optionally store and retrieve appropriate contexts of the FSAs and start searching the content against the programmed rules with appropriate context states of the FSAs restored. Thus PRISM memory may optionally dynamically reconfigure itself at run time based on the context of the content or the type of the application or the like or a combination thereof enabling run time adaptable PRISM memory architecture. The contexts as referred to in this patent may as examples without limitation be related to specific streams or documents or network connections or message streams or sessions or the like. The PRISM memory may process content from multiple contexts arriving in data groups or packets or the like. For content search in applications where the content belonging to one context may arrive interspersed with content from other contexts it may be important to maintain the state of the content searched for a context up to the time when content from a different context gets searched by PRISM memory. The context memory or cache with the associated controllers as described in this patent enable handling of multiple contexts.

For clarification the description in this patent application uses term NFA to describe the NFAs and optionally when tagging is used in regular expressions to describe tagged NFA unless tagged NFA is specifically indicated. All NFAs may optionally be tagged to form tagged NFAs hence the description is not to be used as a limiter to apply only to tagged NFAs. The descriptions of this patent are applicable for non tagged NFAs as well and tagging is an optional function which may or may not be implemented or used and thus non tagged NFAs are covered by the teachings of this patent as will be appreciated by one skilled in the art. At various places in this patent application the term content search memory content search memory search memory and the like are used interchangeably for programmable intelligent search memory or PRISM memory. These usages are meant to indicate the content search memory or PRISM memory of this invention without limitation.

In many content search applications like security there is a need to constantly update the rules or the signatures being used to detect malicious traffic. In such applications it is critical that a solution be adaptable to keep up with the constantly evolving nature of the security threat. In an always connected type of usage models it is extremely important to have the latest security threat mitigation rules updated in the security system on a frequent basis. When a composite DFA type architecture is used compiling and releasing any new security rules or policy can consume a large amount of time where the updates may not be timely to avoid the impact of the security threat. In such environments the release of new rule base may take up to 8 to 24 hours which is quite delayed response to constantly evolving threat. In the architecture of this invention that issue is addressed since the release of new rules is a matter of converting those rules into NFAs and updating or programming only these very small set of rules into the content search memory. Thus the response to new threats can be near immediate unlike the huge delays which occur from integration of the new rules in the composite rule base and converting those into composite DFAs.

There are several instances of REs which include only a few states. For example if the content search includes looking for .exe or .com or .html or the like the NFA for these REs include a small number of states. Thus if all NFA memory blocks support say 16 states then it may be possible to include multiple rules per block. This invention enables the maximum utilization of the FSA blocks by allowing multiple rules per FSA block. The blocks may optionally provide FSA extension circuits to chain the base blocks together to create super blocks that can handle larger FSAs.

Berry and Sethi in their paper From Regular Expressions to Deterministic Automata Published in Theoretical Computer Science in 1986 showed that regular expressions can be represented by NFAs such that a given state in the state machine is entered by one symbol unlike the Thompson NFA. Further the Berry Sethi NFAs are free. A V term RE can be represented using V 1 states NFA using Berry Sethi like NFA realization method. The duality of Berry Sethi method also exists where all transitions that lead the machine out of a state are dependent on the same symbol. This is shown in the paper A Taxonomy of finite automata construction algorithms by Bruce Watson published in 1994 in section 4.3. I show a method of creating NFA search architecture in a memory leveraging the principles of Berry Sethi s NFA realization and the dual of their construct. The NFA search memory is programmable to realize an arbitrary regular expression.

In this invention I also show how the content search memory of this invention can be used to create general application acceleration in a compute device like a server personal computer workstation laptop routers switches gateways security devices web search servers grid computers handheld devices cell phones or the like. I show an example content search application programmer interface which can be used as a general facility that may get offered by an operating system for those devices to applications running on them which can utilize the content search memory and significantly improve the performance of those applications compared to having them run on the general purpose processor of these devices.

An example application of anti spam is illustrated in this application which can be accelerated to become a high line rate application unlike current solutions which run on general purpose processors. Although the illustration is with anti spam application other content search intensive applications like intrusion detection and prevention or anti virus or other applications described in this patent can all be accelerated to very high line rate applications using the teachings of the inventions of this patent.

This patent also describes a content inspection architecture that may be used for detecting intrusions extrusions and confidential information disclosure accidental or malicious or intended regulatory compliance search using hardware for regulations like HIPAA Sarbanes Oxley Graham Leach Bliley act California security bills security bills of various states and or countries and the like deep packet inspection detecting spam detecting viruses detecting worms detecting spyware detecting digital rights management information instant message inspection URL matching application detection detection of malicious content and other content policy based access control as well as other policy processing content based switching load balancing virtualization or other application layer content inspection for application level protocol analysis and processing for web applications based on HTTP XML and the like and applying specific rules which may enable anti spam anti virus other security capabilities like anti spyware anti phishing and the like capabilities. The content inspection memory may be used for detecting and enforcing digital rights management rules for the content. The content inspection memory may also be used for URL matching string searches content based load balancing sensitive information search like credit card numbers or social security numbers or health information or the like.

Classification of network traffic is another task that consumes up to half of the processing cycles available on packet processors leaving few cycles for deep packet inspection and processing at high line rates. The described content search memory can significantly reduce the classification overhead when deployed as companion search memory to packet processors or network processors or TOE or storage network processors or the like.

I describe high performance Programmable Intelligent Search Memory for searching content with regular expressions as well as other pattern searches. The regular expressions may optionally be tagged to detect sub expression matches beside the full regular expression match. The regular expressions are converted into equivalent FSAs that may optionally be NFAs and may optionally be converted into tagged NFAS. The PRISM memory also optionally supports ternary content addressable memory functionality. So fixed string searches may optionally be programmed into the PRISM memory of my invention. PRISM memory of this invention enables a very efficient and compact realization of intelligent content search using FSA to meet the needs of current and emerging content search applications. Unlike a regular expression processor based approach the PRISM memory can support tens of thousands to hundreds of thousands of content search rules defined as regular expressions as well as patterns of strings of characters. The PRISM memory performs simultaneous search of regular expressions and other patterns. The content search memory can perform high speed content search at line rates from 1 Gbps to 10 Gbps and higher when the best of class server microprocessor can only perform the same tasks at well below 100 Mbps. The content search memory can be used not only to perform layer through layer searches that may be used for classification and security applications it can also be used to perform deep packet inspection and layer through layer content analysis.

The PRISM memory may be embodied inside network interface cards of servers workstations client PCs notebook computers handheld devices switches routers and other networked devices. The servers may be web servers remote access servers file servers departmental servers storage servers network attached storage servers database servers blade servers clustering servers application servers content media servers VOIP servers and systems grid computers servers and the like. The PRISM memory may also be used inside an I O chipset of one of the end systems or network core systems like a switch or router or appliance or the like.

The PRISM memory may also be embodied on dedicated content search acceleration cards that may be used inside various systems described in this patent. Alternatively PRISM memory may also be embodied as a content search memory inside a variety of hardware and or integrated circuits like ASSPs ASICs FPGA microprocessors multi core processors network processors TCP Offload Engines network packet classification engines protocol processors regular expression processors content search processors mainframe computers grid computers servers workstations personal computers laptops handheld devices cellular phones wired or wireless networked devices switches routers gateways XML accelerators VOIP servers Speech recognition systems bio informatics systems genetic and proteomics search systems web search servers electronic vault application networks and systems Data Warehousing systems Storage area network systems content indexing appliances like web indexing email indexing and the like chipsets and the like or any combination thereof. Alternatively PRISM memory blocks may be embedded inside other memory technologies like DRAM SDRAM DDR DRAM DDR II DRAM RLDRAM SRAM RDRAM FCRAM QDR SRAM DDR SRAM CAMs Boundary Addressable Memories Magnetic memories Flash or other special purpose memories or a combination thereof or future derivates of such memory technologies to enable memory based content search.

One preferred embodiment of the invention is in an integrated circuit memory chip that may support around 128 000 8 symbol regular expressions or may support around 18 Mbit of ternary CAM memory in current process technologies. A second preferred embodiment of the PRISM technology is an integrated circuit memory chip that may support around 8 000 regular expression rules in current process technologies to support applications where a lower content search memory cost is required. Each process generation may provide ability to store around twice as many PRISM memory bits as the previous generation. Thus in one preferred embodiment the PRISM memory would be able to support tens of thousands of eight state FSA and can potentially support over 100 000 FSAs. There are many variations of the PRISM memory architecture that can be created that can support more or less FSAs depending upon various factors like the number of states per FSA the chip die area cost manufacturability expectations and the like which will be appreciated by a person with ordinary skill in the art.

I describe high performance Programmable Intelligent Search Memory for searching content with regular expressions as well as other pattern searches. The regular expressions may optionally be tagged to detect sub expression matches beside the full regular expression match. The regular expressions are converted into equivalent FSAs or NFAs and optionally into tagged NFAs. The PRISM memory also optionally supports ternary content addressable memory functionality. So fixed string searches may optionally be programmed into the PRISM memory of my invention. PRISM memory of this invention enables a very efficient and compact realization of intelligent content search using FSA to meet the needs of current and emerging content search applications. Unlike a regular expression processor based approach the PRISM memory can support tens of thousands to hundreds of thousands of content search rules defined as regular expressions as well as patterns of strings of characters. The PRISM memory performs simultaneous search of regular expressions and other patterns. The content search memory can perform high speed content search at line rates from 1 Gbps to 10 Gbps and higher using current process technologies. The description here is with respect to one preferred embodiment of this invention in an integrated circuit IC chip it will be appreciated by those with ordinary skill in the art that changes in these embodiments may be made without departing from the principles and spirit of the invention. The illustrations are made to point out salient aspects of the invention and do not illustrate well understood IC design elements components and the like implementation of the invention in integrated circuits so as not to obscure the invention.

Ability to perform content search has become a critical capability in the networked world. As the network line rates go up to 1 Gbps 10 Gbps and higher it is important to be able to perform deep packet inspection for many applications at line rate. Several security issues like viruses worms confidential information leaks and the like can be detected and prevented from causing damage if the network traffic can be inspected at high line rates. In general content search rules can be represented using regular expressions. Regular expression rules can be represented and computed using FSAs. NFAs and DFAs are the two types of FSAs that are used for evaluation of regular expressions. For high line rate applications a composite DFA can be used where each character of the input stream can be processed per cycle of memory access. However this does have a limit on how fast the search can be performed dictated by the memory access speed. Another limiter of such approach is the amount of memory required to search even a modest number of regular expression rules. As discussed above NFAs also have their limitations to achieve high performance on general purpose processors. In general today s best of class microprocessors can only achieve less than 100 Mbps performance using NFAs or DFAs for a small number of regular expressions. Hence there is a clear need to create targeted content search acceleration hardware to raise the performance of the search to the line rates of 1 Gbps and 10 Gbps. This invention shows such a high performance content search hardware that can be targeted for high line rates.

As described earlier regular expression can be represented using FSA like NFA or DFA. illustrates Thompson s construction for the regular expression xy y yx. Thompson s construction proceeds in a step by step manner where each step introduces two new states so the resulting NFA has at most twice as many states as the symbols or characters and operators in the regular expression. An FSA is comprised of states state transitions and symbols that cause the FSA to transition from one state to another. An FSA comprises at least one start state and at least one accept state where the start state is where the FSA evaluation begins and the accept state is a state which is reached when the FSA recognizes a string. Block represent the start state of the FSA while block is an accept state. Block represents state and represents state . The transition from state to state is triggered on the symbol x and is represented as a directed edge between the two states. Thompson s NFA comprises of transitions which are transitions among states which may be taken without any input symbol.

Finite State Automaton can evaluate incoming symbols or characters against the regular expression language of the automaton and detect when an input string is one of the strings recognized by it. However it is advantageous in certain conditions to know if a certain sub expression of the regular expression is also matched. That may be enabled by tagging the NFA as described in the paper by Ville Laurikari referred earlier. Following description illustrates how the inventions of this patent enable tagged NFA realization in PRISM memory. The tagging for sub expression checking may involve further processing of the FSA to uniquely identify sub expression matching. However for illustration purpose if in the regular expression xy y yx if one desires to detect if the sub expression xy is in the recognized string one can tag the state as a tagged state. Thus whenever the regular expression transitions through state the sub expression match or tag match may be indicated. There may also be need to detect if a specific transition leads the regular expression through a desired sub expression. In such a case a tag start state and a tag end state may be marked. For instance if it is desired to detect if the transition from state to state is taken then the state may be marked as a tag start state and state may be marked as a tag end state. The tagged FSA implementation may then indicate the beginning of the tag transition when the FSA reaches the tag start state and then indicate the end of the tag transition when the FSA reaches the tag end state. If the FSA moves from the tag start state immediately followed by transitioning into tag end state then the tagged FSA can indicate the match of a tagged transition. The illustrations in the description below do not illustrate this aspect of tagged NFA though it may optionally be supported in PRISM and may be easily implemented as follows or other means for example by adding a tag start and tag end state flags as memory bits or flip flops and the logic for the tag transition detection to follow the steps described above as can be appreciated by those with ordinary skill in the art. The patent of this disclosure enables detection of sub expressions using tagging.

The and illustrate generic four state NFAs where all the transitions from each state to the other are shown based on the left biased or right biased construct characteristics. However not all four state NFAs would need all the transitions to be present. Thus if a symbol is received which would require the FSA to transition from the present state to the next state when such transition on the received input symbol is not present the NFA is said to not recognize the input string. At such time the NFA may be restarted in the start state to recognize the next string. In general one can use these example four state NFAs to represent any four state RE in a left biased LB or right biased RB form provided there is a mechanism to enable or disable a given transition based on the resulting four states NFA for the RE.

Similarly also illustrates states and transitions for a right biased NFA. The figure illustrates a right biased NFA with a state A which has incoming transitions from state B state C and state D on receiving input symbols S S and S respectively. However the transitions from each of the states B C and D to state A occur only if the appropriate state dependent control is set besides receiving the appropriate input symbol. The state dependent control for transition from state B to state A is Vwhile those from states C and D to state A is Vand Vrespectively. Transition to the next state A is dependent on present state A through the state dependent control V. Thus transition into a state A occurs based on the received input symbol and if the state dependent control for the appropriate transition is set. Thus one can represent any arbitrary four states right biased NFA by setting or clearing the state dependent control for a specific transition. All state transition controls for a given state form a state dependent vector SDV which is comprised of V V V and Vfor the illustration in for the left biased and the right biased NFAs.

If there are n states supported per FSA rule then each SLB needs n bit SDV which can be stored as a n bit memory location 3 bits allocated to start tag and accept flags 1 bit for LB RB m bit action storage. Thus if n 16 and m 6 then the total storage used per SLB would be a 26 bit register equivalent which is a little less than 4 bytes per state. If tag start flag and tag end flags are supported not illustrated then the number of memory bits would be 28 bits. If multiple tagged expressions need to be enabled then the number of bits for tagging may be appropriately increased.

PRISM memory may comprise of left biased NFAs right biased NFAs or left biased FSA or right biased FSA or a combination of them or may be comprised as selectable left biased or right biased NFAs with logic similar to . All such variations are within the scope of this invention as may be appreciated by one with ordinary skill in the art.

Rules distribution engine block then communicates the rules to specific system or systems that comprise of PRISM memory. The search rules targeted to specific systems may be distributed to a host processor or a control processor or other processor of the system that comprises PRISM memory. A software or hardware on the receiving processor may then optionally communicate the rules to the PRISM memory by communicating with the external interface block and the PRISM controller block described below to configure and or program the PRISM memory with the FSA rules. The Rules distribution engine may optionally communicate directly with the PRISM controller block through the external interface block if the external interface and PRISM controller optionally support such functionality. The rules may be distributed using a secure link or insecure link using proprietary or standard protocols as appropriate per the specific node s capability over a network.

The PRISM controller receives incoming data for examination using regular expression rules or for examination using patterns to be matched and may optionally store them into data buffer memory block before presenting it to the PRISM memory cluster arrays. The PRISM memory may optionally directly stream the content to be examined to the content stream logic block which may stage the content for examination by the PRISM memory cluster arrays block . The PRISM controller maintains the record of the content being processed and once the content is processed it informs the master processor. The PRISM memory cluster arrays inform the global priority encoder and evaluation processor block of the results of the search. When a match to a rule is found the priority encoder and evaluation processor may retrieve an action associated with the rule from the global action memory block depending on programmable policies and may optionally provide this to the PRISM controller. The PRISM controller may optionally inform the master processor about the search results. The PRISM controller may execute the specific action or policy defined for the rule match. The actions may optionally comprise to stop further content evaluation enable a certain set of rules to be examined by enabling appropriate cluster array and pass the content through that PRISM memory cluster array for further examination or inform the master processor of the result and continue further examination or hold the match result in on chip or off chip memory or buffers for the master processor to request this information later or any combination thereof or the like. If the PRISM memory is configured to examine network traffic in a flow through configuration not illustrated it may also be programmed to drop the offending packet or stop the specific TCP connection or the session or the like. Optionally the master processor may receive the match information and may take specific actions on the content stream.

The address decode and control logic block is coupled to the PRISM controller the external interface the PRISM memory cluster arrays the global priority encoder and evaluation processor the database expansion port as well as other blocks through a coupling interface . The PRISM memory may support a large number of regular expressions in some preferred embodiments as discussed above however if there are applications that need more rules then there may optionally be a database expansion port which would enable the expansion of the rules by adding additional PRISM memory ies to the database expansion port. The database expansion port may provide a seamless extension of the number of rules and may use additional memory space in the host or master processor. There are multiple ways of enabling the database expansion as may be appreciated by those with ordinary skill in the art. The address decode and control logic is also coupled to optional cluster address decode and FSA controller block and decodes addresses for the PRISM memory locations which are used to hold FSA rule block programming information as well as the FSA state information. It may perform the address decode memory read memory write and other PRISM memory management control functions by itself or working in conjunction with cluster address decode and FSA controller. The blocks and optionally may be programmed to provide configuration information for the clusters. The configuration information may optionally comprise of size of the NFAs e.g. 8 state or 16 state or the like CAM functionality enabling tagged NFA related configuration context addresses if appropriate for local cluster context addressing and or global context addresses clusters specific configurations that may support a mixed CAM and Regular Expression functionality at the PRISM memory level action memory association for specific FSA rules or clusters or a combination thereof and the like. The PRISM memory cluster arrays and other blocks like global and local priority encoder and evaluation processor blocks and local not illustrated and global action memories block and the like get configured and programmed with information before the content inspection begins. Further since PRISM memory supports dynamic reconfiguration of rules its programming and configuration may be updated during the content inspection as well for example when a new security threat has been discovered and a new rule to catch that security violation needs to be programmed. The PRISM memory provides ability to support multiple content streams to be processed through the PRISM memory cluster arrays using context mechanism which associates each content stream with a specific context which may optionally be assigned a specific context ID.

The cluster address decode and FSA controller block may decode incoming addresses for configuring reading or writing from PRISM memory locations or the like of the cluster PRISM array block which is comprised of an array of PRISM FSA rule blocks illustrated above in and and also referred to as PRISM Search Engines PSE block and activates memory location s word line and or bit lines or other word lines or content lines or mask lines or the like or a combination thereof described below to read write and or access the specific PRISM memory location. There may optionally be cluster specific bit line drivers and sense amplifiers block and bit line control logic block which may be used to read or write specific bits in the cluster PRISM array block . These circuits are well understood by memory designers with ordinary skill in the art. The sense amplifiers and drivers may optionally be present at the global PRISM memory level illustrated in depending on the tradeoffs of die area performance cost power and the like which one with ordinary skill in the art can easily appreciate. The benefit of having local sense amps and drivers is potentially creating lower interconnect load for individual memory bits which in turn can help improve the performance. Typically the block may be operating during the configuration context switching or other maintenance operations like storing and retrieving specific NFA or FSA state information or refreshing specific PRISM FSA memory bits if appropriate and the like. Generally during content processing the block may be dormant unless there is a match or an error or the like when it may start performing the necessary tasks like communicating the match action policy error or the like to the PRISM controller initiating context switching and the like. The PRISM controller block coupled with the content stream logic block content staging buffer address decode and control logic block and the cluster FSA controllers block may present the content to be examined to the PRISM FSA rule blocks. The content to be examined may be streamed by the block from the data buffer or memory or from external memory or a combination into the content staging buffer. The content staging buffer is coupled to cluster search buffer and cluster search control to align the appropriate content to the clusters for searching. The content staging buffer may hold content from the same context or multiple contexts depending on the configuration of the clusters and the like. The content is presented to the cluster PRISM array that comprises of the PRISM NFA rule blocks for examination in a sequence timed using a control signal like a clock or enable or a combination. The NFA rule blocks perform their inspection and indicate whether there is any rule match or optionally if there is any CAM pattern match or optionally any tag match and the like. The match signals are looked at by cluster level local priority encoder and evaluation processor block which may determine if there is a match and if there are multiple matches which match should be used or all matches should be used or the like depending on the configuration. This block may be coupled to global priority encoder and evaluation processor block which may perform a similar operation by examining match signals from multiple clusters. The local and global evaluation processors of these blocks may optionally generate address es for the winning match es to the global action memory or external memory or a combination that may store appropriate action information that needs to be retrieved and processed to determine action s that need to be taken as a result of specific rule match es . There may be optional cluster level action memory not illustrated for fast retrieval of action information. This cluster level action memory may act as a cache of the global and or external memory based action storage. As described earlier the FSA controller block coupled with local context memory block its memory controller block along with the local and global evaluation processor and priority encoders coupled to global action and context memories may be used to store and retrieve context information from and to configure the PRISM cluster arrays with appropriate FSA states.

Each PSE of a PRISM memory cluster may be addressed using one PRISM Memory location or a set of PRISM memory locations or a combination thereof. All internal memory elements of a PSE like the each state dependent symbol memory mask vector memory SDV memory or the initialization vector memory and the like may each be mapped as individual memory locations in the PRISM memory address space or may each be addressable in a PSE address space once the PSE is selected from a PRISM memory address or the like as may be appreciated by one with ordinary skill in the art. One preferred embodiment may comprise of 22 PRISM Memory address bits where in the upper 17 address bits are used to select a specific PSE in an embodiment with 128 000 PSEs and the lower 5 address bits are used to select a specific memory element of the selected PSE as described above. Other variations of such an arrangement are within the scope and spirit of this invention as may be appreciated by one with ordinary skill in the art. The number of address bits allocated to select PSEs depends on the number of PSEs and the number of address bits allocated to select memory elements of a PSE depend on the number of memory elements in one PSE which may in turn depend on the number of states per PSE FSA extension mechanisms per PSE symbol size and the like as may be appreciated by one with ordinary skill in the art. Further a specific PSE within a cluster may be addressed or selected by PRISM memory cluster row address and a column address which would be derived from the PSE address bits. One preferred embodiment of PRISM memory with 128 000 PSEs may use 128 rows and 8 columns of PSEs per PRISM memory cluster there by supporting 1024 PSEs per PRISM memory cluster. In such a PRISM memory embodiment upper 7 bits of the 22 bits for PSE address may be allocated to select a specific PRISM memory cluster and the next 10 bits of the PSE address may optionally be used to select a specific PSE in a PRISM memory cluster while the lower 5 bits may optionally be used to select a specific memory element of the selected PSE of the selected PRISM memory cluster. The 10 bit address for selecting a specific PSE of a PRISM memory cluster may further be allocated such that upper 7 bits of that may be used as a PSE row address selection and the remaining 3 bits of the address used as a PSE column address selection. There are multiple other ways to perform the addressing of PRISM memory as may be appreciated by one with ordinary skill in the art and all such variations are within the spirit and scope of the teachings of this invention.

The symbol evaluate circuit generates a signal RSx and or CAM matchx which is used to indicate when the input content character or symbol matches the programmed symbol. The content symbol or character to be examined with the programmed symbol is presented to the state block bit on the content bit lines CL and complement bit line CLn which are coupled to the symbol evaluate circuit. The symbol evaluate circuit further couples to the mask memory block bit and the symbol memory block bit through the mask circuit and evaluates if the content bit presented to this state block bit matches with the programmed symbol bit. The output of the symbol evaluate circuit is the RSx CAM matchx signal which is coupled between multiple symbol evaluate circuits of all state block bits of a state block and is asserted when all the bits of the symbol programmed in the state block match their corresponding symbol bits of the input content to being examined. The figure illustrates separate bit lines and their complement lines for content and mask and other programming information illustrated by the lines and or and . Those with ordinary skill in the art can appreciate that the positive and complement bit lines may each be on the same signal or may each be on a separate signals. Thus all variations of these implementations are covered by the teachings of this patent. The bit lines used to store and retrieve the information to memory elements may optionally be separate from the content lines as illustrated in the for various reasons like performance interconnect load die size cost power and the like.

The illustrates state control block bit in PRISM. This block bit stores the initialization vector or start state bit in a typical six transistor static memory configuration created using the transistors and . The start state bit is selected by the FSA controller by driving the word line ivWL which is coupled to devices and . The value on the BL and BLn is coupled through those transistors into the memory cell during write and is read onto the bit lines during a read operation. The output of the memory cell is used as one of the inputs to a multiplexer which may optionally be present to enable selection of the initialization vector bit. When the Load signal is asserted the value of signal LSn is coupled to the output of the multiplexer but when Load signal is not asserted the start state bit is coupled to . The signal LSn may optionally be provided as a means to load a state context that was saved earlier or any other state value to be loaded into the state bit . The state bit may alternatively be written using a memory bit and be coupled with the other initialization logic appropriately. The Load signal may be asserted by the FSA controller to indicate updating the state bit value. During normal operation the signal that acts as a select signal for the multiplexer is inactive selecting the output of the bit location specific gate like which indicates the state transition of the FSA during normal content evaluation. However if the local initialization signal is asserted then path from the start state bit to the state bit is enabled and the state bit gets initialized. There may also be a need to provide a global cluster wide or PRISM memory wide initialization which is controlled by asserting global initialization signal GInit which again enables the path from the start state bit to the state bit . The state control block may generate state bit signals Qn and optionally signal Qnb . The state bit may be updated at synchronized interval with other parts of the memory using a control signal which may be a clock or an enable signal or other signal like hold or a combination.

The configuration illustrated in may optionally be used for email security or instance message security or outbound security or extrusion detection or HIPAA compliance or Sarbanes Oxley compliance or Gramm Leach Bliley compliance or web security or the like or a combination thereof. The security capabilities listed may comprise anti spam anti virus anti phishing anti spyware detection prevention of directory harvest attacks detection prevention of worms intrusion detection prevention firewalls or the like or detection prevention of leaks of confidential information health care information customer information credit card numbers social security numbers or the like or a combination thereof. The content search memory in such device may be configured with a set of security rules for one or more of the applications listed above and provide acceleration for content search for information incoming or outgoing from the device. Content search memory device may be deployed at any place in the network like close to or embedded in a router or a switch or gateway of an organization s networks or at a departmental level or within a datacenter or a combination and provide high speed content inspection to incoming or outgoing traffic flow of the network.

The PRISM memory of this invention may be manufactured into hardware products in the chosen embodiment of various possible embodiments using a manufacturing process without limitation broadly outlined below. The PRISM memory in its chosen embodiment may be designed and verified at various levels of chip design abstractions like RTL level circuit schematic gate level layout level etc. for functionality timing and other design and manufacturability constraints for specific target manufacturing process technology. The design would be verified at various design abstraction levels before manufacturing and may be verified in a manufactured form before being shipped. The PRISM memory design with other supporting circuitry of the chosen embodiment at the appropriate physical layout level may be used to create mask sets to be used for manufacturing the chip in the target process technology. The mask sets are then used to build the PRISM memory based chip through the steps used for the selected process technology. The PRISM memory based chip then may go through testing packaging process as appropriate to assure the quality of the manufactured product.

A memory architecture comprising programmable intelligent search memory PRISM for content search wherein the PRISM memory provides search capability for regular expression based search.

The PRISM memory further comprises an array of search memory circuits that provide the regular expression search functions for searching content from documents messages or packets or other data received from the network or the local host or a master processor or a network processor or TCP Offload Engine or Processor or Storage Network processor or a security processor or other processor or a combination thereof.

The PRISM memory further comprises of a plurality of clusters of the search memory circuits that provide regular expression search functions for a plurality of regular expressions. The search memory circuits comprise of memory elements to store symbols of finite state automata representing the regular expressions. The search memory circuits further comprise memory elements to store mask vectors MV that may be applied to the stored symbols. The mask vectors are coupled to the symbol memory elements and the content being searched through symbol evaluation circuits that detect whether the received content comprises of the symbols being searched. The search memory circuits further comprise of memory elements to store elements of state dependent vectors SDV which are used to decide the state traversal by the search memory for the finite state automata. The search memory circuits further comprise of match detect circuits that operate by coupling with the memory elements for symbols MVs SDVs and the symbol evaluation circuits for multiple states of the FSAs to decide on the traversal of the states in the FSA based on the content being searched and the programmed symbols SDVs and MVs. The search memory circuits may further comprise tag and match detect circuits that operate to provide tagged FSA and regular expression search wherein the tagged FSA is used to detect sub string or partial regular expression match beside a full regular expression match.

The memory elements of the PRISM memory comprise of static memory cells. The memory elements are each independently addressable in a random order. The PRISM memory further comprises of circuits to couple the content search memory with other logic to provide coupling with processors that can interface to the PRISM memory integrated circuits. The PRISM memory further comprises of a controller for interfacing with the processors to receive the content to be searched. The PRISM memory may further comprise of address decode logic circuits which decode the received address to select the specific static memory cells location to be read or written. The memory elements of the search memory may each be uniquely addressed to read or write appropriate values in the memory elements. The address decoding logic and the controller generate control signals necessary to address the appropriate memory locations of the static memory cells based search memory. The control signals are coupled to the PRISM arrays as a series of word lines and bit lines that can randomly be used to access desired memory locations.

The memory elements of PRISM support detection of character pattern strings. The PRISM memory comprises of symbol detection circuits and may optionally comprise of mask vectors per symbol bits that may be used to evaluate received character string using simple XOR based compare or other logic function and create a match indication. The PRISM match signal processing circuits may logically combine multiple match signals from each symbol detection block to generate a composite match signal which would be activated only if all the symbols have a match. The composite match signal creates a match functionality like a traditional CAM chip and thus enable PRISM chip to be partially or fully configured to behave like a CAM provide a pattern matching functionality beside regular expression search.

While the foregoing has been with reference to particular embodiments of the invention it will be appreciated by those with ordinary skill in the art that changes in these embodiments may be made without departing from the principles and spirit of the invention.

