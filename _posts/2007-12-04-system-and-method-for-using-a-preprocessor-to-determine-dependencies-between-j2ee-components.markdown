---

title: System and method for using a preprocessor to determine dependencies between J2EE components
abstract: A system and method for using a preprocessor to determine dependencies between J2EE components. The preprocessor can analyze a running J2EE application, and look at the deployment descriptor information associated with that application. The levels of indirection within the deployed application are followed to determine the actual configuration information used to deploy the application on a first application server. This configuration information can then be parsed, communicated, or otherwise output to a system administrator or software developer, or in some embodiments directly to a second application server, and used to deploy the application on that second application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185873&OS=08185873&RS=08185873
owner: Oracle International Corporation
number: 08185873
owner_city: Redwood Shores
owner_country: US
publication_date: 20071204
---
This application is a continuation of U.S. patent application Ser. No. 10 789 012 filed Feb. 27 2004 entitled SYSTEM AND METHOD FOR USING A PREPROCESSOR TO DETERMINE DEPENDENCIES BETWEEN J2EE COMPONENTS which claims priority to U.S. Provisional Patent Application 60 450 431 filed Feb. 27 2003 entitled SYSTEM AND METHOD FOR USING A PREPROCESSOR TO DETERMINE DEPENDENCIES BETWEEN J2EE COMPONENTS. 

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The invention relates generally to application servers and J2EE servers and particularly to a system and method for using a preprocessor to determine dependencies between J2EE components.

The JAVA 2 Enterprise Edition J2EE platform is often used to build distributed transactional applications for the enterprise. To allow for rapid application design the J2EE platform provides a component based approach to the design development assembly and deployment of enterprise applications. The J2EE platform offers a multi tiered distributed application model and the ability to reuse components. In a multi tiered distributed application model application logic is divided into components according to their function and the components are often themselves physically divided onto separate machines depending on their association to a certain J2EE environment tier. Communication for the purpose of coordination between physically and logically distinct components of an enterprise application is therefore often complex.

A common problem with application servers is that when moving applications from one server to another either between servers of similar type manufacture or between servers of different type the application configuration information must be duplicated in some manner on the destination server. This is usually a tedious and time consuming process requiring the expert skills of an application developer or administrator. The process is also prone to error since it usually requires the developer to visually inspect large textual configuration files and make necessary changes to configure the application for its new environment. Tools that can help the developer in this task would be very useful would minimize the amount of time required to migrate the application from one server to another and would promote the feasibility of moving applications from one server or server product to another.

The invention provides a system and method for using a preprocessor to determine dependencies between J2EE components. The preprocessor can analyze a running J2EE application and look at the deployment descriptor information associated with that application. The levels of indirection within the deployed application are followed to determine the actual configuration information used to deploy the application on a first application server. This configuration information can then be parsed communicated or otherwise output to a system administrator or software developer or in some embodiments directly to a second application server and used to deploy the application on that second application server.

As disclosed herein an embodiment of the invention provides a system and method for using a preprocessor to determine dependencies between J2EE components. Generally described an embodiment of the invention allows a system such as an application server or process running thereon to analyze a running J2EE application and to look at the deployment descriptor information associated with that application. In one embodiment the invention is provided in the form of a system that includes a preprocessor type mechanism. The system preprocessor follows the levels of indirection within the deployed application to determine the actual configuration information used to deploy the application on a first application server. This configuration information can then be parsed communicated or otherwise output to a system administrator or software developer or in some embodiments directly to a second application server and used to deploy the application on that second application server.

So for example if an application deployed on a first server specifies that it needs a particular data source in order to operate properly at runtime the preprocessor determines that the application needs that data source and further determines what that data source might be. The preprocessor then check the global configuration information to locate a data source that matches the one specified by the application and then retrieves both that particular data source configuration information and any configuration information which that data source may depend on. This configuration information is then used to assist in repackaging all of the applications dependency based deployment information for successfully deploying the application on another second server. In the context of this invention the first and second server can be any application server and particularly any J2EE compatible server including BEA s WebLogic system IBM Websphere or any equivalent application server product. The invention is designed to assist in the process of moving applications both between servers of the same type i.e. between a first WebLogic server and a second WebLogic server and between servers of different types i.e. between a WebLogic server and a Websphere server .

On the server side the server must provide the management Application Programming Interfaces APIs inside the server for use by the application. Data sources DS used by the server are defined with respect to connector pools Java Messaging Service JMS queues etc. The server must provide or associate each data source with a JNDI name with which that data source will be bound. The data source is then associated with a connection pool.

During the action of the preprocessor the data source commonalities between the application side and the server side for the deployed application are interrogated and are used to provide application deployment configuration information which can then be used to deploy the application on a second server with appropriate dependencies. For example the system can determine a particular data source. It will then determine that a particular EJB depends on that data source. It then determines that the data source depends by name on a particular connection pool etc. This configuration information is output to a file or communicated directly to the destination server.

The following code segments illustrate by way of example how the configuration information may be specified and how the preprocessor may operate in accordance with one embodiment of the invention. It will be evident that additional implementations may be developed within the spirit and scope of the invention and that the invention is not limited to the examples shown.

The present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. Particularly it will be evident that while the examples described herein illustrate how the invention may be used in a WebLogic environment other application servers servers and computing environments may use and benefit from the invention. The code example given are presented for purposes of illustration. It will be evident that the techniques described herein may be applied using other code languages and with different code.

The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

