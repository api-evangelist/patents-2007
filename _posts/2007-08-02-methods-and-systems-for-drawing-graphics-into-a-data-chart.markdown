---

title: Methods and systems for drawing graphics into a data chart
abstract: Methods and systems for drawing graphics into a data chart are described. One described method for drawing a graphical element in a chart includes receiving a graphics control call with at least one data value parameter specifying the location of the graphical element One or more operations associated with the graphics control call may be recorded into a data structure. At least one display data range may be determined for the display of data representations and the graphical element, for example by defining an appropriate axis range. The range and data structure may be used to draw and redraw the chart. For example, upon a change to the data, the chart may be redrawn using the new data set and the data structure. As another example, upon a change to a graphical element, the data structure may be changed or replaced and the new or revised data structure used to redraw the chart.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09035948&OS=09035948&RS=09035948
owner: Adobe Systems Incorporated
number: 09035948
owner_city: San Jose
owner_country: US
publication_date: 20070802
---
The present invention relates generally to charts including methods and systems for customizing a chart for example by drawing graphics into a chart using data value display positions and other characteristics.

Various charting packages allow developers to represent a set of data values as graphics for example as a set of vertical bars points in a line wedges of a pie etc. Charts typically do this by providing a way of transforming data values into x y coordinates to display on screen and then using a standard drawing application programming interface API to render those data values in a particular way. Most charting packages examine the data being displayed and automatically determine an appropriate set of ranges for a chart s axes for example to guarantee that all data is visible. Often the chart also needs to take into account how the data will be rendered for example if a data point will be rendered as a 30 pixel wide square the transform needs to ensure there is enough space around that data point to accommodate the 30 pixel square.

Some traditional graphics APIs allow developers to use drawing commands that take x y screen coordinates as parameters. For example a developer might use the API to draw a box that stretches from the coordinates 20 20 to 100 100. A graphics API also typically allows a developer to set up some sort of transformation on the coordinate space into which the developer is drawing for example to take all of the coordinates and move them to the right by 100 pixels or scale the coordinates up by a factor of two.

Some charting packages allow a developer to use a graphics API to draw customize or extend a chart. However such APIs provide drawing and customizing commands that take only screen based coordinates as parameters and many developers desire to make customization and drawing graphics that are based on data value display positions and other characteristics. Many developers find it difficult complicated and time consuming to deal with the data value to screen coordinate transformations needed to use the existing API graphic drawing commands.

Development is further complicated when data changes for example when a change requires changes to a chart s data range data representations and added customizations. For example such a change may require adjusting display customization characteristics. To ensure the data representations graphics and customizations show up as intended a developer may a make the chart aware of the data so it can be included when automatically determining how data is transformed into screen coordinates b make the chart aware enough of how the data is rendered that it can account for it when automatically determining how data is transformed into screen coordinates and or c use the chart s extension APIs to transform data into onscreen coordinates. In short existing charting packages make it complicated and time consuming to customize a chart for example when drawing chart graphics.

Embodiments of the present invention provide methods and systems that allow a chart developer to use a drawing API to extend and customize a chart for example by customizing data point labels or drawing a horizontal band between two data values to indicate a target range. The API commands may allow a developer to specify both data value and pixel value parameters for example to specify drawing object positions offsets and other characteristics. The similarity of the drawing commands to traditional drawing commands may be used to facilitate and simplify the customization. Allowing a developer to specify the drawing coordinates using both data values chart values and pixel values adds additional flexibility and may dramatically simplify chart development.

One embodiment of the present invention comprises a method for adding a graphical element to a chart by receiving a graphics control call with at least one data value parameter specifying the location of the graphical element. One or more operations such as drawing operations associated with the graphics control call may be recorded into a data structure. The method may further involve determining at least one display data range for the display of data for example representations of data such as columns in a bar graph and the graphical element An example of determining a display range is determining an appropriate axis range for one of the chart axes. The display data range and the data structure may he used to draw and or redraw the chart. For example upon a change to the chart data the chart may be redrawn using the new data set and the data structure. As another example upon a change to a graphical element the data structure may be changed or replaced and the new or revised data structure used to redraw the chart.

One embodiment of the present invention comprises a method for drawing graphics into a chart of data by receiving a graphics control call comprising a at least one data value parameter and b at least one pixel value parameter. The at least one data value parameter and at least one pixel value parameter may be used to specify the display of the graphical element in the chart. One embodiment comprises determining at least one display data range for display of the set of data and the graphical element in the data chart and drawing the chart using the at least one display range.

In other embodiments of the invention a computer readable medium such as a random access memory or a computer disk comprises code for carrying out these methods. For example one embodiment is a computer readable medium comprising a data structure for use in drawings graphics into a chart of data the data structure comprising an identification of a graphical element and an identification of at least one operation associated with display of the graphical element.

These embodiments are mentioned not to limit or define the invention but to provide examples of embodiments of the invention to aid understanding thereof. Embodiments are discussed in the Detailed Description and further description of the invention is provided there. Advantages offered by the various embodiments of the present invention may be further understood by examining this specification.

Embodiments of the present invention provide methods and systems that allow a chart developer to use a drawing API to extend and customize a chart. The invention encompasses a variety of chart development techniques for use in developing charts of varying types. It provides a variety of benefits as illustrated by the following illustrative examples of the uses benefits and functions of illustrative embodiments of the present invention.

In one embodiment of the present invention a chart developer uses a drawing API to create a chart. In this case the API allows the developer to define various charting controls. The chart developer uses a chart control to define a chart component an axis control to define the chart axes and a series control to define a series of data points for representation on the chart. For example the developer may specify a series using a reference to a data set such as the following data set 

The chart developer may further use a graphics control to specify a graphic. The API may provide graphics controls providing a plurality of graphic drawing functions. Exemplary controls and functions include DataDrawingCanvas addDataChild updateDataChild clear beglnFill beginBitmapFill lineStyle endFill moveTo iineTo dashedLine curveTo drawRect drawEllipse drawRoundedRect mapChildren positionChildren etc. In this example the developer uses the drawRect function to specify a box in the background of the data item representations.

The drawRect control for example could be defined in a library as a public function drawRect left top right bottom with the four noted parameters. The developer provides the following script to specify the display of the box using the drawRect graphics control 

When the development application renders the chart which may occur on an on going basis as the chart is being developed it uses the data value parameters provided for the rectangle left C top 60 right Q bottom 130 to draw the rectangle. Exemplary rendering code for the drawRect control follows 

The above portion of drawing code above shows how a rectangle could be drawn. The coordination of the actual screen coordinates of the rectangle may be accomplished using additional coding. For example such coordination may involve code that a uses the axes to convert the data values provided in the call to drawRect into numeric values b informs the axes of those numeric values and that they should be included when generating the displayed range of the chart and or c uses the axes to convert those numeric values into screen coordinates after the axes have determined the displayed range of the chart. After such additional coding is executed the actual drawing code included above may be executed which uses the finally computed screen coordinates in the cache to draw.

Referring now to the drawings in which like numerals indicate like elements throughout the several figures is an exemplary chart displaying data representations and a graphic according to one embodiment of the present invention. illustrates a chart showing data item representations and a box defined by the chart developer. Note that various features of the chart maybe selected automatically by the development application but may subsequently be adjusted by the chart developer or may be automatically adjusted as the developer modifies the chart or underlying data set.

This illustrative example is given to introduce the reader to the general subject matter discussed herein. The invention is not limited to this example. The following sections describe various additional embodiments and examples of methods and systems for drawing graphics into a data chart.

Embodiments of computer readable media comprise but are not limited to an electronic optical magnetic or other storage or transmission device capable of providing a processor with computer readable instructions. Other examples of suitable media comprise but are not limited to a floppy disk CD ROM DVD magnetic disk memory chip ROM RAM an ASIC a configured processor all optical media all magnetic tape or other magnetic media or any other medium from which a computer processor can read instructions. Also various other forms of computer readable media may transmit or carry instructions to a computer including a router private or public network or other transmission device or channel both wired and wireless. A transmission device may store the code on computer readable medium temporarily. The instructions may comprise code from any suitable computer programming language Including for example C C C Visual Basic Java Python Perl and JavaScript.

The developer computer may be connected to a network such as the Internet. In other embodiments other networks such as an intranet or no network may be used. Moreover methods according to the present invention may operate within a single device or with components distributed over a network . The computer may also comprise a number of external or internal devices such as a mouse a CD ROM DVD a keyboard a display or other input or output devices. Examples of computing devices are personal computers digital assistants personal digital assistants cellular phones mobile phones smart phones pagers digital tablets laptop computers Internet appliances and other processor based devices. In general a computer device executing a development application may be any type of processor based platform that operates on any operating system such as Microsoft Windows or Linux capable of supporting one or more client application programs. Other applications can also be contained in memory and can comprise for example a word processing application a spreadsheet application an e mail application a media player application an instant messenger application a presentation application an Internet browser application a rich Internet application player a calendar organizer application and any other application or computer program capable of being executed by the device.

An illustrative development machine is a developer s client machine. As an example a developer might develop a chart or application containing a chart on development machine on a client device and then move it to a web server so that a user and or another developer can access it.

A developer could use a development application comprising an editor a library and a renderer to create a chart. The editor may allow a developer to create or specify a chart using declarative code such as XML code and or to graphically design a layout that automatically generates such declarative code. The developer may use the renderer to render or compile the declarative code with procedures from the library to generate a chart or application containing a chart. The compiling may involve first converting the declarative code into procedural script and compiling the procedural script possibly with additional procedural script from the library or elsewhere into an executable application such as a rich Internet application or other chart containing application.

The class library may comprise various functional components for example a chart component for use in creating one or more different types of charts. A chart component or a charting package may comprise a series component line series column series a chart with one series of data in it representing that area axes controls elements controls and graphics controls . An axes control may be used to configure the axes of a charting component. For example a chart developer could use an axes control to specify that the horizontal axis of a chart includes specific categories for example the American states. A graphics control may be used by a developer to draw a graphic into the chart. For example the developer may draw a line from New York to California using the American states defined along a horizontal axis. As another example the developer may highlight everything in the chart from January 1to January 30 using the dates defined along an axis.

In certain embodiments the graphics controls aspect of the API allows a developer to use whatever type of data a chart is representing as data values passed or used by the graphics controls for example as parameters to the data graphics API controls . Note that the various controls may interact with one another as appropriate. For example a graphics control may call or otherwise use an axes control or a series control. That abstraction is typically handled by the individual axis object. Many but not all charts will comprise a horizontal axis and a vertical axis.

Certain embodiments of the present invention relate to methods of developing a chart. It will be recognized that the development environment of is merely one context and that other features of the invention are described herein. For example certain embodiments will not involve a network certain embodiments will not involve the use of declarative code certain embodiments will not involve a rich Internet application and certain embodiments will not involve a library. In short the techniques for charting and the other features described herein have uses in a variety of contexts not to be limited by the specific illustrations provided herein. It should also be noted that embodiments of the present invention may comprise systems having different architecture than that which is shown in . For example in some systems according to the present invention one or more server devices may provide some or all of the development environment. The system shown in Is merely illustrative and is not intended to recite any system component or feature as essential or necessary to any embodiment of the invention.

In one illustrative embodiment of the present invention a charting component is provided to a chart developer. The charting component allows the developer to specify a chart and graphics for inclusion on the chart by specifying the graphics locations with data value and or pixel value parameters. The charting component takes responsibility for the other steps necessary to render it correctly without the developer having to address any data transformations that may be necessary. In this embodiment the charting component records the graphic that the developer has drawn. As the details of the chart change a graphics subpart of the chart component informs the chart what it needs to know to ensure that the developer s drawings are included in the chart. For example it may respond to changes in the chart s ranges and update the chart accordingly.

One embodiment of the present invention provides a typical drawing API to a developer for graphically drawing onto a chart. The developer may do so by identifying drawing coordinates for example two corners of a box. Each coordinate that is passed to the drawing API can be a pixel value for example a pixel offset a data value the corner of a box or a combination data value and pixel valise. The drawing API may maintain a data structure based on the developers commands. For example it may record a list of drawing operation codes op codes representing the set of commands issued by the developer. It may also maintain coordinates for example data value and pixel value coordinates for both the vertical axis and the horizontal axis. When a developer calls a new drawing API the drawing API may extract any included coordinates from the command and add the command to the end of the op codes.

When new data or a new graphic is added to a chart the charting component may need to regenerate its ranges transforms. To do so the charting component uses the relevant data and graphic element coordinates that need to be included in the ranges as well as pixel offsets that may be specified or determined. Once the ranges transforms are used to convert its data values from a set of data into pixel values on the chart the charting control uses the data structure to draw the graphic element on the chart. For example the drawing API executes the stored op code list replaying the drawing API in the order invoked by the developer using the final transformed screen coordinates that represent the data pixel values originally passed by the developer.

In one embodiments the present invention provides an extension to a chart drawing development package that allows a developer that may be familiar with how drawing APIs work but not necessarily familiar with the details of how charting packages do data transformation to draw graphics into a chart. The developer is able to use traditional drawing API commands which are enhanced to convert data values into screen coordinates without the developer having to deal with any transformation. For example a developer may want to draw a rectangle stretching across a chart from 1 million to 2 million. The developer can use the enhanced drawing features of this embodiment of the present invention to do exactly that by simply providing a command to draw a rectangle stretching from one million dollars to two million dollars. In contrast traditional drawing APIs will have draw functions for example draw a line fill rectangle draw oval draw text that require specifying horizontal and or vertical positions in pixel position values.

Thus one embodiment of the present invention provides a similar or identical API offering functions to draw a line draw a rectangle fill rectangle draw text etc. but allows the developer to provide coordinates in the data space as opposed to pixel coordinate space alone . Behind the scenes the charting package monitors data values and manages all the transformation. Thus in the example above the charting package or component does the transformation of 1 million to a screen coordinate and makes sure that the chart ranges include the draw so that the rectangle or a portion of it does not end up off the screen. This management further ensures the Intended display of the rectangle when the ranges in the chart changes for example because new data is added to adjust the developer specified graphic to match the new ranges of the chart.

In one embodiment the chart package will offer an API which looks identical to a traditional packaged API but different in that the parameters are data values as opposed to screen coordinates. When a developer calls an API instead of actually drawing directly to the screen the component records op codes or macros for the set of drawing commands that the developer executes with the associated data values. When for example a developer provides a command to draw a line from left to right the charting component populates a data structure with numeric values which represent those operations. Such a data structure may record one or more commands that draw a line and the data values associated with the line. The use of this type of data structure allows the development environment to function as a retain mode system meaning that the developer need only specify drawing commands once and the drawing commands are retained and automatically modified as the chart is changed. For example if the chart size changes or if new data gets added to the chart the developer does not have to redefine the chart.

The developer providing the drawing commands may also signal that there is new data to be displayed in the chart. The chart determines data value display ranges by checking what ranges are needed for every sub piece or sub component of the chart for example the ranges of the data needed to display the data representations and the range needed to display the graphical element. The graphics sub component may identify a range of data needed to display a graphical element by stepping through the data structure recorded for the graphical element for example by looking at the op codes and the data values. The graphics sub component may also account for a margin border or other display characteristic to improve the graphical element display. For example the graphics subcomponent may determine that a box from 1 million to 2 million should have a 20 pixel margin around it to make sure that a border gets included in the chart ranges. Such a margin border or other display characteristic may be specified by the developer or automatically determined.

Once chart data value display ranges have been determined the chart is drawn. The data item representations for example representations of items in a data set may be positioned and displayed on the chart. The graphic element defined by the developer may also be positioned on the chart. In one embodiment of the present invention the data structure is used to draw the graphical element. The graphic sub component using the data value display ranges that have been determined goes through the op codes of the data structure to draw the graphic. This may involve conversion of the data value parameters to the pixel values appropriate for the data value display ranges.

In one embodiment the data structure is used to facilitate the retain model character of the development environment so that the developer can expect the chart to automatically reposition graphics when the chart changes. For example if the user resizes a window containing a chart and the size of the chart has to change the recorded data structure allows the chart to react to the fact that the chart has changed and redraw the graphic without the developer s attention. The chart can essentially recalculate its ranges and the data structure can replay the op codes to draw the graphic in its intended location. Note that resizing the chart could be specified by a developer or caused by an end user. The data structure may be used in either case to ensure appropriate display of the graphic element.

In the method shown in an editor in a chart development environment receives a graphics control call to add a graphical element to a chart using at least one data value parameter as shown in block . For example a developer may have made a call to a drawing API specifying one or more data values to be used to determine the location of the graphical element to a chart displaying a set of data. The chart development environment may automatically receive or recognize the call to add the graphical element as the call is entered into editor or may recognize or otherwise receive the call upon the occurrence of some event for example rendering of the chart during testing or execution of the chart or application containing the chart. A chart control call may specify the display of the set of data in the chart.

After receiving the graphics control call the graphics control component or any other suitable component of development environment or system records into a data structure at least one operation associated with the graphics control call as shown in block . The data structure may include on or more op codes and or the parameter data values. The data structure may have a list format comprising numerical representations of commands and data or may have any other suitable format. The data structure may be stored in memory.

The data structure may also include a combination of data values and pixel values. The pixel values may have been provided as part of the graphics control call or may be determined automatically by the development environment . For example a command to draw a circle may specify the center of the circle using a data parameter and the radius of the circle using a pixel parameter. As a specific example the command may be to draw a circle with a center at New York on the horizontal axis and 98 degrees on the vertical axis and that the circle will have a 30 pixel radius. An exemplary data structure could include one or more op codes for drawing a circle with a center identified by those data values and with a radius identified by that pixel value.

The charting component or any other suitable component of the development environment determines at least one display data range as shown in block . This may involve using the set of data item the graphical element and any other appropriate feature of the chart useful in determining appropriate data ranges. In the case where it is a charting component of functional feature of the environment makes this determination it may have been done in response to notice that either the data has changed or a graphic has changed or been added. In the case of a graphics control call to add a graphical element a graphics control sub component may Inform the chart component that there is new data to be displayed. In response the chatting component may ask its sub systems to describe the data ranges needed for each subcomponent and then based on this information determine appropriate data ranges. In certain embodiments these are referred to as the chart s optimal ranges. For example the charting component does not determine ranges from zero to ten million dollars when all of the values it needs to show fall within zero and ten dollars. As part of the determination of at least one data range shown in block the graphics subcomponent may determine the data range needed for its graphics. For example the graphic subcomponent may examines the data structure the stored op codes and or the data values to report back a desired range.

As an example a developer may provide commands to draw boxes on a chart having dollars shown on a vertical axis. The developer may provide a command to draw a box that vertically is going from 10 to 20 and a command to draw a another box that vertically goes from 90 to 100. The charting component may looks at each element inside of it which may be other things besides the box graphics including data representations. With respect to the boxes the graphics subcomponent identifies the ranges for the boxes from 10 to 20 and 90 to 100 and returns that it requires a vertical range that goes from 10 to 100. However the graphics system may also account for borders margins and other display characteristics. For example it may identify that each box requires a 10 pixel border and report that the vertical range needed is from 10 to 100 dollars with 10 pixels above and below it. The charting component then takes the information from the graphics and other subcomponents and figures out its data ranges for example the ranges of one or more of its axes. In the present example the chart may use an algorithm to compile the information and determine appropriate ranges for example it may round the vertical axis range to go from 0 to 110.

While determining the at least one display data range is described here as a multi step multi component process it need not be. For example a single component could be used to determine appropriate display data ranges. Generally such ranges may be determined in any suitable manner that takes into account what is being displayed. The determination may also involve rounding and other human considerations and preferences. Note that a display range may be the axis of a chart and that such an axis may comprise numeric non numeric or custom defined axis values. Note further that a chart may comprises two or more axis and that a data range may be determined for each axis.

After determination of a display data range method may further comprise determining at least one screen coordinate as shown in block . For example such a screen coordinate may be determined for using the at least one display data range corresponding to the data value recorded in the data structure. As further example if axes objects are used to determine the displayed range of a chart this step may comprise using a block of code that further uses the axes objects to convert numeric values into screen coordinates. This step may be combined with the actual drawing of the chart described herein.

The method may further comprise drawing the chart using the at least one display range and the data structure as shown in block . In the multi component example used herein this may involve the charting component calling its subcomponents to draw their respective chart features. For example the graphic subcomponent may be called to draw the graphics defined by the graphics control call. The graphics subcomponent then walks through the data structure for example a list of op codes and data values and now that the display data ranges have been determined can convert the data values of the data structure and or other op code commands into pixel values. Drawing the graphic element may involve use of pixel based and other display characteristics for example a pixel value may be used to specify a box border width that is used when drawing the box.

This process can be essentially repeated each time a developer attempts to add a new graphical element to a chart. Note that graphical elements include but are not limited to lines shapes text photos images bitmap graphics vector graphics buttons lists comments and any other suitable elements or objects that are graphical in nature or that can be inserted and or added at a location in a chart. In addition anytime the data ranges of the chart are required to be changed the chart can be redrawn without requiring the developer to reposition or adjust graphical elements. The graphical elements may simply and automatically be redrawn using the new data ranges and the data structure. For example the chart and its associated graphical elements are redrawn in appropriate positions when the chart changes size has new or real time data added or otherwise changes its axes data ranges.

For example the method may further comprise receiving a change to the data set determining at least one changed display data range reflecting the change to the data set and drawing a changed chart using the at least one changed display data range and the data structure. As another example method may further comprise receiving a change to the graphics control call recording into a changed data structure at least one operation associated with the change to the graphics control call determining at least one changed display data range using the change to the graphics control call and drawing a changed chart using the at least one changed display range and changed data structure.

In the method shown in an editor in a chart development environment receives a graphics control call to add a graphical element to a chart using at least one data value parameter and at least one pixel value parameter as shown in block . For example a developer may have made a call to a drawing API specifying one or more data values and one or more pixel value parameters to be used to determine the display of the graphical element. For example a command to draw a circle may specify the center of the circle using a data parameter and the radius of the circle using a pixel parameter. As additional examples the at least one data value parameter and or pixel value parameter may specify a corner a center or other location aspect of the graphical element as well as the size width radius buffer or other display characteristic of the graphical element in the chart.

The charting component or any other suitable component of the development environment determines at least one display data range as shown in block . This may involve using the set of data items the graphical element and any other appropriate feature of the chart useful in determining appropriate data ranges. As part of the determination of at least one data range the graphics subcomponent may determine the data range needed for its graphics. For example the graphic subcomponent may examine the data structure the stored op codes the data values and or the pixel values to report back a desired range. Typically the data parameter will provide information about the position of the graphic element and the pixel parameter will provide information about a characteristic or feature of the graphic element. However either parameter may be used to specify either feature type. Note that in one embodiment a data structure Is used to record the graphics control call and associated parameters. In other embodiments a different data structure or no data structure is employed.

After determination of a display data range method may further comprise drawing the chart using the at least one display range as shown in block . Drawing the graphic element may involve use of pixel based and other display characteristics for example the at least one pixel value parameter may be used to specify a box border width that Is used when drawing the box whose location is specified by the at least one data value.

A data drawing canvas component may be used in embodiments of the present invention to allow a developer to manipulate the contents of a chart using common drawing functionality and data coordinates instead of x and y pixel coordinates. For example a data drawing canvas may have a moveTo method that is similar to a moveTo method used in a traditional drawing API. Other examples include lineTo drawRect beginFill and curveTo. A developer can use the data drawing canvas component and add new graphic element children to a chart for example boxes circles lines sprites bitmaps buttons checkboxes other charts and virtually any child that can be used in a non chart API.

The graphic objects defined for the canvas have functions that allow data value parameters. For example a line To function could be defined 

A data drawing canvas may be defined as a retained mode graphics API meaning that a line or other graphic drawn on the canvas in relation to one or more data value will stay in the same relation to the one or more data value even through changes to the displayed chart.

Adding components or other display objects to a data drawing canvas can be accomplished by invoking in any suitable way. For example adding components may be accomplished by calling addChild function or by specifying a new object in declarative code.

A data drawing canvas may also utilize a constraint system in which constraints may be set by calling a function for example an updateDataChild function on the data drawing canvas. Such a function could have a format similar to the following 

Parameters may be set using name value pairs with the constraints values a chart developer selects. As an example to bind the top right corner of a label to the position California 270 a developer may specify following 

A data drawing canvas component may be used to draw graphics that require the developer to specify location and pixel dimensions. For example a chart developer may wish to use the drawing API to draw a 10 pixel radius ellipse centered at the point Wyoming 150. Determining how such a graphic will be displayed may require being able to subtract 10 pixels from Wyoming after Wyoming has been converted to pixel coordinates. A data drawing canvas can handle this scenario in any suitable way. For example an API that takes a data coordinate may also take a data coordinate pixel offset pair. For example in the present case a developer would call the drawEllipse function 

The data drawing canvas may convert each first value into pixels and combine each pair before it does its drawing.

The use of a data drawing canvas as described herein eliminates the need for custom chart graphics in a variety of circumstances. In certain embodiments the data drawing canvas is further enhanced with custom elements functions and objects.

In four quadrants are drawn in the background of the chart . In each quadrant draws from the vertical and horizontal lines defined by the data point out to the edges of the chart. In the quadrants are defined by a different data point .

In illustrates an example of labeled quadrants according to one embodiment of the present invention. Quadrants are defined with each quadrant being drawn from the vertical and horizontal lines defined by the data point out to the edges of the chart. Each quadrant is also labeled respectively Underfunded On Target Critical Condition and Underserved . These labels are bounded using constraints to the intersection data point .

In this example the data labels are defined as children or subcomponents of a data drawing canvas object. Each data label subcomponent has a flag includeInRanges that indicates to the chart that the ranges automatically generated for the chart should be large enough to include the graphics and data set values drawn in the data canvas. The developer can select whether to select the flag for each label. In the flag is set to TRUE for three of the four quadrants. Note that the Critical Condition label is partially cut off because its location was not used in determining the range of the canvas.

The foregoing description of the embodiments of the invention has been presented only for the purpose of illustration and description and is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Numerous modifications and adaptations are apparent to those skilled in the art without departing from the spirit and scope of the invention.

