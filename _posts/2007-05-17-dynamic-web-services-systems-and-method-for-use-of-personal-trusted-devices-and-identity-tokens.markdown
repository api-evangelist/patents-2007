---

title: Dynamic web services systems and method for use of personal trusted devices and identity tokens
abstract: The present invention involves one or more computers that provide software controls to enable a web application to interface with a personal trusted device. The server side of the computer system comprises: a server-based framework process; a device for receiving requests from the client computer and determining which software controls to send in response; and a device for digitally signing and encrypting the software controls before sending them to the client computer so that their authenticity can be verified. The client side of the computer system comprises: a client web browser that runs on a computer; a device for transmitting requests to the server computer and for receiving responses from those requests; a device for decrypting software controls so that the authenticity of their digital signature can be verified; and a connection to one or more personal trusted devices. An authentication proxy may be used to mutually authenticate a client user and server process using personal trusted devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364968&OS=08364968&RS=08364968
owner: Symantec Corporation
number: 08364968
owner_city: Mountain View
owner_country: US
publication_date: 20070517
---
The present application claims priority under 35 U.S.C. 119 e of U.S. Patent Provisional Application Ser. No. 60 747 703 filed May 19 2006 the disclosures of which are explicitly incorporated by reference.

The invention relates to identity authentication systems and methods. More specifically the field of the invention is that of server based software for verification and authentication of the client user.

The growth of the Internet and the wide availability of broadband and other high speed access to the Internet have made it more feasible for applications to be offered as web based services instead of software that must be purchased and installed on individual client computing devices. Many of these web based applications use development techniques that make the applications feel more responsive by exchanging only small amounts of data between the user s interface and the server. These techniques make it possible to increase an application s interactivity usability and speed without requiring installation of software on the user s machine.

The use of web based services as replacements of installed software makes it necessary for the application to be able to authenticate the user of the application. Authentication verifies that the user is allowed to use the application and verifies that the user is only able to access authorized data. As the need for security increases traditional password systems are no longer able to provide sufficient security. Identity authentication is more frequently being provided through a variety of methods including the use of personal trusted devices and identity tokens such as smart cards or biometric scanners.

Personal trusted devices and identity tokens have many varied methods for authenticating a user s identity and allowing access to secure applications or data. However because of the very nature of security requirements the operating systems and software algorithms that drive these devices cannot be open. The application providers and the makers of personal trusted devices and identity tokens must create integrations between their systems to allow an application to be able to understand the authentication provided by the device or token.

The non dynamic nature of communication between the applications and the devices or tokens means that a person who has such a device or token is only able to use it for authentication with previously enabled applications. The design and programming necessary to integrate a particular application with a particular device or token is platform and browser specific and often requires the installation of software on the user s machine. This often requires specific hardware and software modifications to the user s machine in order to install a new device or token significant work is required. Management of current identity and verification devices and tokens is a difficult task which consumes significant information technology resources.

The present invention provides a server based framework for utilizing personal trusted devices PTDs such as identity tokens through web applications while not requiring initial footprint installation on the client computing device. A Virtual Machine VM is sent from the server based framework to the client web browser as part of the Token Browser Control TBC . The VM requires that all requests made to the PTD are digitally signed and encrypted by a trusted source. The VM is used as an engine to broker communications between the Token Agent API TAA Token Specific Modules TSMs and the PTD. The TAA is dynamically provided by the web server so it can change or be updated dynamically to match the capabilities of the available PTD and the functionality required by the web application. Also the Application Program Interface API masks the specific browser and platform type providing functionality that is not dependent on a particular browser or platform. This provides access to exactly the capabilities that the web application needs in order to utilize the PTD without requiring custom programming for each combination of PTD platform and browsers.

The present invention identifies the presence type and data model of a PTD through a Token Discovery Module TDM that is requested from the web server by the TAA. Once the PTD has been identified the server based framework sends the appropriate Token Specific Module TSM to the VM to be used by the web application. The web application uses the TSM only through the TAA. This provides an abstract and agnostic interface to the web application and maintains a secure interface to the PTD. This model allows changes in the PTD and its data models and capabilities while only requiring that additional TSMs be available from the server.

The benefits of this model over previous methods include centralized support for new types of PTDs and data models without any footprint on the client machine multiple token types and data models can be centrally supported are auto configured and are seamless to the user new PTD applications can be provided through an application service provider model all modules except the TBC are platform independent each module has a digital signature that is checked by the TBC for self verification and web applications need not be customized to interface with any specific PTD. Although the TBC must be customized from the particular hardware and software of the client machines the module design of the system allows for the TBC to be relatively small in comparison to other system components enhancing the efficiency and effectiveness of the system.

The present invention in one form relates to a method for interfacing a web application to a PTD comprising the steps of a user accessing a web application that requires access to a PTD the user s client web browser downloading or updating a browser control that will download the appropriate controls for the application to interface with the PTD the digital signing encryption and decryption of the controls to ensure security and the authentication of a transaction when the PTD is verified. The user may access a web application using one of a personal computer connected to a communications network a web enabled cell phone a web enabled PDA or other wired or wireless computing device that is able to access a server. The PTD may be a biometric device or a smart card or other identity verification device.

The present invention in another form is one or more computing devices for providing software controls to enable a web application to interface with a PTD. The server side of the computer system comprises a server based framework process a device for receiving requests from the client computing device and determining which software controls to send in response and a device for digitally signing and encrypting the software controls before sending them to the client computing device so that their authenticity can be verified. The client side of the computer system comprises a client web browser that runs on a client computing device a device for transmitting requests to the server computer and for receiving responses from those requests a device for decrypting software controls so that the authenticity of their digital signature can be verified and a connection to one or more PTDs.

Another aspect of the invention relates to a machine readable program storage device for storing encoded instructions for a method of authenticating an account transaction according to the foregoing method.

Another aspect of the invention relates to an SSL Proxy or TrustBearer . The HTTP Proxy is an intermediary program or communications gateway between the server and a client ensuring that exchanges of data between the two are secure. The proxy receives a browser request and connects to an outside server via SSL. The proxy validates the external certificate using an internal certificate store and revocation checks. The proxy then creates an intermediate certificate that has the same properties as the external certificate except that the Certificate Authority is the proxy itself. The proxy responds to the browser request by creating a session using the intermediate certificate. The proxy agent may then be used to broker legacy authentication methods while providing an additional level of authentication.

The secured TrustBearer Proxy enables injection of passwords such that they are not exposed on the client machine. Passwords are stored in an internal database Password Store using multiple encryption keys. The user s public key and a TrustBearer diversified key are used. To decrypt TrustBearer passes the data to the client machine. The client machine decrypts the data using its private key and passes it to the TrustBearer proxy. TrustBearer decrypts the final result using a diversified key.

Embodiments of the invention provide systems and software platforms for Personal Trusted Devices PTDs including but not limited to smart cards biometrics readers USB key fobs RFID key fobs and wireless telephones that a abstract PTD communication methods data models authentication models and capabilities into a single application programming interface used for online applications b provide methods for supporting platform specific PTD s using platform agnostic measures c need no prior installation of software requiring elevated or administrative rights on client computers d work in the same manner across various and diverse operating systems architectures and web browsers including but not limited to Microsoft Windows Macintosh OS X Solaris and Linux Operating systems and Internet Explorer Safari and Firefox web browsers and e supports new PTD s through a central service which distributes support modules that contain a single computer software script that can be used across all supported client platforms browsers and hardware architectures. Such embodiments may dynamically chain support modules based on the functionality needed by the web application and verify the integrity of support modules using digital signature verfication prior to inclusion and execution of the support modules. Further embodiments may cache support modules for offline usage of the software platform which may then be updated as needed using version control when the client is connected online.

Other embodiments may derive a unique identifier from the PTD used for tracking and trend analysis. Such embodiments may restrict PTD usage and authentication handshaking only to limited trusted sites and thereby thwart phishing style attacks. They may also uniquely identify PTD s using a combination of PTD attributes and tracks unsupported PTD s for trend analysis and generate events from the support modules based on PTD usage which are centrally recorded and used for statistical analysis then used for threat analysis system optimization and trend recognition. This may enable single central deployment of online applications using a single application programming interface for usage of PTD s which may assign unique usage behavior to the PTD and online application based on registration language and localization usage trends and user customizations. Further such embodiments may link existing issued PTD s to legacy online authentication mechanisms such as passwords and provide digital signatures using PTD s for online applications including but not limited to voting notary contracts financial transactions and approval processes so that strong authentication using PTD s is provided for online applications. This may further allow providing online updates and personalization of PTD s and encryption and decryption capabilities using PTD s for online transmission of secure data.

Corresponding reference characters indicate corresponding parts throughout the several views. Although the drawings represent embodiments of the present invention the drawings are not necessarily to scale and certain features may be exaggerated in order to better illustrate and explain the present invention. The exemplification set out herein illustrates embodiments of the invention in several forms and such exemplifications are not to be construed as limited the scope of the invention in any manner.

The embodiments disclosed below are not intended to be exhaustive or limit the invention to the precise form disclosed in the following detailed description. Rather the embodiments are chosen and described so that others skilled in the art may utilize their teachings.

The detailed descriptions which follow are present in part in terms of algorithms and symbolic representations of operations on data bits within a computer memory representing alphanumeric characters or other information. These descriptions and representations are the means used by those skilled in the art of data processing arts to most effectively convey the substance of their work to others skilled in the art.

An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. These steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It proves convenient at times principally for reasons of common usage to refer to these signals as bits values symbols characters display data terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely used here as convenient labels applied to these quantities.

Some algorithms may use data structures for both inputting information and producing the desired result. Data structures greatly facilitate data management by data processing systems and are not accessible except through sophisticated software systems. Data structures are not the information content of a memory rather they represent specific electronic structural elements which impart a physical organization on the information stored in memory. More than mere abstraction the data structures are specific electrical or magnetic structural elements in memory which simultaneously represent complex data accurately and provide increased efficiency in computer operation.

Further the manipulations performed are often referred to in terms such as comparing or adding commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary or desirable in most cases in any of the operations described herein which form part of the present invention the operations are machine operations. Useful machines for performing the operations of the present invention include general purpose digital computers or other similar devices. In all cases the distinction between the method operations in operating a computer and the method of computation itself should be recognized. The present invention relates to a method and apparatus for operating a computer in processing electrical or other e.g. mechanical chemical physical signals to generate other desired physical signals.

The present invention also relates to an apparatus for performing these operations. This apparatus may be specifically constructed for the required purposes or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer. The algorithms presented herein are not inherently related to any particular computer or other apparatus. In particular various general purpose machines may be used with programs written in accordance with the teachings herein or it may prove more convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description below.

The present invention deals with object oriented software and particularly with an object oriented operating system. The object oriented software is organized into objects each comprising a block of computer instructions describing various procedures methods to be performed in response to messages sent to the object or events which occur with the object. Such operations include for example the manipulation of variables the activation of an object by an external event and the transmission of one or more messages to other objects.

Messages are sent and received between objects having certain functions and knowledge to carry out processes. Messages are generated in response to user instructions for example by a user activating an icon with a mouse pointer generating an event. Also messages may be generated by an object in response to the receipt of a message. When one of the objects receives a message the object carries out an operation a message procedure corresponding to the message and if necessary returns a result of the operation. Each object has a region where internal states instance variables of the object itself are stored and where the other objects are not allowed to access. One feature of the object oriented system is inheritance. For example an object for drawing a circle on a display may inherit functions and knowledge from another object for drawing a shape on a display.

A programmer programs in an object oriented programming language by writing individual blocks of code each of which creates an object by defining its methods. A collection of such objects adapted to communicate with one another by means of messages comprises an object oriented program. Object oriented computer programming facilitates the modeling of interactive systems in that each component of the system can be modeled with an object the behavior of each component being simulated by the methods of its corresponding object and the interactions between components being simulated by messages transmitted between objects. Objects may also be invoked recursively allowing for multiple applications of an object s methods until a condition is satisfied. Such recursive techniques may be the most efficient way to programmatically achieve a desired result.

An operator may stimulate a collection of interrelated objects comprising an object oriented program by sending a message to one of the objects. The receipt of the message may cause the object to respond by carrying out predetermined functions which may include sending additional messages to one or more other objects. The other objects may in turn carry out additional functions in response to the messages they receive including sending still more messages. In this manner sequences of message and response may continue indefinitely or may come to an end when all messages have been responded to and no new messages are being sent. When modeling systems utilizing an object oriented language a programmer need only think in terms of how each component of a modeled system responds to a stimulus and not in terms of the sequence of operations to be performed in response to some stimulus. Such sequence of operations naturally flows out of the interactions between the objects in response to the stimulus and need not be preordained by the programmer.

Although object oriented programming makes simulation of systems of interrelated components more intuitive the operation of an object oriented program is often difficult to understand because the sequence of operations carried out by an object oriented program is usually not immediately apparent from a software listing as in the case for sequentially organized programs. Nor is it easy to determine how an object oriented program works through observation of the readily apparent manifestations of its operation. Most of the operations carried out by a computer in response to a program are invisible to an observer since only a relatively few steps in a program typically produce an observable computer output.

In the following description several terms which are used frequently have specialized meanings in the present context. The term object relates to a set of computer instructions and associated data which can be activated directly or indirectly by the user. The terms windowing environment running in windows and object oriented operating system are used to denote a computer user interface in which information is manipulated and displayed on a video display such as within bounded regions on a raster scanned video display. The terms network local area network LAN wide area network or WAN mean two or more computers which are connected in such a manner that messages may be transmitted between the computers. In such computer networks typically one or more computers operate as a server a computer with large storage devices such as hard disk drives and communication hardware to operate peripheral devices such as printers or modems. Other computers termed workstations provide a user interface so that users of computer networks can access the network resources such as shared data files common peripheral devices and inter workstation communication. Users activate computer programs or network resources to create processes which include both the general operation of the computer program along with specific operating characteristics determined by input variables and its environment.

The terms desktop personal desktop facility and PDF mean a specific user interface which presents a menu or display of objects with associated settings for the user associated with the desktop personal desktop facility or PDF. When the PDF accesses a network resource which typically requires an application program to execute on the remote server the PDF calls an Application Program Interface or API to allow the user to provide commands to the network resource and observe any output.

The term Browser refers to a program which is not necessarily apparent to the user but which is responsible for transmitting messages between the PDF and the network server and for displaying and interacting with the network user. Browsers are designed to utilize a communications protocol for transmission of text and graphic information over a world wide network of computers namely the World Wide Web or simply the Web . Examples of Browsers compatible with the present invention include the Navigator program sold by Netscape Corporation and the Internet Explorer sold by Microsoft Corporation Navigator and Internet Explorer are trademarks of their respective owners . Although the following description details such operations in terms of a graphic user interface of a Browser the present invention may be practiced with text based interfaces or even with voice or visually activated interfaces that have many of the functions of a graphic based Browser.

Browsers display information which is formatted in a Standard Generalized Markup Language SGML or a HyperText Markup Language HTML both being scripting languages which embed non visual codes in a text document through the use of special ASCII text codes. Files in these formats may be easily transmitted across computer networks including global information networks like the Internet and allow the Browsers to display text images and play audio and video recordings via Hyper Text Transmission Protocol HTTP . The Web utilizes these data file formats to conjunction with its communication protocol to transmit such information between servers and workstations. Browsers may also be programmed to display information provided in an eXtensible Markup Language XML file with XML files being capable of use with several Document Type Definitions DTD and thus more general in nature than SGML or HTML. The XML file may be analogized to an object as the data and the style sheet formatting are separately contained formatting may be thought of as methods of displaying information thus an XML file has data and an associated method .

The terms personal digital assistant or PDA as defined above means any handheld mobile device that combines computing telephone fax e mail and networking features. The terms wireless wide area network or WWAN mean a wireless network that serves as the medium for the transmission of data between a handheld device and a computer. The term synchronization means the exchanging of information between a handheld device and a desktop computer either via wires or wirelessly. Synchronization ensures that the data on both the handheld device and the desktop computer are identical.

 SSL or Secure Sockets Layer is a high level security protocol protecting the confidentiality and security of data while it is being transmitted through the Internet. Based on RSA Data Security s public key cryptography SSL is an open protocol that has been submitted to several industry groups as the industry security standard. Denoted by the letters HTTPS in the URL.

In wireless wide area networks communication primarily occurs through the transmission of radio signals over analog digital cellular or personal communications service PCS networks. Signals may also be transmitted through microwaves and other electromagnetic waves. At the present time most wireless data communication takes place across cellular systems using second generation technology such as code division multiple access CDMA time division multiple access TDMA the Global System for Mobile Communications GSM personal digital cellular PDC or through packet data technology over analog systems such as cellular digital packet data CDPD used on the Advance Mobile Phone Service AMPS .

The terms wireless application protocol or WAP mean a universal specification to facilitate the delivery and presentation of web based data on handheld and mobile devices with small user interfaces.

In an exemplary embodiment home location is used by user one work location is used by user two web enabled cellular telephone is used by user three and web enabled PDA is used by user four . User one user two user three and user four utilize a network communication medium for example a client computing device. As will be described later the same user may use the invention at multiple locations while using their personal trusted device or identity token such as a user key fob not shown .

The methods and apparatus for providing dynamic use of personal trusted devices and identity tokens is preferably provided and supported by an Internet content provider operating a predetermined Internet site which may have one or more locations and operate one or more web servers such as web server one and web server two . illustrates two web servers but a content provider is not limited in the number of web servers it may utilize. Web server one includes multiple applications i.e. application one application two and application three while web server two includes one application i.e. application four . Each of the servers may host one or more web applications and a single web application may be located on one or more servers. In addition the content provider may place applications and on any web server in any manner known or to become known in the art. Further properties of the interaction between the users client computing devices and the web servers and applications are described later with reference to .

DSMs may be pre existing or be generated upon request. DSMs include byte code that run in Virtual Machine VM on client web browser . One type of DSM Token Agent API TAA exposes to client applications a safe API that allows only restricted access to local system services. Another type of DSM Token Discovery Module TDM discovers the types of Personal Trusted Devices or Identity Tokens PTDs available to client web browser so that a more specialized DSM may be requested examples of PTDs include but are not limited to smart cards biometrics readers USB key fobs with flash memory user key fobs with RFID tags and wireless telephones . A third type of DSM Token Specific Module TSM provides specialized functionality for utilizing and managing specific token such as verifying the identity of an individual using the client computing device.

Web server stores Token Browser Controls TBCs which include binary components that are capable of running on client web browser . These TBCs consist of API that connects client side script e.g. JavaScript etc. and user interfaces to Virtual Machine VM . Virtual Machine runs DSM code and has full access to local system services on the client machine e.g. PC SC OpenSSL etc. . Module Verifier MV decrypts signed DSM code and verifies its authenticity.

Each client computing device runs standard web browser e.g. Internet Explorer Firefox Safari etc. . A user who desires to access one of web applications directs client web browser to initial web page that allows access to web application and that contains client side scripts and a visual interface for accessing web application . In a process that is described in more detail in reference to an identifying module Token Browser Control TBC is loaded from web server as a service request module to enable the client computing device to send and receive service requests to and from the server. This TBC is a binary component that is sent from web server and installed on the local client computing device. TBC consists of API to access local computer services and interact with an identifying device on the client computing device Virtual Machine VM to run DSM code and Module Verifier that decrypts and verifies DSM code.

DSMs are downloaded from web server in response to requests made by the client computing device. DSMs include byte code that runs in Virtual Machine VM on client web browser . One type of DSM Token Agent API TAA exposes to client applications a safe API that allows only restricted access to local system services. Another type of DSM Token Discovery Module TDM may discover the types of PTD available to client web browser so that a more specialized DSM may be requested. A third type of DSM Token Specific Module TSM provides specialized functionality for utilizing and managing a specific PTD .

Referencing a more detailed description of the process flow that occurs when the client computing device requests a transaction that requires access to an attached identifying device between web server client web browser and PTD follows. First client web browser connects to web server using a supported web browser. The initial web page containing web application gets downloaded from web applications of web server to client web browser . Second client web browser checks to see if Token Browser Control TBC exists on the client computing device. If it does not exist or is not up to date client web browser requests a download of web server TBC and installs it on the local client computing device. Client side TBC includes a Virtual Machine VM Mapping API for modules and Module Verifier MV . MV may validate any signed modules that TBC requests from web server via web server side Token Brokering Framework TBF . MV validates these modules using certificate based verification. Third Token Agent API TAA is loaded into TBC after TBC is installed. Client side TAA is responsible for loading and verifying token modules as well as brokering web application requests to the appropriate loaded module. Fourth when web application makes a request to PTD Client side TAA requests Token Discovery Module TDM which is loaded into the TBC . Client side TDM ascertains the presence and type of PTD . MV validates the signature of TDM . Fifth TDM ascertains the presence of PTD and ascertains the type of PTD and provides configuration information for TAA which requests the appropriate Token Specific Module TSM to be retrieved. The client receives correct TSM which Module Verifier validates for authenticity. Sixth web application may now utilize TAA which utilizes TSM as an abstract means of communicating to a variety of PTD types on demand to authenticate a transaction with information from the identifying device.

Another aspect of the invention relates to an authentication proxy or TrustBearer Access . TrustBearer Access is an intermediary program or communications gateway between the server and a client that provides for alternative authentication processes to identify the client to the server. The proxy authenticates that the site is a valid TrustBearer Access using an internal list. If the site is not on the internal list then the site is denied access to the TAA. The proxy agent may then be used to broker legacy authentication methods and add another level of authentication to the legacy method e.g. username and password . Further by using a diversified key that is a key that has two or more encryption key components e.g. a biometric key and a device serial number a user s authentication credentials may be protected during transactions and transmission over the network.

The secured TrustBearer Access enables a user to authenticate with passwords without exposing them to the client machine. Passwords are stored in an internal database Password Store using multiple encryption keys. The user s public key TrustBearer diversified key and an account key are used. To decrypt TrustBearer Access passes a doubly encrypted symmetric key to the client machine. The client machine decrypts one layer of the key using its private key and passes it to TrustBearer Access. TrustBearer Access decrypts the key using a diversified key and then uses the resulting key to decrypt the password stored in the database. This password is in turn communicated securely to the server in order to authenticate the user.

To start the linking process a valid password is collected from the user and encrypted with a random symmetric key in step . This symmetric key is encrypted with the server s public key in step . This key is next encrypted in step with the public key from the certificate obtained from step . The doubly encrypted symmetric key encrypted password certificate and other associated user data are transmitted and stored securely on the proxy in its internal database in step . Item describes the algorithms to produce the first parts of the data transmitted for step .

The login process is initialized by using the TAA to authenticate the user to the PTD by a authentication method such as PIN or Biometric match in step . The TAA is then used to unwrap or partially decrypt the ServerKey encrypted symmetric key in step . This encrypted symmetric key is then sent to the proxy to be decrypted and then used to decrypt the password in step . The other associated user data from the internal database and the decrypted password are then used to authenticate the user to the server in step . Each level or layer of key encryption provides an additional wrap on user data sent between the processes involved in the authentication procedure. It would be further possible to add more layers of wrapping as the technology and level of desired security increases.

The methodologies described above may also dynamically chain support modules based on the functionality needed by a web application. Any type of support module may be verified using digital signature verification prior to inclusion and execution of the support modules. The client machine may cache support modules for offline usage of the software platform and the server may update client machines as needed using version control when the client is connected online. The software of the system may further derive a unique identifier from the PTD used for tracking and trend analysis wherein logging of client events may be maintained in a database which is then subject to conventional data analysis. Transaction information relating to the identifying module may be stored and conventional data mining performed on such transaction information for purposes of usage trend recognition to tailor user customizations. The software may uniquely identify PTD s using a combination of PTD attributes and may further track unsupported PTD s for trend analysis. In a similar vein the software may generate events from the support modules based on PTD usage which may then be centrally recorded and used for statistical analysis for example for threat analysis system optimization and trend recognition. Software may additionally assign unique usage behavior to each PTD and online application based on one or more of the following registration language and localization usage trends and user customizations and thus link existing issued PTD s to legacy online authentication mechanisms such as passwords.

Security may be further enhanced by restricting PTD usage and authentication handshaking only to limited trusted sites so that phishing style attacks may be thwarted by the software blocking transmission of sensitive or identifying information to such untrusted sites. Such management of PTD software via a web server enables a central deployment of online applications using a uniform application programming interface for usage of PTD s. Such management of PTD s may further support digital signatures using PTD s for online applications including but not limited to voting notary contracts financial transactions and approval processes. In addition to the strong authentication using PTD s for online applications such a web based system may provides online updates and personalization of PTD s and encryption and decryption capabilities using PTD s for online transmission of secure data.

While this invention has been described as having an exemplary design the present invention may be further modified within the spirit and scope of this disclosure. This application is therefore intended to cover any variations uses or adaptations of the invention using its general principles. Further this application is intended to cover such departures from the present disclosure as come within known or customary practice in the art to which this invention pertains.

