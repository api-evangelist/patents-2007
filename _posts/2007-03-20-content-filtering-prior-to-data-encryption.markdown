---

title: Content filtering prior to data encryption
abstract: A system (and a method) evaluates raw data from an application prior to modification of the raw data. The system inserts injection code into an application. The injection code is configured to hook an application. The application is configured to allow modification of the raw data. Modification includes encryption and/or compression. The system analyzes the raw data in a context of a predefined policy in response to the executing application reaching the injected code during execution. The system instructs the application to cease operating on the raw data in response to the predefined policy prohibiting further processing of the raw data or instructs the application to bypass the injection code in response to the predefined policy no prohibiting processing of the raw data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468595&OS=08468595&RS=08468595
owner: Trend Micro Incorporated
number: 08468595
owner_city: Tokyo
owner_country: JP
publication_date: 20070320
---
This application claims a benefit of U.S. Patent Application Ser. No. 60 785 296 entitled Content Filtering Prior to Data Encryption filed Mar. 22 2006 the contents of which is hereby incorporated by reference.

This application is related to U.S. Provisional Patent Application Ser. No. 60 679 458 entitled Architecture of Cascading Security Solution filed on May 9 2005 and U.S. patent application Ser. No. 11 413 754 entitled Cascading Security Architecture filed Apr. 27 2006 the contents of which are hereby incorporated by reference.

The disclosure relates generally to the field of data security technologies and more specifically to information leak prevention technologies.

Conventional information leak prevention technologies including conventional filters such the anti virus firewall anti spam filters increasingly are being designed to conduct real time content analysis on network traffic and endpoint data access in order to solve increasing security problems present in networked environments. However these conventional filters are not structured to conduct real time content analysis on encrypted or compressed data traffic.

By encrypting or compressing data traffic for example with passwords before passing through conventional security filters malicious software or virus exploit information security holes to bypass the content checking. Thus conventional filtering technologies are insufficient to protect sensitive information or detect the intrusion and extrusion due to a lack of processes to check encrypted data traffic costs associated with implementing algorithm brute force for decryption and an addressing an unwieldy number of false positives raised when performing only a behavior based analysis.

The disclosure generally relates to data security technologies and more particularly to information leak prevention technologies. Information leak prevention technologies protect against document leakage from end points within and from an enterprise network. Further information leak technologies can extend to other network security areas for example network intrusion detection.

In one embodiment a system and method is configured to perform a deep content analysis on encrypted data by capturing the raw data before encryption. By way of example consider HTTPS hypertext transfer protocol secure or HTTP SSL network traffic in which raw HTTP data is encrypted using a supporting SSL secured socket layer library. The encrypted data passes down to an under layer TCP IP transmission control protocol internet protocol socket and sent out onto a network. Leveraging a code injection mechanism for example an API application programming interface hooking technique in one embodiment the system enters or breaks into the supporting encryption library. This allows an external content analysis process to hold execution of a monitored process at some point within the code execution while the injected or inserted code executes at this hooked entry point. The external content analysis process then extracts the raw data from the monitored process to verify or analyze the raw data before determining whether to allow it to continue processing for encryption.

The system captures the raw application data as it existed prior to encryption. The system holds the original execution thread while doing deep content analysis on the raw data. Using predefined or pre configured security policies the system determines whether to block activity involving the data or allowing the activity and data to continue processing.

The system and method is beneficially is applicable to processing and real time analysis of many different types forms of encrypted user data for example SSL PGP pretty good privacy ZIP zone information protocol files and the like. In addition the system advantageously can be used in any content related detection and protection configurations.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the disclosed subject matter.

The Figures FIGS. and the following description relate to preferred embodiments herein by way of illustration only. It should be noted that from the following discussion alternative embodiments of the structures and methods disclosed herein will be readily recognized as viable alternatives that may be employed without departing from the principles disclosed herein.

Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict various embodiments for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

For an architectural overview reference is made by way of example to an embodiment for managing a lifecycle for documents with respect to endpoints e.g. desktop computer laptop mobile phone personal digital assistant storage device or other outlet for data in a document management system. In such an example configuration a system determines whether a document contains sensitive information and protects the document from unauthorized accessed based on the determination. Although described by way of example it is noted that the principles described herein may apply to other security applications and architectures.

In one embodiment a document management system is configured or adapted to detect and track sensitive documents in the endpoints of the system. Each endpoint of a network has filters identifying documents being processed by the endpoint. A behavior analysis engine detects the process activities applied to the documents and identifies a behavior s based on the detected process activities. A local matching service determines whether the documents contain sensitive information by applying one or more multiple matching techniques.

Alternatively the behavior analysis engine detects documents that are related to the identified documents and the local matching service determines whether the identified documents contain sensitive information by determining whether the related documents contain sensitive information. If a document is determined to contain sensitive information the system creates a record for the document and adds the record to a black list. A local policy engine determines whether to allow or to block the current process activities based on the behaviors the content of the documents and applicable security policies.

In another embodiment a document management system is configured to detect sensitive documents being exported out of the endpoints of the system. For a given document the system analyzes the document by checking whether a record of the document is in a black list. If no such record is present in the list the system determines whether the document contains sensitive information by applying one or more multiple matching techniques. If the document is determined to contain sensitive information the system creates a record for the document and adds the record to a black list and a local policy engine determines whether to allow to block or to encrypt the document before being exported out of the endpoint.

Additional architectural details for the example are described in U.S. patent application Ser. No. 11 413 754 entitled Cascading Security Architecture filed Apr. 27 2006 the contents of which are hereby incorporated by reference. It is noted that for ease of discussion reference will be made to a cascading security architecture for example as described in U.S. patent application Ser. No. 11 413 754 and in particular to a behavior analysis engine a local policy engine and a local match service.

In general a behavior analysis engine is configured to analyze the behaviors of all active applications in an endpoint. It can identify documents relevant to the document in motion identified by an agent. The behavior analysis engine also can be configured to keep track and analyze certain user process activities captured by the agents such as print print screen copy cut and paste send via email upload through network save save as and the like. It can identify user behaviors such as intentional scrambling of sensitive documents based on the current user process activity the analysis and a collection of activity to behavior patterns. In one embodiment the behavior analysis engine includes a code injector that injects code as described herein.

Further in general the local policy engine is configured to contain security policies. The security policies define a set of restrictions on document access and control e.g. limiting access or modification rights of certain sensitive documents to certain categories of users device input output I O e.g. prohibiting exportation of sensitive documents without encryption and certain user behaviors e.g. prohibiting duplicating the content of sensitive documents . In one embodiment the security policies are defined and maintained in a central policy service in a server and are synchronized with the local policy engine when an endpoint boots up or is otherwise initialized . The local policy engine can also be configured to determine how a document is analyzed to detect sensitive information. In one embodiment the local policy engine along with a local match service are configured to provide an analysis application as further described herein. The local match service determines whether a given document contains sensitive information which may be defined by keywords or patterns or document classification.

Turning now to it illustrates one embodiment of an architecture and technique or process for encrypted content filtering. The architecture takes into account one or more user applications raw data injected code an encryption library encrypted data and data input and output. The injected code is from an encrypted content filter which includes one or more analysis applications or analysis application engine and a code injector .

Referring particularly to each component within the architecture in one embodiment the one or more user applications include for example any software applications or processes that access encrypted data or files on a computer readable media. Examples of a user application include encryption software an archival tool such as WinZip a web browser an electronic mail email reader text or an image editor communication utilities such as an FTP client a peer to peer P2P application an instant messenger application a voice or video application such as an Internet protocol IP phone and the like. It is noted that the one or more applications may be referenced as a target which when executed may be referenced as a target process.

The raw data in one embodiment includes unencrypted data used by the one or more user applications . Based on the particular user application the raw data includes for example the original data content the email text the message body the voice or video stream data and the like. In addition the raw data may include inbound or outbound non encrypted data flow for user application . Accessing the raw data prior to encryption beneficially provides for analysis prior to encryption and thus provides greater control over security. Processes for extraction of the raw data may vary based on different applications have different ways for managing their raw data. For example an instant message IM client application can be configured to open a file itself read out the file content point A encrypt the file content and send it out to another peer. The injected code in accordance with the embodiments disclosed herein copies out the raw data during this process e.g. at point A for analysis as disclosed herein.

The injected code in one embodiment includes computer instructions or program code that is inserted or injected into the target or application to execute or run in a context of the target application process. The injected code is configured to extract or capture the raw data create or generate a communication pipe and send the captured raw data to the analysis application . The injected code also is configured to hold target process and wait for verification results from the analysis application . Once the results are received the injected code performs the returned action from the analysis application e.g. resume processing or fail out .

By way of example the injected code initially may be injected by the code injector using a hooking injection technique for example API hooking. In this context of hooking the code injector inserts or hooks the appropriate code as described herein for analyzing the raw data prior to the application continuing on its execution path e.g. before the data is encrypted . In particular the injected code executes in response to calling the hooked API or execution address entry. In one embodiment a hooking point can be structured inside an encryption library but prior to application of any encryption codes . In another embodiment a hooking point is outside of the encryption library before calling the API or entry .

Further it is noted that different applications may have different hooking points. Factors for evaluating hooking points include determining which hooking technique is used and the execution path to cover. For example to cover HTTPS traffic the system may be configured to hook two or three APIs in the SSL library or hook twenty or thirty APIs in different applications. It is noted that based on the implementation of a particular hooking technique the system can be configured to hook at the most efficient place to access the raw content before encryption happens.

The executing injector code also creates a communication pipe between itself and the analysis application of the encrypted content filter to transfer the captured raw data . The injector code also receives the analysis results and action commands from the analysis application . In response to action commands it can decide to fail the current API or bypass the current API.

Action commands include commands such as block the processing or pass the processing down in the flow of the executing application. In addition action commands can be decided based on the predefined security policy for example where there is identified sensitive data traffic or the like. Where the predefined security policy identifies sensitive data traffic further processing may be blocked within the application. Alternatively the process could continue but the event and the data are logged into the system. The blocked processing may include halting further execution or the application or re routing the application to another point within the application that would not result in breach of the policy e.g. divert processing to a next logical processing point or ending point within the application without the violating steps being executed . If the security policy is found not to be violated further processing may be continued within the application without blockage or diversion. Thus action commands can be used to block or allow the encrypted data sent out from the endpoint.

The encrypted content filter provides a filtering mechanism through the one or more analysis application engines and the code injector . In one embodiment the code injector is configured to inject the hooking codes into a target application in memory in real time or before the target API is initialized. The injected hooking codes can be configured to process in either a user mode or a kernel mode.

In one embodiment the use of a particular mode may depend on the particular hooking mechanism. For example the code injector could be a kernel mode device driver windows or user mode application which can access other process s memory space. The kernel mode driver or injector typically has higher priority than user applications. Thus a kernel mode configuration allows for access of process memory and modification of execution codes real time e.g. immediately or on the fly in memory. It addition this mode can be configured to monitor all the user mode application s loading into memory. This means that the kernel mode configuration is configured to inject or hook the target process in time to copy the injected code to the target process memory before the target process encryption is executed.

The user mode application or injector may be configured to inject code by the help of documented or undocumented APIs. For example the user mode injector can modify the target process memory and copy the injected codes into that memory space. Additional types of hooking codes that may be injected include for example device driver code injection Microsoft Detour hooking library Microsoft WriteProcessMemory . . . APIs third party code injection or application programming interface API hooking libraries or modules and the like.

In one embodiment the analysis application comprises any executable process or application that communicates with the injected code through per process communication methods. By way of example the analysis application creates a listening communication pipe to talk with the injected codes. In one embodiment listening and talking includes communicating with the injected code through the established communication pipe once the injected code is executed. In particular the injected code connects to the listening socket pipe in the analysis application and once connected passes over the captured raw data through this pipe so that it can be analyzed.

Once the analysis application receives any pieces of raw data reported it can reassemble the raw data and perform a deep content analysis on the raw data . The analysis application may send an action command back to control the execution of target process. In view of one or more predefined security policies the analysis application can make a final decision to block or allow this transaction then notify the related injected codes to perform the action commands e.g. block log or allow the target process execution .

In one embodiment an encrypted content filtering technique uses the code injector the injected code pieces and the analysis application . By way of example in a Microsoft Windows operating system platform the code injector may be configured as a kernel mode device driver that performs continuous monitoring of loaded and executing applications . The code injector injects the hooking codes as soon as the target library or executable files are loaded or launched executed . The analysis application may be configured as a user mode Windows service to communicate with injected code to get the raw data and send back the control commands to the injected code based on the analysis results and the security policy.

The control commands correspond to pre determined or pre configured policies as to how the application should continue processing based on characteristics of the deep analysis of the raw data. For example if the analysis identifies certain keywords or grouping of keywords identified as highly sensitive the predefined policy may cause the analysis application to return an instruction command to terminate or fail the executing application target . If the analysis determines that there are no issues relative to the predefined policies the analysis application would return a bypass instruction i.e. continue with the processing path. Alternatively the system can be structured to create and execute predefined policies for example striping out some of the raw data e.g. sensitive words and allow the processing to continue without the stripped out data.

When continuing with the processing path the data is ready for encryption using the encryption library . In one embodiment the encryption library includes any data encryption library or modules used by the one or more user applications . The encryption library uses the raw data as input and produces the encrypted data to lower layer software for further processing. Examples of the encryption library include SSL libraries data compression libraries e.g. ZIP or RAR PGP encryption libraries and the like.

The encrypted data in one embodiment includes the output of the encrypted library . For example it is the encoded data related to the raw data . The data input and output in one embodiment includes the under layer of encryption library . Once it captures the encrypted data it stores saves or exports the data.

Reviewing the process in more detail it starts with an analysis application running as a system service within the operating system e.g. Windows . An application program for example the Internet Explorer IE browser program is launched. At initialization supporting dynamic link libraries e.g. shlwapi.dll wininet.dll and other libraries start to load. A code injector is notified about loading libraries . The code injector inserts injected or hooking code in with at least one of the loading libraries e.g. Wininet.dll at the hooking point. In the Windows operating system the hooking point may be SecureSocket Send .

When an HTTPS post or instruction is issued from IE the raw HTTPS content is hooked by the injected code as it is passed down to SecureSocket Send . The injected code is executed before original SecureSocket Send is executed. The injected code obtains the raw HTTPS content creates or generates a communication pipe raw data pipe to the analysis application and copies the raw HTTPS content to the analysis application through this established pipe. Thereafter it waits for the result.

The analysis application receives the data parses it and analyzes a sensitive level for it based on a predefined security policy. The analysis application then makes a decision to block or log or allow action command the execution of the program. The analysis application transmits the appropriate action command back to the waiting injected code . If the action command is allow the injected code then resumes the execution to the original execution path i.e. from to to to etc. Alternatively if the action command is block the injected code breaks out the original execution path. In such instances the data sending of the IE application IE would for example fail or terminate.

By way of another example the process and system described herein may be applied in other security contexts. For example illustrates an example embodiment for encrypted content filtering in a pretty good privacy PGP context. Generally in this example a PGP desktop program executes or performs a PGP encryption. Supporting libraries e.g. PGP SK library e.g. pgpsdk.dll begins to load along with an encryption API. A code injector e.g. functionally similar to the code injector previously described is notified about loading library. The code injector inserts injected or hooking code in with at least one of the loading libraries e.g. pgpsdk.dll at the hooking point.

When data or content e.g. document image file text message e mail message audio file or video file is set for encryption the raw data or content is hooked by the injected code from the code injector . The injected code is executed before original encryption code is executed. The injected code obtains the raw data creates or generates a communication pipe raw data pipe to the analysis application and copies the raw data to the analysis application through this established pipe. Thereafter it waits for the result from the analysis application and deep content analysis.

The analysis application receives the data parses it and analyzes a sensitive level for it based on a predefined security policy. The analysis application then makes a decision to block or log or allow action command the execution of the program. In part this may include a deep content analysis in which the particular data itself is analyzed on the context of the predefined security policy e.g. manual analysis or automated analysis such as through for example knowledge engines bases . The analysis application transmits the appropriate action command back to the waiting injected code . If the action command is allow the injected code then resumes execution through the original execution path. Alternatively if the action command is log the injected code first records the event and data then resumes execution through the original execution path. Another alternative is if the action command is block the injected code breaks out the original execution path. In such instances the encryption action on the data will halt stop or fail. In some embodiments a message regarding this result will be transmitted to the user e.g. displayed on a screen .

It is noted that although the example provided is in the context of a Microsoft Windows operating system the principles and techniques disclosed herein are applicable to other operating systems for example a Linux operating system a Macintosh System X operating system a Sun Solaris operating system and the like. In addition generally the disclosed embodiments describe filtering encrypted content based on predetermined policies which beneficially helps manage secured document movement within and across a network. The disclosed embodiments beneficially extracts raw data and allow for hooking into an encryption library for analyzing raw data prior to allowing that data to be encrypted.

Further the features and advantages described in the specification provide a beneficial use to those making use of a system and a method as described in embodiments herein. For example a user is provided mechanisms e.g. by receiving and or transmitting control signals to control access to particular information as described herein. Further these benefits accrue regardless of whether all or portions of components e.g. server systems to support their functionality are located locally or remotely relative to the user.

Numerous specific details have been set forth herein to provide a thorough understanding of the embodiments. It will be understood by those skilled in the art however that the embodiments may be practiced without these specific details. In other instances well known operations components and circuits have not been described in detail so as not to obscure the embodiments. It can be appreciated that the specific structural and functional details disclosed herein may be representative and do not necessarily limit the scope of the embodiments.

Various embodiments of the processes including the examples with HTTPS and PGP in may be implemented using one or more hardware elements. In general a hardware element may refer to any hardware structures arranged to perform certain operations. In one embodiment for example the hardware elements may include any analog or digital electrical or electronic elements fabricated on a substrate. The fabrication may be performed using silicon based integrated circuit IC techniques such as complementary metal oxide semiconductor CMOS bipolar and bipolar CMOS BiCMOS techniques for example. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. The embodiments are not limited in this context.

Similarly various embodiments of the processes including the examples with HTTPS and PGP in may be implemented using one or more software elements. In general a software element may refer to any software structures arranged to perform certain operations. In one embodiment for example the software elements may include program instructions and or data adapted for execution by a hardware element such as a processor. Program instructions may include an organized list of commands comprising words values or symbols arranged in a predetermined syntax that when executed may cause a processor to perform a corresponding set of operations.

The software elements may be written or coded using a programming language. Examples of programming languages may include C C BASIC Visual BASIC JAVA ActiveX assembly language machine code and so forth. The software may be stored using any type of computer readable media or machine readable media. Furthermore the software may be stored on the media as source code or object code. The software may also be stored on the media as compressed and or encrypted data. Examples of software may include any software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. The embodiments are not limited in this context.

Moreover the software elements are structured as instructions executable by a processor e.g. an Intel Centrino an AMD Athlon or Sun SPARC processor . The instructions may be stored on a computer readable media machine readable media or article capable of storing software. The media or article may include any suitable type of memory unit memory device memory article memory medium storage device storage article storage medium and or storage unit such as any of the examples described with reference to a memory. The media or article may comprise memory removable or non removable media erasable or non erasable media writeable or re writeable media digital or analog media hard disk floppy disk Compact Disk Read Only Memory CD ROM Compact Disk Recordable CD R Compact Disk Rewriteable CD RW optical disk magnetic media magneto optical media removable memory cards or disks various types of Digital Versatile Disk DVD subscriber identify module tape cassette or the like. The instructions may include any suitable type of code such as source code object code compiled code interpreted code executable code static code dynamic code and the like.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices. The embodiments are not limited in this context.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

Also use of the a or an are employed to describe elements and components of embodiments of the disclosed embodiments. This was done merely for convenience and to give a general sense of the embodiments herein. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for content filtering prior to data encryption through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosure is not limited to the precise construction and components disclosed herein and that various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed embodiments without departing from the spirit and scope of the disclosure herein.

