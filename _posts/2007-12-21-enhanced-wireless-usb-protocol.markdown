---

title: Enhanced wireless USB protocol
abstract: The present invention provides a method for increasing data throughput for a wireless USB system that includes wire adapters that wirelessly transmit data between a host system and a USB enabled device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015368&OS=09015368&RS=09015368
owner: QUALCOMM Incorporated
number: 09015368
owner_city: San Diego
owner_country: US
publication_date: 20071221
---
This application claims priority to U.S. provisional patent application Ser.No. 60 871 527 titled ENHANCED WIRELESS USB PROTOCOL AND HUB filed Dec. 22 2006 the disclosure of which is incorporated herein by reference.

This application is related to the following U.S. patent application Ser. No. 11 963 499 filed Dec. 21 2007 titled Wireless USB Hub assigned to a common assignee.

The present invention relates generally to Wireless Universal Serial Bus WUSB interfaces. More specifically the present invention is related to improving the throughput of Wireless USB Wire Adapter systems.

Universal Serial Bus USB is a serial bus standard for attaching electronic peripheral devices to a host computing device. It was designed for personal computers but its popularity has prompted it to also become commonplace on video game consoles PDAs portable DVD players mobile phones and other popular electronic devices. The goal of USB is to replace older serial and parallel ports on computers since these were not standardized and called for a multitude of device drivers to be developed and maintained.

USB was designed to allow peripherals to be connected without the need to plug expansion cards into the computer s expansion bus and to improve plug and play capabilities by allowing devices to be hot swapped wherein devices are connected or disconnected without powering down or rebooting the computer. When a device is first connected the host enumerates and recognizes it and loads the device driver needed for that device.

USB can connect peripherals such as mouse devices keyboards scanners digital cameras printers external storage devices etc. and has become the standard connection method for many of these devices.

The Wireless Universal Serial Bus Specification revision 1.0 published May 12 2005 available from the USB Implementers Forum Inc. describes and specifies extensions to wired USB which enable the use of wireless links in extended USB WUSB systems. These wireless extensions to the USB specification are referred to as Certified Wireless Universal Serial Bus or simply Wireless USB WUSB . The extensions build on existing wired USB specifications and WiMedia Alliance MAC and PHY ultra wide band UWB wireless technology.

The WUSB Specification includes descriptions and specifications of devices known as Wire Adapters WA . These devices are wired USB to Wireless USB adapters which allow legacy wired USB hosts and devices to be interconnected with WUSB devices in extended USB systems containing both wired and wireless links.

There are two types of Wire Adapters Host Wire Adapter HWA and Device Wire Adapter DWA which work in conjunction with each other. HWAs have a wired upstream USB port and a wireless downstream WUSB port allowing a wired USB host to communicate with WUSB devices.

DWAs have a wireless upstream WUSB port and one or more wired downstream USB ports allowing wired USB devices to communicate with a Wireless USB host.

The WUSB Specification Wire Adapter Protocol is used to transfer data through WAs and to control and manage WAs. Unfortunately the Wire Adapter Protocol as specified in the WUSB Specification in typical situations is very inefficient resulting in unacceptably low throughput. The inefficiency of the protocol is primarily attributable to two factors the protocol is chatty in that a number of non data messages conveying control and transfer complete status information are exchanged for each block of data transferred. In addition the protocol does not lend itself well to pipelining of data flow through the system resulting in high latency during transfer of data and therefore low throughput.

Therefore it would be desirable to have a method for improving throughput for devices in USB systems containing both wired and wireless USB devices.

An embodiment of the present invention provides an enhanced Wire Adapter Protocol for improving data throughput for a wireless USB system that includes wire adapters that wirelessly transmit data between a host system and a wired USB device. Using this protocol wire adapters automatically segment incoming data transfers into smaller segments wherein a wire adapter uses its buffer status to determine how much data to fetch. Data is transferred downstream without waiting to receive a complete data segment when a wire adapter receives a specified minimum amount of data from upstream. The enhanced protocol also dispenses with Transfer Complete messages and instead determines when a data transfer has completed by polling downstream for a transfer result. The wire adapters also employ forward pipe descriptors in conjunction with remote pipe descriptors to forward transfer requests downstream.

Another embodiment of the present invention provides a Wireless USB WUSB hub that allows wireless communication between wired USB devices and a host system. The WUSB hub acts as a proxy for the wired USB devices and presents them to the host system as if they were native WUSB devices. The WUSB hub presents an attached wired USB device as a unique WUSB device with its own device address or as a separate function on an already existing device the WUSB hub for instance which may enumerate as a Device Wire Adapter .

Embodiments of the present invention include improving the throughput of WUSB Wire Adapter systems. One embodiment includes streamlining the Wire Adapter Protocol to improve the throughout of WUSB Wire Adapter systems. Another embodiment includes presenting wired USB devices plugged into a WUSB hub as if they are native WUSB devices. This embodiment is referred to as a USB Device Proxy WUSB Hub or simply WUSB hub.

The current solution for connecting wired USB devices into WUSB systems is to plug them into a Device Wire Adapter DWA depicted in . Wired USB devices are plugged into the DWA using standard USB cables . The DWA in turn provided a wireless antenna that provides a wireless link to a USB host.

A corresponding Host Wire Adapter HWA may be used by the host system to communicate with the DWA or the DWA may communicate with the host system through a native WUSB host adapter.

Because the HWA and DWAs are recognized as USB devices the host system incorporates multiple software driver layers to enable communication with wired external USB devices via the HWA and DWAs .

The host has a wired USB root hub to which the HWA is connected whether external or internal to the host housing . Next is the root hub driver . The host has a separate HWA driver as well as a DWA driver . On top of these are device drivers that are specific to the external USB devices at the end of the chain. Each of the device drivers attaches to and communicates with the DWA driver .

Data is communicated from the host to the HWA through a wired connection. The HWA then uses a wireless protocol to transmit the data to one of the DWAs which in turn sends the data to the specified USB device or over a wired connection.

In the example shown in the data packet is preceded by Transfer Request while Transfer Request is preceded by Transfer Request . Transfer Requests and direct the HWA to send Transfer Request and data packet to the DWA. Transfer Request directs the DWA to send data packet to the USB device. A transfer request only appears as such to its intended device. For example the DWA transfer request looks like data to the HWA but looks like a transfer request to the DWA.

As explained above the current wireless USB systems use control packets Transfer Requests which are generated by multiple layers of drivers between the external device and its specific driver in the host in order to direct the flow of data to or from the target USB device. Unfortunately this design dramatically hampers throughput.

An embodiment of the present invention includes an Enhanced Wire Adapter Protocol that improves throughput by reducing the number of messages that are exchanged as a part of data transfer thereby reducing processing time and transfer time of the messages over the wired USB interfaces and wireless medium. Throughput is also increased by improving pipelining of data flow through the system which reduces transfer latency.

The enhanced Wire Adapter Protocol eliminates the Transmit Complete message and instead uses polling for Transfer Result to determine when a transfer has completed. IN data transfers may be automatically segmented auto segmentation into smaller transfers by Wire Adapters. This pushes the intelligence functions onto the Wire Adapters and away from the host software i.e. the DWA manages the buffer . During the auto segmentation the size of each segment may vary whereby the Wire Adapter dynamically and adaptively adjusts the segment size in order to maximize throughput for a given situation. The Wire Adapter automatically manages its available buffers by issuing IN tokens for pending transfers based on buffers being available to accept the IN data.

In an embodiment a Wire Adapter driver segments a transfer request and submits all of these at once. The DWA automatically manages memory to complete each segment. For IN data the Wire Adapter checks for memory before starting the IN transfers and for OUT data negative acknowledgements are used to backpressure a segment for which the Wire Adapter does not have enough memory.

In another embodiment multiple transfers between a USB host and an HWA over the upstream USB interface may be aggregated into a single USB transfer in order to reduce transfer latency. In particular a USB host may aggregate multiple OUT transfers targeted for an HWA and an HWA may aggregate multiple IN transfers targeted for a USB host. The receiver of aggregated transfers HWAs in the case of OUT transfers and USB hosts in the case of IN transfers de aggregates aggregated transfers before further processing of the data. Receivers determine data boundaries in aggregated frames by parsing the content of aggregated transfers.

For example a USB host may aggregate an OUT Transfer Request with the following OUT transfer data. The HWA receiving the aggregated transfer expects the next transfer to be a Transfer Request. It examines the first byte of the aggregated transfer in order to determine the length of the Transfer Request contained in the aggregated transfer. The wRPipe field in the Transfer Request is used to locate the associated wRPipe Descriptor which is then used to determine that the Transfer Request is an OUT Transfer Request. Because the Transfer Request is an OUT request the HWA treats the data in the aggregation transfer following the Transfer Request as OUT Transfer Data.

Hosts and HWAs may aggregate transfers up to a maximum length of wMaxPacketSize as expressed in the Standard Endpoint Descriptor for the endpoint over which the transfer occurs. Hosts and HWAs using aggregation must be prepared for every transfer to receive up to wMaxPacketSize bytes. For IN transfers hosts must issue an input request for wMaxPacketSize bytes. HWAs may de aggregate on the fly as complete Control Transfers and data transfers are received. On the fly de aggregation can help with buffer management and dataflow and may reduce end to end latency. The decision of when to aggregate and how many transfers to aggregate is implementation dependant. Typically opportunistic algorithms are used to make aggregation decisions. A host or HWA aggregates available transfers up to wMaxPacketSize.

For OUT transfer data packets the enhanced Wire Adapter Protocol uses packets that cut through rather than being passed using store and forward transfer. Using this new approach whenever some minimum amount of OUT data is received from the upstream port the Wire Adapter may transfer the data on the downstream port rather than wait until a complete segment of data is received. Conversely the Wire Adapter automatically manages its available data buffers by putting backpressure on the upstream port by issuing negative acknowledgments NAKs when data buffers are not available to hold incoming data.

The enhanced Wire Adapter Protocol allows forwarding of Transfer Requests by a Wire Adapter thereby reducing the number of messages used to complete data transfer. Referring back to the example in under the enhanced protocol the DWA Transfer Request looks like a Transfer Request to the HWA and not data. Thus the HWA realizes that the incoming Transfer Request is really for the DWA and forwards it to the DWA. Forwarding Pipe FPipe descriptors are used in conjunction with Remote Pipe RPipe descriptors to control forwarding of Transfer Request packets.

Referring to diagram illustrates packet flow and processing for an OUT Transfer Request forwarding that embodies aspects of the present invention. Diagram focuses on DWA behavior for completing a transfer when Transfer Request forwarding is implemented and the Transfer Complete message has been eliminated as discussed above. A USB application on the host presents to the DWA driver a request to transfer data that is targeted for a USB device attached to the DWA . The data to be transferred is provided with the transfer request . The DWA and HWA host drivers generate a Transfer Request OUT packet and en queue the Transfer Request and Transfer Data for transfer to the HWA over the wired USB bus. The Transfer Request contains in the wRPipe field an FPipe Descriptor number 0x8001 which references the FPipe Descriptor in the HWA to be used to forward the Transfer Request .

The HWA receives the Transfer Request OUT packet followed by the Transfer Data from the upstream wired USB bus. The HWA parses the Transfer Request and locates the wRPipe field in the Transfer Request . In this particular example the wRPipe field contains 0x8001.

The HWA determines that the wRPipe number refers to an FPipe descriptor because the most significant bit of the wRPipe number is a one. This indicates to the HWA that the corresponding pipe descriptor is found in the FPipe Descriptor table rather than the RPipe Descriptor table and that the Transfer Request should be forwarded. In this particular example since the wRPipe number is 0x8001 the index of the FPipe Descriptor in the FPipe Descriptor Table is 0x0001. The HWA locates FPipe Descriptor 0x0001 in the FPipe descriptor table .

The wRPipeIndex field in FPipe Descriptor 0x0001 is used to locate the Transfer Request RPipe Descriptor . In this particular example the RPipe Descriptor index is 0x0001. The HWA determines the transfer request target device address device endpoint and direction using the bDeviceAddress and bEndpintAddress in the RPipe Descriptor . In this example the Transfer Request is an OUT which indicates to that the HWA to expect Transfer Data following the Transfer Request on the upstream USB bulk OUT endpoint and the HWA should use OUT RPipe Descriptor 0x0001 for delivering both the forwarding Transfer Request and the Transfer Data .

The HWA uses the received Transfer Request to generate a forwarding Transfer Request by replacing the wRPipe field in the received Transfer Request with the wForwardRPipe value in the FPipe Descriptor .

The HWA en queues on the downstream wireless interface for transfer to the DWA the forwarding Transfer Request and the Transfer Data once the data has been received on the upstream USB Bulk OUT endpoint . The HWA adds the two byte WUSB header to the beginning of the Transfer Request packet and to the beginning of each data packet in the transfer before en queuing them on the downstream wireless interface .

Once the forwarding Transfer Request and Transfer Data have been transferred to the DWA the HWA examines the bControl field in the OUT RPipe descriptor 0x0001 which was used to deliver the Transfer Request and Data and determines that the Automatic Request and Forwarding of Transfer Results and Transfer Data option is enabled bit zero in the bControl field . The HWA then uses the wTransferRPipe field in the OUT RPipe Descriptor in order to locate the RPipe Descriptor associated with the bulk IN pipe of the downstream DWA . Associated with the IN RPipe Descriptor is a Pending Transfer list not shown in the diagram . The HWA adds an entry in the Pending Transfer list that indicates that a Transfer Result for an OUT transfer is expected from the downstream DWA bulk IN pipe .

Because of the entry in the IN RPipe Pending list indicating that a Transfer Result is expected the HWA begins issuing IN tokens to the bulk IN endpoint on the downstream DWA in order to receive the expected Transfer Result .

When the Transfer Result is received from the DWA the HWA uses the SrcAddr field in the packet MAC header and the Endpoint Number field in the WUSB header in order to locate the RPipe descriptor associated with the device and endpoint from which the Transfer Result was received. In this particular example the device is the DWA the endpoint is the DWA bulk IN endpoint and the corresponding RPipe in the HWA for the DWA endpoint is RPipe Descriptor 0x0002 .

The HWA locates in the RPipe Pending Transfer list the entry corresponding with the received Transfer Result based on matching Transfer IDs in the Transfer Result and Pending Transfer list. The HWA determines that from the Pending Transfer list entry that the Transfer Result is for an OUT transfer and therefore no data follows the Transfer Result .

The HWA examines the bControl field in IN RPipe descriptor 0x0002 and determines that the Automatic Request and Forwarding of Transfer Results and Transfer Data option is enabled bit zero in the bControl field . Based on this option being enabled the HWA automatically en queues the Transfer Result packet on the upstream USB interface bulk IN endpoint for transfer to the host. The HWA then deletes the entry in the RPipe Descriptor 0x0002 Pending Transfer list corresponding to the expected Transfer Result .

The HWA host driver maintains pending transfer records similar to the Pending Transfer list in the HWA . Based on the pending transfer records the HWA driver expects a Transfer Result for the previously transmitted Transfer Request and therefore the HWA driver requests an IN transfer which causes IN tokens to be sent to the HWA wired USB interface bulk IN endpoint . The HWA sends the Transfer Result to the host as soon as the Transfer Result comes to the top of the bulk IN queue and an IN token is received. When the Transfer Result is passed to the HWA driver the HWA updates its records based on the information in the Transfer Result and the WUSB transfer is complete.

Referring to diagram illustrates packet flow and processing for an IN Transfer Request forwarding that embodies aspects of the present invention. The packet flow and processing for the IN Transfer Request forwarding is similar to the packet flow and processing for the OUT Transfer Request forwarding. The differences are as follows 

The wRPipe field 0x8002 in the IN forwarding Transfer Request references an FPipe Descriptor 0x0002 containing a wRPipeIndex field 0x0002 that references an IN RPipe . Because the RPipe in this case is for an IN the HWA does not expect Transfer Data to follow the Transfer Request and therefore forwards the Transfer Request with no following data.

The HWA uses wTransferRPipe field in the IN RPipe 0x0002 to locate the OUT RPipe that is used to deliver the Transfer Request . After the Transfer Request is transferred to the DWA the HWA adds an entry in the Pending Transfer list that indicates that a Transfer Result for an IN transfer is expected from the downstream DWA bulk IN pipe .

When the HWA receives the Transfer Result it then attempts to read from the downstream DWA bulk IN endpoint the number of bytes indicated in the dwTransferLength field of the received Transfer Result . The HWA expects the data because the corresponding entry in the Pending Transfer list indicates an IN transfer.

After the HWA receives the expected data it en queues the Transfer Result and Transfer Data on the upstream wired USB bulk IN endpoint for transfer to the host. If automatic segmentation is enabled the HWA may segment the data and en queue a Transfer Result with each data segment. The bTransferSegment field in each Transfer Result is set to the segment number.

For Transfer Request forwarding the Wire Adapter host driver maintains an association between Transfer IDs in a Transfer Request accepted from another Wire Adapter host driver and the resulting transfer generated by the Wire Adapter. It then uses this association to modify the Transfer ID in Transfer Request and Transfer Result packets.

Transfer IDs are 32 bit values used by Wire Adapter drivers and Wire Adapters to uniquely identify transfers and to associate packets with specific transfers. For each transfer initiated by a HWA or DWA host driver a unique Transfer ID is generated and placed in the corresponding Transfer Request. When generating Transfer Result packets HWAs and DWAs place in the Transfer Result the Transfer ID from the Transfer Request for the transfer.

With the standard Wire Adapter Protocol Transfer IDs are unique in the context of a DWA or HWA driver instance and corresponding Wire Adapter. Take for example the case of a DWA attached to an HWA which in turn is attached to a host. When the DWA driver generates a Transfer Request it selects a unique Transfer ID to place in the Transfer Request. The HWA driver and HWA deliver the DWA drive Transfer Request to the DWA without examining the content of the Transfer Request as far as the HWA sub system is concerned the Transfer Request is data to be transferred . When the Transfer Request is delivered to the DWA the DWA parses the Transfer Request in order to determine what to do and uses the Transfer ID in the resulting Transfer Response.

However in order for the HWA driver to deliver the DWA Transfer Request the HWA driver generates its own Transfer Request for the HWA. The Transfer ID placed in the HWA Transfer Request that is used to deliver the DWA Transfer Request is unrelated to the Delivery ID in the DWA Transfer Request. Stated differently each Wire Adapter driver layer maintains its own set of unique Transfer IDs and is unaware of the Transfer IDs generated and used by other Wire Adapter drivers.

However when Enhanced Wire Adapter Protocol Transfer Request Forwarding is being used handling of Transfer IDs is necessarily different than with the standard protocol. When a Transfer Request is forwarded from one Wire Adapter to another the Transfer Request is processed by both the forwarding and target Wire Adapters and the Transfer ID is used by both Wire Adapters. In this case both Wire Adapters are working with the same set of Transfer IDs. The same is true of forwarded Transfer Result packets the same Transfer ID is used by one or more Wire Adapters.

Forwarding does not require special handling of Transfer IDs by the Wire Adapters but does require specific processing by the host drivers. If forwarding is being used by a host driver and its corresponding Wire Adapter then when the host driver accepts a Transfer Request from another upstream host driver it parses the Transfer Request to locate the Transfer ID. The host driver then generates a new Transfer ID that is unique within the scope of the driver and Wire Adapter and places the new Transfer ID in the Transfer Request before forwarding it to the next driver. The host driver also creates a record that provides the association between the Transfer ID provided by the upstream Wire Adapter and the Transfer ID generated by the host driver.

Then when the host driver receives a Transfer Result it looks up the Transfer Result Transfer ID it its Transfer ID association table and determines that the corresponding Transfer Request was forwarded. It then replaces the Transfer ID with the value from the Transfer ID association table i.e. with the original Transfer ID before passing the Transfer Result to the original requesting driver. In this way the effect of forwarding on Transfer IDs by a downstream driver is made transparent to a host upstream driver.

Alternately implementations are possible where a single host driver manages two or more serially connected Wire Adapters for example a DWA connected to a HWA . In this case the single host driver is fully aware of the effect of forwarding and can account for it by generating Transfer IDs that are used by both the DWA and HWA.

Under the enhanced protocol a Wire Adapter automatically polls a downstream Wire Adapter for Transfer Result packets based on a previous Transfer Request to that downstream Wire Adapter. Similarly the Wire Adapter forwards any received Transfer Result to the upstream interface rather than generating and forwarding a Transmit Complete and new Transfer Result.

Rather than the poll for downstream data initiated by receiving a Transfer Request from the host driver the Wire Adapter automatically polls a downstream device for IN data based on previously receiving a Transfer Result for an IN data transfer. Similarly rather than generating and forwarding a Transmit Complete and new Transfer Result the Wire Adapter simply forwards IN Transfer Data to the upstream interface after reception.

In still another embodiment Multiple Wire Adapter drivers HWA and DWA may be combined into a single Wire Adapter driver in order to reduce the number of Application Programming Interfaces APIs and therefore the latency incurred by passing of messages across the APIs. In addition combining multiple Wire Adapter drivers allows consolidation in the assignment of Transfer IDs such that when Transfer Request forwarding is being used the need to maintain the association between Transfer IDs in Transfer Request presented from an upstream driver and the Transfer IDs in issued Transfer Request is eliminated.

The Proxy WUSB Hub is similar to a DWA in that it has a wireless upstream port and one or more wired USB downstream ports wherein wired USB devices may be plugged into the downstream wired USB ports. The WUSB Hub differs from a DWA in that the wired USB devices appear to the host system as if they are native WUSB devices. This is accomplished by having the WUSB Hub proxy the attached downstream wired devices on the wireless interface. Therefore the WUSB hub appears to the host as one or more WUSB devices not a DWA which eliminates much of the control packet overhead used by the standard Wire Adapter Protocol.

An attached wired USB device either 1 is presented as a unique WUSB device with its own device address or 2 is presented as a separate function on an already existing device the WUSB hub for instance which may enumerate as a DWA . With this latter approach the wired device endpoints are mapped into WUSB hub endpoints.

The WUSB Hub uses various mechanisms in order to properly proxy a USB device to the host as if it is a WUSB device. The following description applies to the case when the WUSB hub presents downstream USB devices as WUSB devices rather than as functions on the DWA.

Each WUSB device maintains a security connection context. The connection context is negotiated during first time connection. The WUSB Hub negotiates the security connection context for the USB devices without the knowledge or involvement of the downstream devices and stores the security connection context. A sufficient number of unique security connection contexts are negotiated and maintained in order to support the maximum number of downstream USB devices that the WUSB hub is capable of simultaneously proxying. A specific connection context is not tied to a particular downstream USB device rather the connection contexts are applied as needed when USB devices are attached.

The WUSB hub maintains a unique WUSB device address for each attached proxy USB device and it participates in the WUSB protocol as if it were the WUSB devices it is proxying rather than appearing as an intervening device like a DWA .

The WUSB Hub detects USB attachment either directly or by intercepting interrupt packets from attached downstream hubs. Upon detecting attachment of downstream devices the WUSB hub does not forward interrupt packets to the host or directly inform the host of USB attachment. Instead the WUSB hub performs a WUSB device connection procedure on behalf of the USB device.

The WUSB hub reads the descriptors of the USB devices and modifies them so that they are consistent with descriptors for WUSB devices. For example the maximum packet size field in the Standard Endpoint Descriptor is modified so that it is consistent with WUSB packet sizes. The bmAttributes field in the Standard Configuration Descriptor is set to indicate that the device is self powered.

For some USB devices which do not use zero packet length semantics to indicate the end of transfers the lengths of IN transfers are used so that the correct number of bytes are read. However in the case of a WUSB hub the length of IN transfers is not available with the WUSB protocol. Without transfer requests there is no previously declared limit on the amount of data to read. Fortunately the upstream wireless device is provided with the expected length of transfers.

The WUSB protocol is modified slightly in order to support the WUSB hub. Two options are available. In the first option the maximum packet size field in IN Channel Time Allocation CTE Information Elements IEs sent in WUSB host Micro scheduled Management Control MMC can be used to indicate the expected transfer length. Alternatively a field may be added to CTAs to indicate the expected transfer length.

In an embodiment of the present invention the WUSB hub includes a controller to perform the functions and operations of the WUSB hub discussed above.

For the case in which a WUSB hub proxies one or more downstream USB devices as functions on the WUSB hub DWA the above description generally applies except that the security connection context and WUSB device address is shared with the WUSB hub. In addition when a USB device attaches the WUSB hub maps WUSB hub wireless endpoints one for one for USB device endpoints and treats the collection of endpoints associated with a particular USB device as a function on the WUSB hub. The WUSB hub informs the host that a new function needs to be enumerated in order to activate support for a newly attached device.

Although embodiments of the present disclosure have been described in detail those skilled in the art should understand that they may make various changes substitutions and alterations herein without departing from the spirit and scope of the present disclosure.

