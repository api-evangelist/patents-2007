---

title: Apparatus, system, and method for hiding advanced XML schema properties in EMF objects
abstract: An apparatus, system, and method for hiding advanced XML schema properties in EMF objects. XML Schema may comprise both user-defined properties and internal properties related to the structural features of the schema. The present invention hides the internal properties from clients while still keeping them available such that a complete XML Schema model can be generated, but without exposing a client to the non-intuitive internal properties. An SDO implementation leverages EMF implementation artifacts to present a client with an SDO API exposing user-defined properties and metadata describing user-defined properties. The SDO implementation further provides an extended API through which a client may access internal properties and metadata describing the internal properties. The invention further accounts for both dynamic SDO objects and static SDO objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08434055&OS=08434055&RS=08434055
owner: International Business Machines Corporation
number: 08434055
owner_city: Armonk
owner_country: US
publication_date: 20070726
---
This invention relates to mapping XML Schema definitions to objects. More specifically the invention relates to mapping XML Schema definitions to objects such that a simple interface for the object is presented to the client which is easy to understand while the complicated internal aspects of the object related to advanced features of XML Schema are still maintained in the object but hidden from the client.

XML has become a ubiquitous member of the computing landscape providing a human readable and portable format for data exchange. However many applications are designed to work with or simply work better with object representations of data as opposed to an XML representation. As a result a number of solutions exist which map XML Schema definitions which describe and define the structure of an XML document to objects for example the Eclipse Modeling Framework EMF Service Data Objects SDO or JAXB all provide solutions. The solutions mentioned generate various types of XML representation object models which allow an XML document to be treated as an object. The above solutions are not restricted to representing only XML documents as objects and may be used to translate various formats to objects for example SDO may also be used to translate models such as those developed using IBM s Rational Rose software to objects.

XML however poses a unique modeling challenge. In many instances the richness and flexibility of XML Schema complicates the translation process. XML Schema features such as wildcards substitution groups and repeated model groups do not intuitively map to obvious object properties. As a result the object model may contain properties which a typical user may not understand making the use of these objects a more complicated process. In this field of endeavor the term user or client referenced above refers to software developers. Thus technologies for implementing mapping of XML Schema definitions have had to choose between simplicity where the advanced features are simply ignored or completeness where the advanced features are mapped and presented to the user .

The model above is simple and easy to understand by one of skill in the art. However as shown below additional complexities may appear when the schema contains additional XML features 

The presentation of this additional information will often confuse the user since the information does not correspond to the expected user defined properties of the XML document such as the building owner etc. As mentioned above one possible solution is to simply choose not support these additional features and remove them from the schema to object mapping implementation. However this additional information is needed to accurately represent all aspects of the XML Schema. For example if at some point the client attempts to map from the object to an XML document the XML document may be incomplete in comparison to the original if the advanced features defining the structure of the data were removed.

Technologies which choose completeness impose additional burdens on their clients who need to be able to distinguish simple from advanced properties and know which ones to use in order to obtain the desired results. Technologies which choose simplicity lose information that may be of use to advanced users and also lose the ability to accurately reproduce the XML document from the object.

Applicants submit that there exists a need for a mapping technology which can fully support all XML Schema documents and present a simple view to the user without simply ignoring or not supporting the advanced features. Ideally the solution should allow a user to access the advanced features but only present the simple features absent a specific request to view the advanced features. The solution should also impose little additional computing overhead.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved. Accordingly the present invention has been developed to provide an apparatus system and method for hiding advanced XML Schema properties in EMF objects.

The present invention comprises a computer program product comprising a computer usable medium having a computer readable program for hiding advanced Extensible Markup Language XML schema features in Service Data Objects SDO the operations of the computer program product comprising manipulating one or more Eclipse Modeling Framework EMF artifacts determining the internal properties of an EMF model and the user defined properties of the EMF model and automatically creating a SDO model from the EMF model the SDO model configured to expose to a client the user defined properties of the SDO model and hide from the client the internal properties of the SDO model.

Determining internal properties of the EMF model and the user defined properties of the EMF model further comprises comparing properties of the EMF model to predefined set of internal properties and identifying the internal properties of the EMF model as those that match the predefined set of internal properties and the user defined properties of the EMF model as those that do not match the predefined set of internal properties.

Automatically creating a SDO further comprises a SDO artifact returning user defined properties of the SDO model in response to a client invoking a service configured to return property information of the SDO.

The computer program product further comprises issuing a call to a SDO API such that a SDO artifact receives a request comprising a parameter identifying a property invokes a service configured to validate the parameter and accesses a property of the EMF model in response to an acknowledgement from the service that the parameter references a valid user defined property.

Further in the computer program product the SDO model exposes the internal properties of the SDO model to a client by way of an extended API the extended API invoking EMF model methods.

Where the SDO model directly hosts one or more static property values automatically creating a SDO model from the EMF model further comprises assigning properties of the SDO model a modified index value such that internal properties are distinguished from user defined properties. In addition where the SDO model directly hosts one or more static property values the computer program product further comprises receiving from a client a request comprising the modified index value of a property as a parameter and mapping the modified index value to an actual index value of the property. Mapping the modified index value further comprises associating the modified index value received from a client with an internal SDO model index and operating on a property value associated with the internal SDO model index. In a preferred embodiment a positive modified index value is assigned to a user defined property and a negative modified index value is assigned to an internal property.

Creating an SDO model from the EMF model further comprises returning SDO model metadata in response to a client request wherein the metadata concerns user defined properties in response to a client request by way of a SDO Application Programming Interface API and concerns internal properties in response to a client request by way of a SDO extended API. The SDO model is configured to expose the expected properties by way of a SDO model interface and to expose internal properties exclusively by way of an extended interface.

In a preferred embodiment the EMF artifacts are classes and interfaces and manipulating EMF artifacts comprises extending EMF classes and implementing interfaces.

Also disclosed is a system for hiding advanced XML schema features in XML representation object models which system comprises one or more processors in communication with memory comprising an XML schema document an Eclipse Modeling Framework EMF implementation and a Service Data Object SDO implementation. The SDO implementation further comprises an SDO property module configured to compare properties of the EMF model to a predefined set of internal properties and to identify the internal properties of the EMF model as those that match the set of internal properties and the user defined properties of the EMF model as those that do not match the set of internal properties an SDO data object implementation module comprising an Application Programming Interface API configured to expose user defined properties of an SDO and an SDO internal properties access module comprising an extended API configured to expose internal properties of the SDO.

In certain embodiments the SDO data object implementation module further comprises an SDO metadata module configured to reveal SDO metadata for user defined properties and wherein the SDO internal properties access module further comprises an SDO extended metadata module configured to reveal SDO metadata for internal properties.

In addition the EMF implementation may further comprise a EClassImpl class and a BasicEObjectImpl class and the SDO implementation may further comprise a ClassImpl class extending the EClassImpl class and a DataObjectImpl class extending the BaseEObjectImpl class.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as a processor and memory device field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module. The instructions represented by the modules may be stored on various forms of computer readable storage media.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code lines among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware processors and memory hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The system for hiding advanced XML schema properties in XML representation object models includes an XML Schema . As discussed above and as known to those of skill in the art an XML schema is a description of an XML document which specifies the structure and the expected and allowed content of an XML document. An XML Schema may define element types and also impose detailed constraints such as limiting a particular value to a positive integer on types. In order to be deemed valid an XML document must be well formed and also comply with an associated XML Schema .

The XML Schema further comprises internal properties and user defined properties . User defined properties are those elements specified by the creator of the XML Schema which constitute the core data associated with the XML Schema . For example in the example schema above building and owner would both constitute user defined properties. In contrast internal properties constitute the structural relational information of the XML Schema which describes the relationships among XML Schema elements. In the example schema above the substitution group constitutes an internal property . Those of skill in the art will recognize that the user referenced in the term user defined properties is not necessarily and in many instances will not be the same user interacting with the model provided by the present invention.

The system further comprises an XML representation object model which in the depicted embodiment is EMF module . Those of skill in the art will recognize that an XML representation object model as used in connection with the present invention constitutes an object model mapped from an XML schema. Those of skill in the art will recognize that other XML representation object models could be used without departing from the essence of the present invention.

EMF module is a modeling framework and code generation facility for building tools and applications based on a structured data model such as an XML Schema document. EMF provides tools necessary to produce Java classes for the model allowing EMF models of XML schema to be used as objects. As mentioned above the EMF module provides a complete solution which fully supports XML schemas such as the XML schema however the EMF model exposes both the complicated internal properties of the XML schema and the user defined features of the XML schema.

EMF module further comprises EMF artifacts not shown which constitute the modules and components of EMF module which provide the functionality described above. For example EMF artifacts comprise the various classes and interfaces that make up EMF.

The system further comprises a practical XML representation object model which in the depicted embodiment is produced by an SDO module . For purposes of the specification a practical XML representation object model is an XML representation object model which exposes to a client its user defined properties while hiding its internal properties. Those of skill in the art will recognize that other modules may be adapted to generate practical XML representation object models without departing from the essence of the present invention. For example those in the art may modify the EMF module such the modified module hides internal properties in order to make it a practical XML representation object model.

SDO module allows clients to access and manipulate data from heterogeneous data sources such as relational databases and XML data sources. Like EMF module SDO module allows SDO models of XML schema to be used as objects.

SDO module further enables both static strongly typed programming models and dynamic loosely typed programming models. Static interfaces provide models which are more familiar to and more easily managed by users. Dynamic models however are necessary in instances where the shape of the resulting data is not known beforehand. Dynamic models for example are commonly needed by tools and frameworks. Dynamic and static models in connection with SDO module and the present invention are discussed in greater detail below. SDO module further provides a client with a metadata API that allows introspection of the data model. In accordance with the present invention the metadata API is incorporated into SDO View and Extended View as discussed in greater detail below.

In a preferred embodiment of the invention SDO module does not simply receive a completed EMF module object and use that object as the base material from which it can construct an SDO. Rather SDO module leverages the EMF module as described below in connection with in order to provide the extended view and the SDO view . More particularly SDO manipulates EMF artifacts not shown in order to provide the desired functionality. The intersection of EMF by SDO in is symbolic of this relationship.

SDO view is a view of an SDO that reveals only user defined properties of the relevant SDO model. In addition SDO view returns only metadata gathered from user defined properties of the relevant SDO model. In one embodiment SDO View is the standard SDO API and includes a set of interfaces and functions to enable a user to interact with the user defined properties of the SDO. For example a particular SDO model named alpha may have five properties three of which are user defined and two of which are internal. If a client requests a list of the properties of alpha from SDO View only the user defined properties are returned. Similarly if the client requests the number of properties of alpha the number returned would be three. If a client utilized a get method associated with alpha and indicates one of the internal properties as the subject of the get invocation the return value is an indication that the specified property does not exist.

The system also comprises an extended view . The extended view provides a client with access to the internal properties of the SDO model which are hidden when using the SDO View . In a preferred embodiment the extended view is an extended API which a client invokes to use or discover internal properties. To continue the example above a client may utilize a get method associated with alpha and indicate one of the hidden properties as the subject of the invocation but utilize the extended view instead of the SDO view . The extended view returns the requested hidden property in response. If a client requests the number of hidden properties in alpha extended view reveals that there are two.

The system further comprises a client . The client interacts with SDO objects usually in order to manipulate the data represented by the object through the SDO view and the extended view . The client may be a user such as a software designer or programmer and in other embodiments may be a software application. For example in common embodiments the client may be tooling software.

Those of skill in the art will recognize that in the above code segment workSpace is a generic implementation of the SDO DataObject interface. Thus workSpace is a DataObject object as opposed to a Realestate object.

SDO property module is an SDO artifact which determines the properties exposed as part of the SDO data object. Similar to the EMF artifacts described above in a preferred embodiment SDO artifacts are the classes and interfaces that make up the Service Data Object. Like the EMF property module SDO property module comprises methods which when invoked reveal metadata concerning the properties which constitute the SDO.

SDO property module further comprises internal properties module . In one embodiment internal properties module is a data structure such as a list comprising a predefined set of internal properties that should be hidden from a client . The SDO property module invokes the methods of the EMF property module to get a complete list of all properties both internal and user defined from EMF and then compares the result of the methods against the predefined set of internal properties in the internal properties module . Properties which are found in both the internal properties module and in the result of the method call are removed from the list of properties exposed by SDO property module such that the SDO property module creates the filtered properties .

In another embodiment internal properties module may be a method which determines the internal properties of the EMF object. The SDO property module invokes the methods of EMF property module to get a complete list of all properties from EMF and also invokes the method of internal properties module to determine which of the properties returned constitute internal properties and which constitute user defined properties. Based on the result of the two methods SDO property module creates the filtered properties . For example internal properties module may comprise code which removes any FeatureMap property returned by a call to EMF property module assuming that all FeatureMap properties are deemed to be internal properties hidden as part of the SDO implementation. Alternatively internal properties module may invoke the method getEStructuralFeatures of the EMF property module and suppress all properties returned in response such that they are hidden from a client assuming that the properties returned in response to a getEStructuralFeatures invocation are internal properties to be hidden.

Filtered properties is the set of user defined properties derived from an EMF object through the EMF artifacts such as EMF property module and EMF data object properties . The internal properties of the EMF object still exist as part of an EMF object but are not exposed in the filtered properties . In one embodiment the filtered properties may be a separate list of properties. Alternatively filtered properties may never be an actual object or list rather filtered properties may comprise the result of the interaction between the SDO property module internal properties module and the EMF property module .

SDO data object implementation represents the actual data object that may be used by a client . The client for example may instantiate and use a new SDO data object implementation such as workSpace as shown above. The SDO data object implementation references the filtered properties module in performing a client requested operation or when returning metadata concerning its properties. As such even if internal properties are a part of the underlying EMF data object properties these properties are not exposed as part of a SDO data object implementation . The property accessors of the SDO data object implementation which are part of the standard SDO APIs are implemented such that they use the filtered property list before calling EMF to access the property as stored in the EMF data object properties .

SDO Data Object Implementation module may further comprise a SDO metadata module not shown configured to reveal SDO metadata for user defined properties. The SDO metadata module allows a client to discover information concerning the SDO data object by means of introspection APIs. For example a client may request the number of properties or a list of properties associated with the SDO data object. The SDO metadata module returns to the client metadata related only to the user defined properties as defined in filtered properties thus hiding the existence of internal properties.

The SDO data object implementation module provides a client with an API configured to expose to the client the user defined properties of the SDO. The SDO Internal properties access module provides a client with an extended API configured to expose the internal properties of the SDO and in addition allow the client to access those values.

With the above design SDO clients using standard SDO APIs SDO View which are associated with SDO data object implementation will see only the simple view of the SDO . The SDO internal properties access module allows a client access to internal properties and metadata concerning those internal properties in EMF data object properties . SDO internal properties access module provides the client with the extended view described above. The implementation of extended methods may be implemented as shown by making calls to the underlying EMF methods such as eGet through EMF APIs which still have access to the hidden properties.

In one embodiment SDO internal properties access module may be a separate class providing an extended API as follows 

The SDO internal properties access module may further comprise an SDO extended metadata module not shown configured to reveal SDO metadata for internal properties. A client may request metadata concerning the internal properties of the SDO in order to discover what properties are available for use. The SDO extended metadata module returns to the client metadata concerning the nature of the properties for example the SDO extended metadata module may return information concerning the number of or names of the internal properties. As noted above this information is not available through the SDO data object implementation module .

Those of skill in the art will recognize that EClassImpl comprises a class which is part of EMF . EClassImpl comprises methods such as getEAllStructuralFeatures getEAttributes getEStructuralFeatures and others found in the EMF Javadoc. These methods and others not listed can be used to discover both user defined and internal properties of an EMF object.

The SDO Type implementation class ClassImpl contains property accessing methods which filter the list of EMF structural features as explained in connection with . As shown in in a preferred embodiment ClassImpl extends EClassImpl and implements Type interface. ClassImpl both uses and overrides the methods of EClassImpl in order to provide the functionality of the present invention. For example 

The methods above may filter the internal properties by invoking EClassImpl methods such as getEStructuralFeatures and removing the returned properties from the list of all properties returned by the method. In the above embodiment getProperties provides the filter as described in connection with . For example getProperties may have code in it which when invoked uses getEStructuralFeatures to create a static list of internal properties. It may then call the getProperties method of EClassImpl to get a list of the properties both user defined and internal of the EMF object. The getProperties method may then comprise a simple algorithm to compare the results of both methods and return a List of properties which are unique to the getProperties invocation. The resulting return value is a List of properties with the internal properties filtered out. Those of skill in the art will recognize that any number of algorithms and approaches may be used to filter the internal properties including filtering out internal properties by using a dynamic view of the getEStructuralFeatures result.

Methods such as getProperty may then leverage the getProperties method of ClassImpl to determine if the property is internal or user defined. Those of skill in the art will recognize that multiple methods of determining internal properties that should be filtered and methods for filtering them are possible and that the present invention is not limited to any particular method for doing so.

DataObject interface specifies methods associated with an SDO object implementation for example the DataObject interface specifies 

DataObjectImpl extends the BaseEObjectImpl class and implements the DataObject interface to provide the current functionality. The SDO DataObjectImpl property accessors are implemented to use the filtered properties as described above before calling EMF to access the property. For example 

While the embodiment just described properly handles the dynamic SDO case additional work is required for static SDO objects. As described above static SDO objects are generated classes which directly host the property values associated with a particular SDO object. In contrast to the dynamic SDO case where the properties were part of a generic SDO object in the static case the properties are part of the particular class. For example to continue with the examples used above a client may instantiate and work with a static SDO object as follows 

The static SDO object further comprises an SDO index . Those of skill in the art will recognize that SDO currently provides an SDO index wherein each property found in properties module is assigned a positive index value. A client may pass an index value as a property identifying parameter to a method as explained above. For example a client may specify workSpace.set 1 Downie Building to set the value of a property associated with an index value of 1 such as in this example the property building to the specified value passed as a parameter. Both internal and user defined properties are assigned a positive SDO index value.

In accordance with the present invention the static SDO object further comprises a new SDO index . The new SDO index assigns properties a modified index value such that internal properties can be distinguished from user defined properties. In a preferred embodiment user defined properties are assigned a positive index value and internal properties are assigned a negative index value. For example a user defined property building may have an SDO index value 1 and a new SDO index value of 2. The internal property tenantGroup may have an SDO index value 3 and a new SDO index value of 1.

As described above metadata concerning the properties of the static SDO revealed by the SDO View only reveal user defined properties in the properties . Similarly requests for metadata concerning the index values of the properties reveal only the positive values of the new SDO index associated with the user defined properties of the static SDO . The negative values of the new SDO index associated with the internal properties of the static SDO are available through the extended view .

Methods constitute the methods associated with a particular static SDO . In a typical embodiment the methods will comprise getters and setters for the static properties . SDO currently supports operations on properties based on the property s index value as described above. Thus a client may pass an SDO index value for a property to a method in methods . Those of skill in the art will recognize that currently methods module in SDO associates an SDO index value with a property using a switch statement such as a case statement.

As described above in one embodiment of the present invention only the values of the new SDO Index are made available to a client and the SDO index always remains hidden from the user. When the methods module receives a request for execution of a method with an index value as a parameter the method module associates the provided new SDO index value with an appropriate method call and then executes the method call.

In one embodiment where a client provides a negative new SDO Index value associated with an internal property to the methods module the method module associates the negative new SDO index value with a property through a switch statement and performs the requested operation. In an alternate embodiment a client may provide a negative new SDO index value to an extended view which invokes a conversion method in methods module to associate a new SDO index value with the associated SDO index value. The extended view then passes the associated SDO index value as part of a call which performs the requested operation.

DataObjectBase is an abstract class extending DataObjectImpl discussed above. DataObjectBase constitutes the base class for generated objects and overrides the implementation of EMF APIs to call generated implementations of the SDO APIs. The DataObjectBase class may contain methods such as 

As discussed above as part of the creation of an SDO an interface is generated for the particular class. ObjectInterface represents an interface related to a particular class to be implemented in SDO. For example the Realestate object described above was said to have a complete interface as follows 

Those of skill in the art will recognize that as an abstract class a client cannot instantiate DataObjectBase objects. As such Implementation class represents an implementation of a class for a particular static SDO which can be instantiated and generate objects for use by a client . Implementation will directly host the static property values associated with the particular object. Implementation extends the abstract DataObjectBase class discussed above implementing its abstract methods and also implements ObjectInterface . In our Realestate example Implementation is the RealestateImpl class which may appear as follows 

As shown in the above example Implementation directly hosts the property values such as building individualOwner and group in the above example. In addition as is known to those in the art SDO assigns the properties both user defined and internal an index value comprising positive integer values. In accordance with the present invention a modified index is created where modified index values are assigned to the properties user defined properties having positive values and internal properties having negative values.

Implementation further provides an internalConvertIndex method which correlates the internal SDO model index values to the modified index value. In the embodiment shown this is done by means of a switch statement. Switch statements are similarly used in the get and set methods such that a client can invoke the method provide a modified index value as a parameter and get the expected operation.

As a result a single switch statement can handle both user defined properties and internal properties without imposing a significant performance impact on the SDO client. In the case of an advanced client calling EMF methods to access internal features those of skill in the art will recognize that abstract class DataObjectBase overrides the EMF methods invokes the internalConvertIndex method provided which relates the provided modified index value to the SDO model index value such that the correct information is returned in response to the client s EMF method call. This imposes only a minor performance impact requiring a call to the internalConvertIndex method before calling the generated accessor instead of calling the accessor directly.

The result is a mechanism for completely hiding the internal features of an EMF object derived from an XML Schema document where the internal features necessary to fully represent the XML Schema are available to clients with a need for such information but hidden from clients in most situations in order to simplify interaction with the object. This is implemented such that the solution imposes a minimal impact in terms of increased operational burden on the client .

The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

The method further comprises the SDO data object implementation receiving a request with a parameter identifying a property. The SDO data object implementation validates the parameter. As shown in SDO data object implementation may validate the parameter by determining whether the property referenced by the parameter is found in a filtered properties set. In an alternative embodiment SDO data object implementation may invoke the methods of SDO property module which may dynamically validate the parameter as opposed to comparing the parameter against a static list of valid properties.

The SDO property module determines whether the property referenced by the parameter is a valid property for the given SDO. If so the SDO property module calls the methods of EMF to access the property and fulfill the request. If the parameter is invalid SDO property module returns an error indicating to a client that the property referenced is not a valid property of the SDO. The method ends.

The method further comprises a static SDO receiving from a client a request concerning the properties of the static SDO . The static SDO determines whether the request is an access request such as a get or set or a discovery request to which the static SDO should return metadata concerning its properties.

If the request is an access request for which an index value is provided to identify the relevant property the methods module associates the index value with the SDO internal index value and performs the requested operation. If the request is a discovery request the static SDO returns to the client metadata related only to the user defined property information of the static SDO . The method ends.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

