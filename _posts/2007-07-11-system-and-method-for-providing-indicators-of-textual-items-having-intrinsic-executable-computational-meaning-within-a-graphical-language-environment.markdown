---

title: System and method for providing indicators of textual items having intrinsic executable computational meaning within a graphical language environment
abstract: An electronic device with a graphical language environment that includes a method which examines a graphical model to identify textual items having intrinsic executable computational meaning within the graphical model is discussed. The method identifies at least one textual item with intrinsic executable computational meaning. The method further provides an indicator for the at least one identified textual item with intrinsic executable computational meaning in a display of the graphical model. The indicator may be based upon a characteristic of the identified textual item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225275&OS=08225275&RS=08225275
owner: The Math Works, Inc.
number: 08225275
owner_city: Natick
owner_country: US
publication_date: 20070711
---
This application is a continuation of U.S. patent application Ser. No. 11 157 995 which was filed Jun. 20 2005 by Torgerson et al. for A System And Method For Providing Indicators Of Textual Items Having Intrinsic Executable Computational Meaning Within A Graphical Language Environment.

The illustrative embodiment of the present invention relates generally to graphical models and more particularly to a mechanism for providing indicators for identified textual items within the graphical model that have intrinsic executable computational meaning.

Computer programmers spend large amounts of time editing and debugging computer programs as part of the process by which the programs are created and optimized. In a textual language environment the editing and debugging process requires the computer programmer to look at many lines of code. It can frequently be difficult to pick out important sections of code from all of the code surrounding the section of code that is of interest to the programmer. As a result textual editors and debuggers often include features which highlight or otherwise visually identify semantically sensitive syntax that has meaning to the programmer.

In a graphical language environment a graphical model is displayed which includes many graphical elements with interspersed textual elements. Some of the textual elements are labels for various components while other textual elements represent items with intrinsic executable computational meaning that is related to the text and is of interest to the programmer attempting to edit or optimize the model. Unfortunately conventional graphical language environments fail to provide an automated mechanism for providing an indicator for textual elements which have intrinsic executable computational meaning within a displayed graphical model where the indicator is based upon a characteristic of the identified textual item.

The illustrative embodiment of the present invention provides a mechanism for providing indicators of textual items within a displayed graphical model which have intrinsic executable computational meaning. The illustrative embodiment utilizes the mapping performed by a language processor evaluating the model to identify those textual items within the model that are executable based on the intrinsic meaning of the textual item and affect the model execution. The displayed graphical model is altered to provide an indicator of which textual items within the graphical model have intrinsic executable computational meaning with the indicator being based on a characteristic of the identified textual item.

In one aspect of the illustrative embodiment a computational device with a graphical language environment includes a method which examines a graphical model to identify textual items having intrinsic executable computational meaning within the graphical model. The method identifies at least one textual item with intrinsic executable computational meaning. The method further provides an indicator for the at least one identified textual item with intrinsic executable computational meaning in a display of the graphical model.

In another aspect of the illustrative embodiment a system for indicating textual items with intrinsic executable computational meaning within a graphical environment includes a graphical model that includes textual and graphical components. The system further includes a language processor for evaluating the textual and graphical components in the graphical model to produce executable code. Additionally the system includes a listing generated as a result of the evaluation of the textual components in the graphical model by the language processor. The listing identifies at least one textual component with intrinsic executable computational meaning. The identified at least one textual component with intrinsic executable computational meaning is altered in appearance in a display of the graphical model to a user based on a characteristic of the identified textual item.

In still another aspect of the illustrative embodiment a distributed system for indicating textual items with intrinsic executable computational meaning within a graphical environment includes a server hosting a graphical language environment. The graphical language environment further includes a graphical model that includes textual and graphical components. The graphical language environment also includes a language processor for evaluating the textual and graphical components in the graphical model to produce executable code. Additionally the graphical language environment includes a listing of executable textual components in the graphical model generated as a result of the evaluation of the graphical model by the language processor. The listing identifies textual components with intrinsic executable computational meaning in the graphical model. The identified textual components with intrinsic executable computational meaning are altered in appearance in a display of the graphical model to a user. The distributed system further includes a client communicating with the server over a network and a display device in communication with the client. The display device displays the graphical model with the altered textual items to a user.

The illustrative embodiment of the present invention provides a mechanism to automatically provide an indicator for textual elements that have intrinsic executable computational meaning in a displayed graphical model. The provided indicator may be based upon a characteristic of the textual item. The ability to distinguish between indicated text with intrinsic executable computational meaning and other textual items allows programmers to more efficiently edit and optimize graphical models by allowing the programmers to focus in on significant sections of the model.

The phrase intrinsic executable computational meaning is used herein to distinguish between those textual items found in graphical models which have executable computational meaning that is related to the word itself e.g. program language keywords event names data graphical function names linked requirement hard coded numbers etc. those textual items which are used in computations but have no intrinsic meaning e.g. a label for a block component in a model that is used as an alphabetical tiebreaker during the processing of components there is executable computational meaning associated with the textual item but it is extrinsically assigned to the item rather than stemming from the processing of the word and textual items that do not result in any sort of code that affects the execution of the model e.g. a textual comment that is not processed by the compiler or interpreter .

The electronic device may be a server mainframe laptop workstation PDA or some other type of electronic device equipped with a processor and capable of supporting the graphical language environment . The graphical language environment may be a block diagram environment such as SIMULINK a state diagram and data flow based diagram environment such as STATEFLOW LABVIEW from National Instruments Corporation of Austin Tex. Unified Modeling Language UML environments or some other type of modeling environment in which models include both graphical and textual components. The graphical model may be a block diagram model state diagram model a data flow model or some other type of model.

The language processor in the graphical language environment may process the graphical model in a number of different ways in order to provide the indicators of textual items with intrinsic executable computational meaning in the graphical model. In one implementation the language processor examines and tokenizes the textual items present in the graphical model such as STATEFLOW action language present in states or transitions. The tokens may then be looked up in a data dictionary to determine which tokens have intrinsic executable computational meaning and arranged in a parse tree. The parse tree may then be walked with the corresponding textual item in the graphical model for each node being assigned an indicator to show it has intrinsic executable computational meaning.

In an alternative implementation the language processor may evaluate the entire model to generate code before identifying which textual items in the graphical model have intrinsic executable computational meaning. Graphical components in the graphical model may represent and be translated into program code by the language processor . Similarly the textual items components in the graphical model may also represent underlying program code. How the textual items in the graphical model are treated by the language processor depends upon whether they have intrinsic executable computational meaning or whether they lack intrinsic executable computational meaning. The graphical model components textual and graphical are first converted into the corresponding underlying code associated with the components. For example for a SIMULINK model REAL TIME WORKSHOP may be used to generate the code. The language processor then tokenizes the underlying code and the executable tokens are parsed into an abstract syntax tree in a manner consistent with the language being processed. The use and creation of an abstract syntax tree are discussed in further detail below. The listings of textual items that have intrinsic executable computational meaning are flagged in the tree in the illustrative embodiment. A data dictionary may be used to identify which items have intrinsic executable computational meaning. The abstract syntax tree serves as the basis for providing a visual indicator for the textual items by quickly searching the tree and highlighting or otherwise altering the appearance of the corresponding item in the displayed graphical model . It should be noted that the use of the abstract syntax tree is optional and other listings of textual components with intrinsic executable computational meaning are considered to be within the scope of the present invention.

An example of the language processor tokenizing and parsing code to create the abstract syntax tree of the present invention is now illustrated. It will be appreciated that although the example of the tokenizing and parsing process given herein is made starting with reference to a traditional line of code rather than a component of a graphical model the components in the graphical model both graphical and textual correspond to and are translated into code before execution. An initial line of code such as may be tokenized by the language processor into the following tokens 

The tokens in turn may then be parsed into an abstract syntax tree such as that depicted in . Nodes from tokens that started as textual items are noted and the tree may then be walked to identify where to provide visual indicators in the corresponding textual items components in the graphical model . Provisions may be made so that the language processor identifies any textual items with extrinsic executable computational meaning such as the aforementioned labels for blocks that are used as tiebreakers in determining execution order differently than those textual items with intrinsic executable computational meaning. The language processor consults pre determined parameters to determine the type of indicator provided e.g. different font colors shadings marquee effects blinking effects etc. . In an alternate implementation the user may be presented with a choice of the type of indicator to be used.

The illustrative embodiment of the present invention may also be practiced utilizing a distributed architecture that enables the processing of the graphical model to occur at a remote location from the user. depicts an alternate distributed environment suitable for practicing the illustrative embodiment of the present invention. A server hosts a graphical language environment . The graphical language environment includes at least one graphical model a language processor and a listing of identified textual items with intrinsic executable computational meaning . The listing of identified textual items with intrinsic executable computational meaning may appear as an abstract syntax tree generated by the language processor processing the graphical model. Alternatively another type of listing which contains a record of the textual items with intrinsic executable computational meaning in the graphical model may be kept in the graphical language environment. The abstract syntax tree or other type of alternative listing is checked to determine the identified textual elements with intrinsic executable computational meaning and indicators are assigned to the corresponding textual items in the graphical model .

A user accessing a client communicates with the server and the graphical language environment over a network . The network may be a local area network LAN wide area network WAN an extranet intranet internet the Internet or some other type of network enabling the client to communicate with the server . Likewise the network may be a wired network or a form of wireless network. A display of the graphical model showing the indicators of the textual items components in the graphical model that have intrinsic executable computational meaning is transmitted over the network to the client and displayed to the user on a display device that is in communication with the client. It will be appreciated by those skilled in the art that although the terms client and server have been used to discuss the remote architecture implementation above other electronic devices equipped with processors and capable of performing the computational processes discussed herein that are not arranged in a client server relationship may also be used to practice the present invention in a distributed architecture.

The form of the indicator may be based on the type of textual item or some other characteristic of the identified textual item with intrinsic executable computational meaning. Those skilled in the art will appreciate that the type of indicator used to mark the textual items having intrinsic executable computational meaning may vary depending upon the implementation of the present invention. For example the identified textual item may be highlighted so as to stand out from the surrounding components in the graphical model. Alternatively the identified textual item may be assigned a different font color than the surrounding components in the graphical model. In one implementation multiple colors may be used to distinguish between different types of textual items with intrinsic executable computational meaning. For example an event name may receive one color while a keyword receives a different color. Similarly the textual item may be boxed or underlined so as to draw attention the item. Other variations will be readily apparent to those skilled in the art.

In and the system of and is shown with a second transition between the normal state and the shutdown state . The second transition includes two textual items a graphical function cool which is also shown in detail and custom textual code active sensors . shows the system without any indicators. shows the system with indicators in which the text referring to the graphical function cool has been boxed while the textual item referring to the custom textual code active sensors has been highlighted. Those skilled in the art will recognize that alternative indicators based on characteristics of the identified textual items with intrinsic executable computational meaning may be used to achieve the same effect such as coloring the graphical function one color and the custom textual code another color. The use of different indicators based on characteristics helps greatly in understanding the overall makeup of the system.

Those skilled in the art will recognize that the present invention may be extended to provide indicators for other types of textual items in addition to those textual items having intrinsic executable computational meaning. For example the language processor could be instructed to provide indicators for symbols that refer to input versus output data. Alternatively the language processor could provide indicators for global data access non volatile data symbols volatile data symbols or symbols that refer to data defined in a data dictionary. Other possible implementations will be apparent to those skilled in the art.

It should be noted that although the examples contained herein have referred to the language processor as the entity assigning the indicators to the textual items identified as having intrinsic executable computational meaning a separate process using the results of the language processor to perform similar functions is specifically contemplated as within the scope of the present invention.

The timing of the application of indicators to the textual items in the graphical model may vary depending upon the implementation. For example in one implementation the indicators will be applied in editing mode to a line of code whenever a user changes the focus such as by switching the mouse cursor to another line or hitting return on the keyboard. This application of the indicators provides a validity check to the user in the event of invalid entries as the language processor will not apply the indicator to text which does not process as a textual item with an intrinsic executable computational meaning. In other words a misspelled keyword will not be highlighted or otherwise indicated on the graphical model and will accordingly be apparent to the user who would expect the indicator to be present. In an alternative implementation the indicators may be applied to the graphical model as part of a command completion process during editing of the model by a user. In other words the auto completion of a textual item having intrinsic executable computational meaning being entered by a user may result in the immediate application of an indicator to the textual item in the graphical model. The timing of other implementations such as the application of indicators to identified textual elements during a simulation will be recognized by those skilled in the art.

The present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include C C C or JAVA. The software programs may be stored on or in one or more mediums as object code.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

