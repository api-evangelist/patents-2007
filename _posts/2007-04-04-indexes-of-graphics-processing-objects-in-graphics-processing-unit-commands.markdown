---

title: Indexes of graphics processing objects in graphics processing unit commands
abstract: This disclosure describes techniques of loading batch commands into a graphics processing unit (GPU). As described herein, a GPU driver for the GPU identifies one or more graphics processing objects to be used by the GPU in order to render a batch of graphics primitives. The GPU driver may insert indexes associated with the identified graphics processing objects into a batch command. The GPU driver may then issue the batch command to the GPU. The GPU may use the indexes in the batch command to retrieve the graphics processing objects from memory. After retrieving the graphics processing objects from memory, the GPU may use the graphics processing objects to render the batch of graphics primitives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08022958&OS=08022958&RS=08022958
owner: QUALCOMM Incorporated
number: 08022958
owner_city: San Diego
owner_country: US
publication_date: 20070404
---
The invention relates to computer graphics processing and more particularly to graphics processing units.

A graphics processing unit GPU is a specialized electronic device that is specifically designed to perform operations related to graphics processing. GPUs are often built with a highly parallel structure that provides more efficient processing than typical general purpose central processing units CPUs for a range of complex graphics related algorithms. For example the complex algorithms may correspond to representations of three dimensional computer graphics. A GPU may implement a number of so called primitive graphics operations such as forming points lines and triangles to create complex three dimensional images on a display more quickly than drawing the images directly to the display with a CPU.

This disclosure describes techniques of loading batch commands into a graphics processing unit GPU . As described herein a GPU driver for the GPU identifies one or more graphics processing objects to be used by the GPU in order to render a batch of graphics primitives. The GPU driver may formulate a batch command that includes indexes associated with the identified graphics processing objects. The GPU driver may then issue the batch command to the GPU. The GPU can use the indexes in the batch command to retrieve the graphics processing objects from memory. After retrieving the graphics processing objects from memory the GPU may use the graphics processing objects to render the batch of graphics primitives.

In one aspect a method comprises storing graphics processing objects in a memory module. The method further comprises identifying with a GPU driver after storing the graphics processing objects in the memory module ones of the graphics processing objects to be used by a GPU to render a batch of graphics primitives. The method also comprises formulating with the GPU driver a batch command to render the batch of graphics primitives with the GPU. The batch command includes indexes that indicate locations in the memory module at which the identified graphics processing objects are stored. In addition the method comprises issuing the batch command to the GPU. The GPU uses indexes included in the batch command to retrieve the identified graphics processing objects from the memory module and uses the graphics processing objects to render the batch of graphics primitives in order to generate displayable graphics information.

In another aspect a method comprises receiving with a GPU a batch command to render a batch of graphics primitives. The method also comprises using indexes included in the batch command to retrieve with the GPU ones of the graphics processing objects stored in the memory module. In addition the method comprises processing with the GPU after retrieving the graphics processing objects the batch of graphics primitives using the retrieved graphics processing objects in order to generate displayable graphics information. A GPU driver identifies graphics processing objects to be used by the GPU to render the batch of graphics primitives after the graphics processing objects are stored in the locations in the memory module and wherein the GPU driver formulates the batch command such that the batch command includes indexes associated with the identified graphics processing objects

In another aspect a device comprises a memory module that stores graphics processing objects and a central processing unit CPU that executes a GPU driver. The CPU that executes a GPU driver identifies after the graphics processing object are stored in the memory module ones of the graphics processing objects that are to be used by a GPU to render a batch of graphics primitives formulates a batch command to render the batch of graphics primitives with the GPU and issues the batch command to the GPU. The batch command includes indexes that indicate locations in the memory module at which the ones of the identified graphics processing objects are stored. The GPU receives the batch command uses the indexes in the batch command to retrieve the graphics processing objects from the memory module and renders the batch of graphics primitives using the retrieved graphics processing objects.

In another aspect a device comprises a memory module that stores graphics processing objects and a GPU. The GPU receives a batch command to render a batch of graphics primitives uses the indexes included in the batch command to retrieve ones of the graphics processing objects stored in the memory module and processes the batch of graphics primitives using the retrieved graphics processing objects in order to generate displayable graphics information. A GPU driver identifies graphics processing objects to be used by the GPU to render the batch of graphics primitives after the graphics processing objects are stored in the locations in the memory module and wherein the GPU driver formulates the batch command such that the batch command includes indexes associated with the identified graphics processing objects.

In another aspect a device comprises means for storing graphics processing objects and means for executing a GPU driver. The means for executing the GPU driver identifies after the graphics processing object are stored in the memory module ones of the graphics processing objects that are to be used by a GPU to render a batch of graphics primitives formulates a batch command to render the batch of graphics primitives with the GPU and issues the batch command to the GPU. The batch command includes indexes that indicate locations in the memory module at which the ones of the identified graphics processing objects are stored. The GPU receives the batch command uses the indexes in the batch command to retrieve the graphics processing objects from the memory module and renders the batch of graphics primitives using the retrieved graphics processing objects.

In another aspect a device comprises means for storing graphics processing objects and means for processing graphics. The means for processing graphics receives a batch command to render a batch of graphics primitives uses the indexes included in the batch command to retrieve ones of the graphics processing objects stored in the memory module and processes the batch of graphics primitives using the retrieved graphics processing objects in order to generate displayable graphics information. A GPU driver identifies graphics processing objects to be used by the GPU to render the batch of graphics primitives after the graphics processing objects are stored in the locations in the memory module and wherein the GPU driver formulates the batch command such that the batch command includes indexes associated with the identified graphics processing objects.

In another aspect a computer readable medium comprises instructions that upon execution cause a processor to store graphics processing objects in a memory module. The instructions also cause the processor identify with a graphics processing unit GPU driver after storing the graphics processing objects in the memory module ones of the graphics processing objects to be used by a GPU to render a batch of graphics primitives. The instructions also cause the processor to formulate with the GPU driver a batch command to render the batch of graphics primitives with the GPU wherein the batch command includes indexes that indicate locations in the memory module at which the identified graphics processing objects are stored. In addition the instructions cause the processor to issue the batch command to the GPU. The GPU uses indexes included the batch command to retrieve the identified graphics processing objects from the memory module and uses the graphics processing objects to render the batch of graphics primitives in order to generate displayable graphics information.

In another aspect a computer readable medium comprises instructions that upon execution cause a processor to receive with a graphics processing unit GPU a batch command to render a batch of graphics primitives. The instructions also cause the processor to use indexes included in the batch command to retrieve with the GPU ones of the graphics processing objects stored in the memory module. In addition the instructions also cause the processor to process with the GPU after retrieving the graphics processing objects the batch of graphics primitives using the retrieved graphics processing objects in order to generate displayable graphics information. A GPU driver identifies graphics processing objects to be used by the GPU to render the batch of graphics primitives after the graphics processing objects are stored in the locations in the memory module and wherein the GPU driver formulates the batch command such that the batch command includes indexes associated with the identified graphics processing objects.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

This disclosure describes techniques of loading batch commands into a graphics processing unit GPU . As described herein a GPU driver for the GPU identifies one or more graphics processing objects to be used by the GPU in order to render a batch of primitives. The GPU driver may formulate a batch command that includes indexes associated with the identified graphics processing objects. The GPU driver may then issue the batch command to the GPU. The GPU may use the indexes in the batch command to retrieve the graphics processing objects from memory. After retrieving the graphics processing objects from memory the GPU may use the graphics processing objects to render the batch of graphics primitives.

As illustrated in the example of computing device includes a CPU a GPU and a Random Access Memory RAM module may communicate using a bus . Bus may comprise a third generation bus such as a HyperTransport bus or an InfiniBand bus. Alternatively bus may comprise a second generation bus such as an Advanced Graphics Port bus a Peripheral Component Interconnect PCI Express bus or another type of bus or device interconnect. CPU may comprise a general purpose or a special purpose microprocessor. For example CPU may comprise a Core Processor provided by Intel Corporation of Santa Clara Calif. or another type of microprocessor. GPU comprises a dedicated graphics rendering device. GPU may be integrated into the motherboard of computing device may be present on a graphics card that is installed in a port in the motherboard of computing device or may be otherwise configured to interoperate with computing device . RAM module may be a Synchronous Dynamic Random Access Memory module a Direct Rambus Dynamic Random Access Memory module a Double Data Rate or Synchronous Random Access Memory module or another type of random access memory module.

As illustrated in the example of RAM module may store a set of graphics processing objects A through N collectively graphics processing objects 14 . In this context a graphics processing object may comprise a data structure that specifies a type of graphics processing information that GPU may use to perform a graphics operation. One example of a graphic processing object is a shader object. A shader object may comprise a set of instructions that when executed by GPU performs a shading operation that outputs a color for a particular pixel given the shapes the light sources and camera position of a scene. Other example graphics processing objects may include vertex streams texture sample state objects texture memory objects index buffers programs linking objects state register objects constant buffers frame buffer objects or other types of graphics processing objects.

Graphics processing objects that specify different types of graphics processing information may be arranged in RAM module as different ones of arrays A through N collectively arrays 16 . Ones of graphics processing objects in one of arrays may be arranged in adjacent memory locations in RAM module . Each one of arrays may comprise a block of memory that stores graphics processing objects that specify a particular type of graphics processing information. For example if array A includes two graphics processing objects A and B the first memory location of graphics processing object B may be the memory location in RAM module that immediately follows the last memory location of graphics processing object A. In this example graphics processing objects A and B may both be texture memory objects i.e. objects that specify texture memory graphics processing information .

Each of arrays may be associated with an array base address and an object size. Each of the graphics processing objects in an array of graphics processing objects may be associated with an index that specifies a memory location of a graphics processing object relative to an array base address. In this case a combination of an array base address with the size and index of a graphics processing object may form the memory address of the graphics processing object. Because the ones of graphics processing objects that specify different types of graphics processing information may be stored in different ones of arrays and because each of arrays may start at a different memory location the indexes of graphics processing objects that specify different types of graphics processing information indicate memory locations of the graphics processing objects relative to different memory locations.

As illustrated in the example of CPU executes a software application that generates high level commands to perform graphics operations on graphics data. For example software application may be a video game application a videoconferencing application a user interface applications a graphics design application or another type of software application that includes graphics rendering functionality. The high level commands generated by software application may include geometry information e.g. information for vertices of graphics primitives in an image and other information that describes an image. Software application may provide the high level commands to an Application Programming Interface API . API specifies a set of high level graphics processing methods. For example API may specify the methods of the OpenGL OpenVG vector graphics Graphics Device Interface GDI Quartz QuickDraw the Direct3D or other application programming interfaces. When software application provides a high level command to API API may invoke one or more methods provided by a GPU driver . GPU driver may be a software and or firmware program executed by CPU in kernel mode or part of GPU driver in user mode for the purpose of facilitating interaction between API and GPU .

When CPU loads application GPU driver may pre compile one or more graphics processing objects. For example GPU driver may pre compile all shader objects. When GPU driver compiles a graphics processing object GPU driver may store the graphics processing object in the one of arrays that stores ones of graphics processing objects that specify similar types of graphics processing information.

When API invokes one or more of the methods implemented by GPU driver in order to render a batch of graphics primitives GPU driver may identify ones of graphics processing objects to be used by GPU in order to render the batch of graphics primitives. For example GPU driver may identify a first shader object a vertex stream object a second shader object a set of state registers for use in GPU and a texture memory object as graphics processing objects to be used by GPU to render the batch of graphics primitives. In 2D graphics graphics primitives may include simple 2D shapes such as straight or curved lines boxes arbitrary polygons circles and other two dimensional shapes. In 3D graphics graphics primitives may include simple 3D shapes such as cubes cylinders spheres cones pyramids torus freeform surfaces such as Bezier surfaces and non uniform rational B spline surfaces and other simple 3D shapes. Rendering graphics primitives is a process of producing graphics information e.g. pixels of an image from these graphics primitives.

In many cases application or graphics API provide GPU driver with an identifier for a graphics processing object. The identifier may be a handler or an integer number. GPU driver may create a mapping table that corresponds to an array of graphics processing objects. Each entry of the mapping table corresponds to an entry in the array. Furthermore each entry of the mapping table may include an identifier and a valid flag. The valid flag is initialized to invalid for all empty entries at the beginning. When GPU driver receives a new graphics processing object and an identifier of the new graphics processing object GPU driver may use the identifier to allocate an index or an entry in the mapping table. If the mapping table includes an entry for the identifier GPU driver may retrieve the index specified in the entry. If the mapping table does not include an entry for the identifier GPU driver may identify an unused entry in the mapping table and assign the index to the new object set the identifier of the entry to the identifier and change the valid flag of the entry to valid. GPU driver stores a newly compiled graphics processing object into the entry in the array. In another example GPU driver may look up or assign an index for an identifier using a hashing function or a cache mechanism.

GPU driver may generate some graphics processing objects internally. For example GPU driver may generate graphics processing objects that specify state registers. When GPU driver generates a graphics processing object internally GPU driver may assign a sequential number as an identifier to the graphics processing object. Furthermore GPU driver may generate a key e.g. an integer result by applying one or more hashing functions to the content of the graphics processing object before GPU driver compiles the graphics processing object. GPU driver may assign the key as an identifier of the graphics processing object. GPU driver may use any other mechanism to generate an identifier for an object. After GPU driver assigns the identifier to the graphics processing object GPU driver may look up an index of the mapping table as described in the previous paragraph.

After identifying the graphics processing objects to be used by GPU GPU driver may search through the ones of graphics processing objects stored in RAM module to find ones of graphics processing objects that GPU driver has identified as being needed to render the batch of graphics primitives. If GPU driver is unable to find one of the identified graphics processing objects GPU driver may compile this one of the identified graphics processing object and store the compiled graphics processing object into one of arrays in RAM module . For example GPU driver may compile a graphics processing object that specifies state register values used in GPU by storing the values of these state registers as a graphics processing object in memory module .

After GPU driver finds or compiles the identified ones of graphics processing objects GPU driver may formulate a batch command for the batch of graphics primitives in a master command buffer in RAM module . Master command buffer may be a region in memory module that stores a set of batch commands A through N prior to the issuance of these batch commands to GPU . A batch command is a data structure that contains specifies a set of graphics processing objects. The batch command that GPU driver formulates may include indexes base addresses of the arrays types of the graphics processing objects and the sizes of the identified ones of graphics processing objects . The type of a graphics processing object may indicate a pipeline element in GPU that is to use the graphics processing object. In addition to the indexes and base addresses of the identified graphics processing objects GPU driver may formulate the batch command to include graphics processing objects that are very small in size. For example if the size of a graphics processing object is not significantly larger than the combined size of an index and a base address GPU driver may formulate the batch command to directly include this graphics processing object. By directly including small graphics processing objects into the batch command latency of retrieving the graphics processing objects with GPU can be reduced. Aside from these small graphics processing objects GPU driver does not create any copies of the graphics processing objects in the batch command or master command buffer when formulating the batch command.

If the identified ones of graphics processing objects include more than one graphics processing object in a single one of arrays GPU driver only inserts the base address graphics processing object type and each object size of the array of graphics processing objects into a batch command once. For example GPU driver may identify a first shader object and a second shader object as graphics processing objects needed to render a batch of graphics primitives. If the first shader object and the second shader object are of the same type the first shader object and the second shader object may be stored in the same one of arrays . When GPU driver formulates a batch command that specifies the first shader object and the second shader object GPU driver may include the base address of this one of arrays an index of the first shader object and an index of the second shader object in the batch command. For example a current batch of graphics primitives uses five texture objects with cached indexes and . GPU driver includes the five indexes and a base address of the array of texture objects in a texture state load instruction i.e. a batch command in the master command buffer. Including the indexes and the base address of the array does not require GPU driver to sort the texture objects indicated by indexes and together. Because GPU driver does not sort these states together there is no need to move or copy the data in these texture objects.

After GPU driver completes a batch command in master command buffer GPU driver may issue the batch command to GPU . When GPU driver issues the batch command to GPU the batch command is transmitted via bus to GPU .

When GPU receives a batch command GPU may use the base addresses of the arrays and the indexes of the graphics processing objects to retrieve the graphics processing objects from RAM module . When GPU retrieves one of graphics processing objects from RAM module GPU may store a copy of the graphics processing object in a hardware cache within GPU . If hardware cache contains a copy of one of graphics processing objects GPU may only need to retrieve the copy of the graphics processing object from hardware cache rather than retrieving the original graphics processing object from RAM module . After retrieving the graphics processing objects specified in the batch command GPU may use the graphics processing objects in the batch command to render the batch of graphics primitives in order to produce displayable graphics information.

The techniques described in this disclosure may provide one or more advantages. For example a computing device that implements these techniques does not typically create a copy of the graphics processing objects in the batch command for each batch of graphics primitives. Rather the device creates indexes of the graphics processing objects in the batch command. Because the indexes of the graphics processing objects may be significantly smaller than the graphics processing objects themselves less bandwidth on bus may be required in order to transmit a batch command to GPU . Furthermore because GPU may cache individual graphics processing objects in hardware cache it might not be necessary for one of the graphics processing objects to be transmitted over bus from RAM module to GPU . Because the techniques described in this disclosure may result in fewer graphics processing objects being transmitted over bus bus may have more bandwidth available with which to transmit other information. As a result the overall performance of a device that implements the techniques described in this disclosure may be improved. In another example time may be saved because hardware cache in GPU does not need to be flushed between batches of graphics primitives. For instance a first batch may use a shader object. Because the first batch uses the shader object a copy of the shader object may be stored in hardware cache . Subsequently GPU may render a second batch of graphics primitives. Later GPU may render a third batch of graphics primitives. The third batch of graphics primitives may use the shader object used by the first batch. Because the shader object may still be in hardware cache it may be unnecessary for GPU to retrieve the shader object from RAM module . This may conserve time power and bandwidth.

If RAM module does not include the graphics processing object NO of GPU driver may compile the graphics processing object . After compiling the graphics processing object GPU driver may store the graphics processing object in RAM module . Next GPU driver may insert the array base address and the index of the graphics processing object into the batch command . After adding the array base address and the index of the graphics processing object to the batch command GPU driver may loop back and again determine if the batch command includes an index for each of the identified graphics processing objects .

If the batch command does includes an index for each of the identified graphics processing objects YES of GPU driver may issue the batch command to GPU .

When a first one of pipeline engines receives a batch command from CPU the first one of the pipeline engines may generate requests to retrieve each of the graphics processing objects specified in the batch command. After the first one of the pipeline engines generates a request to retrieve one of the graphics processing objects hardware cache in GPU may determine whether hardware cache stores a copy of the one of the graphics processing objects. Hardware cache may be a hardware cache and may have various replacement policies including direct mapping way associative fully associative or other replacement policies. If hardware cache stores a copy of the one of the graphics processing objects hardware cache may return the copy of the one of the graphics processing objects to the first one of pipeline engines . On the other hand if hardware cache does not store a copy of the one of the graphics processing objects hardware cache may forward the request to RAM module . When RAM module returns the one of the graphics processing objects hardware cache may store a copy of the one of the graphics processing objects. Hardware cache may then forward the one of the graphics processing objects to the first one of pipeline engines . In another example the first one of pipeline engines may provide the indexes and array base addresses to one or more of pipeline engines . These ones of pipeline engines may then use the indexes and array base addresses to retrieve graphics processing objects. For instance the first one of pipeline engines may load a texture engine graphics processing object into pipeline engine B and may provide pipeline engine B with indexes and an array base address of one or more texture map graphics processing objects. When pipeline engine B executes the texture engine pipeline engine B may retrieve various ones of the texture map graphics processing objects as needed.

When the first one of pipeline engines receives graphics processing objects for a batch command the first one of pipeline engines may load the graphics processing objects into various ones of pipeline engines . For example the first one of pipeline engines may provide a first shader object to pipeline engine B and a second shader object to pipeline engine C. In this example pipeline engine B may execute instructions in the first shader object and provide values that result from executing the first shader object to pipeline engine C. Pipeline engine C may execute instructions in the second shader object using the values provided by pipeline B. Pipeline engine C may output values that are used by pipeline engine D and so on.

A last one of pipeline engines may output graphics information to a frame buffer . For example the last one of pipeline engines e.g. pipeline engine D may output pixels to frame buffer . The pixels in frame buffer may represent graphics information that may be displayed on a monitor screen or other display apparatus.

When GPU finishes processing a batch command hardware cache may not be flushed or invalidated. Rather graphics processing objects may remain stored in hardware cache for several batch commands. In this way if a subsequent batch command specifies a graphics processing object used in a previous batch command it may be unnecessary for hardware cache to retrieve the graphics processing object from RAM module . Hardware cache may be flushed or invalidated when GPU driver instructs GPU to flush or invalidate hardware cache . In addition graphics processing objects in hardware cache may be replaced by new graphics processing objects.

In one or more exemplary embodiments the functions described may be implemented in hardware software and or firmware or any combination thereof. If implemented in hardware the functions may be implemented in one or more microprocessors microcontrollers digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs or the like. Such components may reside within a communication system data writing and or reading system or other systems. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a computer readable medium. Computer readable media includes both computer storage media such as a computer program product that includes a computer readable medium and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise volatile or non volatile storage random access memory RAM read only memory ROM flash memory electrically erasable read only memory EEPROM compact disk read only memory CD ROM or other optical disk storage hard disk magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims.

