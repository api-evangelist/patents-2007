---

title: Labeling of data objects to apply and enforce policies
abstract: One or more labels are associated with a data object. One or more policies are associated with each of the labels. Based on the labels associated with the data objects, the associated policies are dispatched to policy decision engines to take one or more actions to enforce the policy. The labels, and the policies associated with the labels, are chosen by a business administrator within an enterprise, and are implemented by an Information Technology (IT) administrator. The association between labels and polices allows the policy to be applied to an object to be decoupled from the characterization of the nature of the object, or its purpose and/or role within an enterprise, business purpose and/or context of the object. Examples of policies are: access, backup, retention, isolation, audit, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08127133&OS=08127133&RS=08127133
owner: Microsoft Corporation
number: 08127133
owner_city: Redmond
owner_country: US
publication_date: 20070125
---
It is desirable to apply and enforce policies on the management and use of electronic data. Policies can be used to support such goals as access control compliance of financial reporting data privacy protection of intellectual property or sensitive data protection from malware etc.

Presently systems and applications require very complex and costly data analysis and controls that are custom developed to a specific business process law regulation or requirement. Each application requires its own mechanism to control and protect data which is difficult if not impossible to apply to a second set of data or process.

Moreover the mechanism for specifying the rules governing a particular data object is generally to associate the policy itself with the data object. This direct association between the policy and the data object makes it difficult to change the policy that governs a large class of similar objects e.g. to change the policy governing all health records since the policy would have to be changed for each object. It would be advantageous to have a level of abstraction that allows policies to be defined separately from the classification of data objects. E.g. to define that a data object is a health record and to separately define and or change the policy that applies to health records. 

A mechanism is provided to label data objects and to associate policies with the labels thereby providing a flexible mechanism to associate a heterogeneous set of policies with a number of data objects. Data objects can be any type of data such as files e mails software etc. A database stores a set of labels a set of policies and a set of associations between the labels and the policies. Each data object is associated with one or more labels. The policies to be applied to a data object are selected based on the particular data label s associated with that data object. On performing the operations on the data objects the policies relevant to the operations are dispatched to one or more policy engines. The policy engines may produce results e.g. if the policy is an access policy based on conditions such as userid date and time then the policy engine may return a result indicating whether the conditions for access have been met. Based on these results access may be granted or denied or other actions may be taken. The mechanism may be a component within an operating system that exposes an Application Programming Interface API so that the mechanism may be used by software both applications and system software that runs within the environment provided by that operating system.

Data labels may be prepackaged e.g. provided with the labeling and enforcement mechanism or may be custom defined. Custom defined labels are typically defined by a business person within an organization who defines the labels based on the types of data handled by that organization. The business person communicates the labels and the policies to be associated with those labels to an Information Technology IT administrator who creates the programming for the policies and associates the appropriate policies with the labels. The IT administrator may also specify which users may use which labels to associate with data objects. E.g. users who work in the finance department may have access to a different set of labels from users who work in the health department. The policy associated with a particular label may be changed thereby allowing an updated policy to be applied to existing data without changing the label.

The subject matter described herein provides a system to apply policies to data objects based on labels associated with those objects. Examples of policies that can be applied are access policies e.g. who may use a file and whether it can be read or written backup policies files are to be backed up every 30 days retention policies files are to be retained for 30 days and then deleted isolation policies co mingling of data e.g. cut and paste of content is allowed only among files with the same label and others.

Some existing systems allow policies to be applied to data. An example of such a system is a Digital Rights Management DRM system which allows a content publisher to specify access rules and other rules for content. The rules in such a system are generally specified on per content item i.e. each content item has a license that specifies who can access the item when it can be accessed how many times etc. Thus if the rules for a content item or class of content items changes each license would need to be rewritten. It is desirable to decouple the rules or policies themselves from the classification of data. For example data of a given type could be labeled where the label essentially points to a policy. The policy can be defined separately from the label and can also be changed.

Additionally it is desirable to provide a general mechanism that can be applied to data objects of various types e.g. files E mail data blobs software songs etc. The mechanism can be provided as part of a general computing or operating environment e.g. through the operating system. The mechanism can expose an Application Programming Interface API that allows applications and system software to use the mechanism to label data and to apply and enforce policies associated with the labels. Thus a file system can use the API to apply and enforce labels on files while an E mail program can use the same API to apply and enforce labels on individual E mail messages.

Labels and policies can be specified in any convenient and appropriate language e.g. eXtensible Markup Language XML . The labels policies and associations between the labels and policies can be stored in a database which may be stored in a metadata and policy server that exists to store such labels and policies . Data objects may be associated with a particular label and the association may be stored in various manners e.g. the labels may be a header for the data object or the data object and label may be placed together in a container or a database that is separate from the data objects themselves may store the associations between labels and data objects.

Business administrator identifies the data management requirements of various data objects such as files e mail messages directory objects database elements etc. Business administrator defines a set of labels that can be applied to the data objects. The labels may be defined for example on the basis of the type of data object the type of content the data object contains or how the data object is expected to be used. Examples of labels include none null operating system untrusted low known malware possible spyware reported trojan software contains patient records classified etc. For example IT administrator may define a label untrusted for data objects that should not be saved on the computer and should be deleted immediately. The labels may be pre defined e.g. provided out of the box or custom defined by business administrator . Business administrator stores the labels in metadata and policy server . The labels may be stored in various ways such as enveloped detached or in a centralized server based on type etc. Furthermore the labels may be defined in various formats such as binary eXtensible Markup Language XML binary hexadecimal etc.

IT administrator consults with business administrator to determine the business objectives for data management to be modeled by the labels and the policies that should be associated with each label. IT administrator defines the meaning or objective of the labels that are identified by business administrator . Furthermore IT administrator in consultation with business administrator defines and associates a set of policies with each of the labels. Examples of types of policies include but are not limited to authorization policy access policy isolation policy audit policy role policy integrity policy backup policy retention policy and so forth. Each of these policies represents different form of data management. The policies may be expressed in any type of language of which XML is one example. More detailed examples of such policies include 

When the policies have been defined IT administrator associates one or more policies with each of the labels and stores this association in metadata and policy server . IT administrator publishes the labels stored in metadata and policy server to user computer . It should be noted that the labels need not be stored in a central server such as metadata and policy server alternatively the labels could be stored in a local repository or database. It is also possible to distribute the storage of the labels to multiple servers or to multiple instances of user computers . The central storage of labels referred to in is merely a non limiting example. The actual labels that are published to user computer may be a subset of the labels based on the nature of the particular user as identified by business administrator . For example a user computer in the finance department of a company may have access to a subset of labels defined for financial data objects which a user computer in the health department may have access to labels defined for medical records.

A user can select one or more labels for a data object from the subset of labels available through user interfaces on user computer . The system can also implicitly label objects based on knowledge of the system e.g. locations in certain system folders without user intervention. A further variation is dynamic labels associated with data objects based on their context of use e.g. a config file is labeled immutable if it is opened by the application it is a config for and not otherwise. When a data object is to be labeled a user selects one or more labels the data object from the subset of labels through user interfaces on user computer . The user assigns the label s to a data object on the basis of the type or content of the data object. For example the user may assign label Finance to a data object if that data object includes a tax return statement. Furthermore the user may assign more than one label to a data object and define a relationship between these labels. The user assigns more than one label to the data object by explicitly assigning a first label to the data object. The data object then inherits an assignment of a second label on the basis of the relationship between these labels. Furthermore the user may aggregate more than one data label or may provide a union of data labels to a data object to form aggregate labels for a data object. Moreover the user may set precedence or give priority to the multiple labels assigned to a data object to resolve conflicts between policies associated through those labels. The user may also order the multiple labels assigned to a data object.

The labeled objects may be stored with fileserver . The labels may be stored together with their associated objects or the associations between labels and objects may be stored separately from the objects themselves.

Based on the labels assigned to data objects by the user an enforcement mechanism which may be part of an operating system of user computer retrieves the policies associated with the labels from metadata and policy server . Further the enforcement mechanism enforces the policies upon the data objects.

At an association is created between the labels and policies. The association may be created by IT administrator in consultation with business administrator . The association between the labels and the policies may be stored in metadata and policy server .

At at least one label is assigned to each of the data objects. The labels are assigned by the user on the basis of the type or content of the data in data objects. At one or more policies that are associated with each of the labels are identified. The one or more policies are identified by an enforcement mechanism which may be present in the operating system of user computers . The enforcement mechanism identifies the one or more policies associated with each of the labels by looking up for the association between labels and policies that are stored in metadata and policy server . At the one or more policies associated with each of the labels are applied on the data objects. The one or more policies applied on a data object depend upon the one or more labels assigned to the data object by the user.

Applications send requests for an operation on data object . Data objects are stored on file server . The operation may be modifying data objects backing up data objects copying and pasting data between data objects and so forth. The request is sent to enforcement mechanism that is present in operating system of user computer . Enforcement mechanism may be an application on user computer or as another example may be a hardware component. Enforcement mechanism is called through an API. The API is called with the labels associated with the requested data object . The labels are retrieved either from the resource manager that handles the data object or in some cases by looking them up in the metadata and policy server. Labels associated with the requested data objects are identified by referring to the association between labels and data objects .

Furthermore the API retrieves policies associated with the retrieved labels . Policies associated with the retrieved labels are identified on the basis of association between labels and policies . The retrieved policies are then dispatched to their respective policy decision engines . For example the authorization policies are dispatched to the authorization policy decision engine the audit policies are dispatched to the audit enforcement engines and so forth. Policy decision engine for a retrieved policy is identified on the basis of association between policies and enforcement engines .

Policy decision engines perform one or more actions for enforcing the retrieved policies on the requested data object . Enforcement mechanism collects the results of enforcement of policies from policy decision engines . The results include directives from policy decision engines on whether the operation is allowed. If the result from any of policy decision engines prevents the operation then the operation requested by applications is not allowed. Enforcement mechanism returns the results to applications .

Association between labels and policies may be changed independent of association between labels and data objects . Furthermore no action is necessary on data objects for the system to enforce a modified list of association between labels and policies or a modified policy. Furthermore IT administrator may adjust policies dynamically with changes in business requirements with the passage of time.

It should be noted that the decision made by one policy engine can affect decisions made by another policy engine. For example one policy decision engine may evaluate the decision to allow write access to an object while a second policy decision engine may evaluate the backup status of an application. Continuing with this example the policy on write access may state that write access is not allowed if the object has not been backed up in the last 30 days. In this example the second policy decision engine s evaluation of the backup status may inform the first policy decision engine s decision as to whether write access is allowed. This scenario is simply one non limiting example of how the decision of one policy decision engine can affect the decision of another policy decision engine.

In addition association between labels and data objects may be dynamic. For example consider a user who has access to patient data at a hospital to process billing records. Whenever the user enters patient data on user computer prior to storage in the database metadata and policy server applies the patient privacy label to the patient data. This is achieved by assigning the patient privacy label to the schema for patient medical records in the database. Moreover for records and information that are stored on file server operating system is automatically instructed by application to assign the same patient privacy label to all files saved by application . Operating system may also be configured not to allow any data object that has label to be copied to alternative locations or applications . Therefore when the user tries to copy data object from the database to a USB memory stick the user is denied the rights.

At policies associated with label corresponding to data object are determined. Policies are determined by the enforcement mechanism on the basis of association between labels and policies . At each of policies is dispatched to the respective policy decision engines . Policy decision engines perform one or more actions for enforcing policies on data object . At the enforcement results are collected from policy decision engines . The enforcement results are the results of the one or more actions performed by policy decision engines for enforcing policies on data object . The enforcement results are collected by enforcement mechanism .

At enforcement mechanism checks the enforcement results collected from policy decision engines . If any of the enforcement results prevent the operation on data object then at the operation is not allowed on data object . However if none the enforcement results prevent the operation on data object then at the operation on data object is allowed.

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

An example system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may include computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Therefore the methods and apparatus of the subject matter described herein or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the subject matter described herein. In the case where program code is stored on media it may be the case that the program code in question is stored on one or more media that collectively perform the actions in question which is to say that the one or more media taken together contain code to perform the actions but that in the case where there is more than one single medium there is no requirement that any particular part of the code be stored on any particular medium. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the subject matter described herein e.g. through the use of an API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

Although the explanations provided may refer to the use of subject matter described herein in the context of one or more stand alone computer systems the description is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Aspects of the subject matter described herein may be implemented in or across a plurality of processing chips or devices and data remembrance devices. For example a data remembrance device for example a memory or a storage device includes a module that receives a request from a program to perform an operation on an object. Based on one or more labels associated with the object the module determines which one or more policies are to be applied to the object. The module may identify one or more policy engines from a plurality of policy engines that are to apply the one or more policies to the object. The module receives one or more results from the one or more policy engines. Based on results received from the one or more policy engines the module determines whether the requested operation is permitted. The module executes in the operating system of a user computer.

Various examples of the subject matter described herein provide a method that provides an environment wide infrastructure for policy enforcement. The method is made environment wide by building it into the operating system. For example the enforcement mechanism may be built into the operating system and exposed to applications via an API so that the applications can use the operating system mechanism to apply labels and policies to any type of data object.

While the examples provided herein have been illustrated and described it will be clear that the claimed subject matter is not limited to these examples only. Numerous modifications changes variations substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the claimed subject matter as described in the claims.

