---

title: Integrated calendar and task scheduler
abstract: A computer implemented method for integrating a calendar and task scheduler to enable automatic scheduling of meetings and assignment of tasks based on priority. With the illustrative embodiments, a task in a user's calendaring system may be split into multiple time blocks, and each time block for the task may then be scheduled around meetings in a user's calendar. Tasks that are scheduled in the user's calendar may also be automatically rescheduled when meetings within the user's calendar change. Tasks may be scheduled over lower priority meetings in the user's calendar as needed in order to meet the due dates assigned to the tasks. The illustrative embodiments also allow for automatically adjusting meeting or task priorities based on policies, and identifying classes of activities that may be performed concurrently.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645182&OS=08645182&RS=08645182
owner: International Business Machines Corporation
number: 08645182
owner_city: Armonk
owner_country: US
publication_date: 20071002
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method for integrating a calendar and task scheduler to enable automatic scheduling of meetings and assignment of tasks based on priority.

An electronic calendar system is designed to maintain useful information for a user. Electronic calendar systems allow maintenance of a personal schedule of activities such as meeting appointments teleconference schedules vacation and business travel plans and so forth. Examples of electronic calendaring systems include Microsoft Outlook 2000 Lotus Organizer and Lotus Notes . Such systems are quite popular among users. Outlook is a trademark of Microsoft Corporation. Lotus Organizer and Lotus Notes are trademarks of International Business Machines Corporation.

Use of electronic calendaring systems for purposes such as scheduling meetings of multiple persons is known in the art. Conventional electronic calendar systems allow users to send electronic invitations to other users and for a user receiving an electronic calendar invitation to either accept or decline the invitation. An invitation typically includes a description of the event a location of the event and a scheduled start and end time of the event. An invitation decline message may be returned to the user that issued the invitation when the invitation is declined by an invited user. Likewise an invitation acceptance message may be returned to the user that issued the invitation when the user accepts the invitation. When a user accepts an invitation the scheduled event is recorded in the electronic calendar of the accepting user. Additionally a record of the calendar of the user that issued the invitation is updated to reflect the expected attendance by the accepting user. Accordingly the calendar of the user that issued the invitation includes an indication of the number of users that have accepted the invitation and the inviting user can plan for the event in response to the anticipated attendance.

For example an invitation list may be created for a particular meeting and a calendaring software application may then use this list to check each invitee s calendar for available time periods. A meeting may then be scheduled during a time period in which all or some majority of the invitees have sufficient time available on their calendar.

Conventional task planning tools in a calendaring system allow a user to schedule tasks to be performed by the user within blocks of time allocated for project work. The user may also estimate the time needed to complete a task set start times and due dates for the task and record the completion of the task. For example a user may schedule a block of time for a task against free time in the user s calendar. The free time may include any time in which the user does not have a scheduled meeting of appointment in the calendar. However with conventional task planning tools when meetings and appointments are added or removed from the user s calendar the user must manually adjust the blocks of time allocated for tasks. Thus if the user is invited to a new meeting which occurs during a block of time already allocated to a task the user must manually adjust the time allotted to the task to another block of free time in the user s calendar.

From a meeting scheduling perspective the coordinator of a meeting must typically do a lot of coordination via the telephone or electronic mail to find a time slot when the meeting participants can get together. When scheduling a meeting this coordination is necessary in existing calendaring systems because the free time shown on a user s calendar does not reflect any priorities of the user. For instance the user may have multiple meetings and tasks scheduled in the user s calendar. Since the meeting coordinator has no way to determine whether a meeting or a task in the user s calendar has a higher priority than the meeting to be scheduled the meeting coordinator must contact the user to determine whether the time blocked for another meeting or task is a hard commitment or whether the time could be made available if the priority of the existing task or meeting is low.

The illustrative embodiments provide a computer implemented method for integrating a calendar and task scheduler to enable automatic scheduling of meetings and assignment of tasks based on priority. A task to be performed by a user is created in the user s calendaring and task scheduler. The task comprises a completion block of time. A determination is then made as to whether there is an available block of free time prior to a due date of the task in the user s calendaring and task scheduler. If there are no available blocks of free time in the user s calendaring and task scheduler prior to the due date of the task the priority level of the task is compared to the priority level of a meeting or second task scheduled in the calendaring and task scheduler. If the priority level of the meeting or second task is lower than the priority level of the task the task is scheduled over at least a portion of a time block of the lower priority meeting or second task.

Turning now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment of the present invention. In this illustrative example data processing system is shown to include communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display although one or more of these components may be omitted from the data processing system.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multiprocessor system containing multiple processors of the same type.

Memory in these examples may be for example a random access memory. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may be for example a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above.

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

I O unit allows for input and output of data with other devices that may be connected to data processing system . For example I O unit may provide a connection for user input through a keyboard and mouse. Further I O unit may send output to a printer. Display may be provided to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

It should be appreciated that is only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

The illustrative embodiments provide a mechanism for integrating a calendar and task scheduler to enable automatic scheduling of meetings and assignment of tasks based on priority. A calendar tool is provided which allows a user to schedule meetings and appointments. A task planning tool is also provided which allows the user to enter information about tasks to be performed by the user. With the illustrative embodiments the integrated calendar and task scheduler uses a scheduling algorithm which allocates blocks of time in which the user will work on the tasks. These tasks are typically allocated to free time in the user s calendar. Free time is time not otherwise allocated to meetings appointments or other tasks. If a particular task requires more time for completion than an available block of free time the calendar and task scheduler in the illustrative embodiments may split the time allocated to complete the task into multiple time blocks to avoid overlapping any existing appointments and meetings. These multiple time blocks are then scheduled in the free time between meetings and appointments as needed to complete the task.

When entering tasks in the task scheduler the user assigns a minimum block of time to each task. This minimum block of time comprises the minimum amount of time necessary to work on the particular task at one sitting. For example if a task has a 5 minute start up and shut down time it may not be worthwhile to the user to schedule the task in a 15 minute block of free time between appointments. Instead the user may assign a minimum time block of 1 hour to the task. This minimum block of time for each task should also be considered when splitting the time allocated to complete a task into multiple time blocks.

The user may also assign a priority level to each meeting and task. The priority level may be a numerical value which indicates the importance of a particular meeting or task. Meetings and tasks with higher priority levels may be performed before other tasks with lower priority levels. Priorities are assigned to meetings and tasks so that when work on a higher priority task conflicts with a lower priority task or meeting the higher priority task may be scheduled during lower priority meetings as needed in order to complete the higher priority task by the task s due date. Such lower priority tasks may be reallocated to a different time block in the user s calendar and lower priority meeting may be cancelled declined or rescheduled. In addition when scheduling a meeting lower priority tasks or meetings may not appear in the user s calendar as booked if the meeting that is being scheduled has a higher priority. It should be noted that the person or entity initiating a meeting with the user may suggest a priority for the meeting which the user may factor in depending on criteria defined by the user.

The priority level assigned to each task may be changed automatically by the scheduling algorithm. For example as the due date for a task approaches the priority for the task may increase. In another example the priority for a task may increase according to the number of changes to the published schedules of the task thereby acting as a procrastination limit for the user.

The user may also assign meetings or tasks to classes which comprise specific sets of activities that may be performed by the user concurrently thereby allowing these sets of activities to overlap on the user s calendar. These activities are typically low concentration activities. For example meetings in the class participate in a telephone conference call may be specified to occur concurrently with tasks in the class travel to the airport . The calendar and task scheduler in the illustrative embodiments may automatically double book such identified items to allow multi tasking on more than one task or meeting.

When the user enters one or more unscheduled tasks in the task scheduling tool the scheduling algorithm in the illustrative embodiments locates the highest priority unscheduled and uncompleted task whose minimum time block fits into the next available block of free time. This identified task should have no unresolved dependencies on other tasks or meetings. If there are multiple tasks which meet these initial criteria the scheduling algorithm gives preference to the task that has the least remaining time to completion. If the next available block of free time is less than or equal to the remaining time needed to complete the selected task all of the next available free time is allocated to the task. If the next available block of free time is greater than the remaining time needed to complete the selected task a portion of the next available free time comprising an amount of time equal to the time remaining for completion of the task is allocated to the task. In either case the available free time up to the remaining time for completion of the task is allocated to the task and marked scheduled no longer free in the calendar. The scheduling algorithm repeats this process until all unscheduled tasks are scheduled.

As meetings and appointments are added to or removed from the user s calendar the blocks of time which are allocated to scheduled tasks are automatically rescheduled based on priorities assigned to the meetings and the tasks. A free time function in the scheduling algorithm first looks for free time in the user s calendar to reschedule a task. The free time function then looks for time availability based on time blocks already booked for lower priority meetings or tasks. In this manner tasks may be ordered based on the priority assigned to each task and then the tasks are rescheduled within the free time indicated in the user s calendar or within time blocks that already contain scheduled meetings or tasks but have a lower priority than the rescheduled task.

Turning now to an exemplary block diagram illustrating components of a calendaring and task scheduler device is shown in accordance with the illustrative embodiments. Calendaring and task scheduler client device may include for example graphical user interface GUI calendar application task application application programming interface API and operating system OS .

A user of calendaring and task scheduler client utilizes graphical user interface to interact with the applications residing in calendaring and task scheduler client such as calendar application and task application . A graphical user interface is a graphics based user interface that incorporates movable windows icons and a mouse. Graphical user interfaces have become the standard way users interact with computers.

The user may employ calendar application and task application to schedule events. A scheduled calendar event may be for example a scheduled appointment a business meeting a business trip vacation and the like. A calendar event may include a start and end time a location and a list of participants. A scheduled task event may include for example a task or project. A task event may include a start and end time an estimated completion time a due date and any dependencies on other tasks or calendar events.

Application programming interface allows the user of calendaring and task scheduler client an individual or a software routine to invoke system capabilities using a standard consistent interface without concern for how the particular functionality is implemented.

Calendar application and task application may run for example on operating system . Calendar application and task application represents any number of software applications designed to react to data to provide the desired functionality the user seeks. The software applications represented by calendar application and task application may include those software applications necessary to handle data video graphics photos or text. Embodiments of the present invention may be implemented within calendar application and task application in these examples.

Operating system is utilized to provide high level functionality to the user and to other software. Such an operating system typically includes a basic input output system. In one embodiment operating system calendar application and task application may employ user input devices in order to obtain input from the user. User input devices may include a pointing device such as a mouse and a keyboard or any other input device known to those of ordinary skill in the art. User input devices may be used for example to set user preferences in a preference window displayed on graphical user interface . However embodiments of the present invention are not restricted to utilizing user input devices for the sole purpose of setting user preferences. The user input devices may be used for any purpose necessary to accomplish the processes of embodiments of the present invention. Although the illustrative embodiments are described in terms of receiving user input via user input devices to set preferences in the preference window and displaying the window on a graphical user interface it should be noted that the illustrative embodiments may also be used in other implementations such as a web service implementation which sets preferences for the calendaring and task applications without the use of user input devices.

A processor such as for example processor in performs the basic operations in calendaring and task scheduler client . The processor may for example display information on graphical user interface . Graphical user interface has a plurality of picture elements collectively referred to as a screen which may define the appearance of a user interface environment displayed on graphical user interface . Graphical user interface screen contents and therefore the appearance of the user interface environment may be controlled or altered by calendar application task application or operating system either individually or in combination.

Referring now to an exemplary block diagram illustrating a calendar application is depicted in accordance with the illustrative embodiments. The components shown in may be located in a calendar application and a task application such as calendar application and task application in . It should be noted that calendar application and task application may also be integrated in a single application thereby providing calendaring and task scheduling functionality in the illustrative embodiments in one software application. The components shown in may be implemented in a data processing system such as for example data processing system in .

Calendar application may for example process appointment and meeting times for a user such as appointment and meeting . Calendar application uses display window to receive appointment and meeting . In addition display window provides an interface for the user to input text with regard to appointment and meeting such as for example names of people involved subject matter description of the event importance of the event etc.

Calendar application presents preference window to provide the user with an interface to allow the user to set a variety of preferences. For example the user may set a password to protect calendar application from unwanted intrusion by other users. Moreover the user may set a preference to link the calendar application to another application within the data processing system such as a task scheduler application. For example a user may set a preference in calendar application to link calendar application with task application . Furthermore the user may use preference window to set other preferences such as the priority level of meeting . The priority level may be a numerical value which indicates the importance of a particular meeting. Meetings with higher priority levels may be performed before other tasks with lower priority levels. When meeting is created by the user the user is responsible for ensuring that the priority levels for the entries in the user s calendar are compatible on the same priority scale. If the user instead receives an invitation to meeting meeting may already have an associated priority level set by the meeting coordinator. In this case the user may override the existing priority level in meeting invitations. Thus while the meeting coordinator may suggest a priority level for meeting the recipient user decides the final priority level. The priority level of meeting may also be based on a profile set up by the user. The user may use filters in calendar application to automatically assign a priority level when a meeting invitation is received based on various attributes of the invitation. For example the filters in the user s profile may specify that meeting invitations from the user s boss will automatically be assigned the highest priority level. Other attributes used for filtering may include but are not limited to meeting topic meeting location meeting class suggested priority of the meeting the date time of the meeting other invitees e.g. if Bill is attending the meeting he can cover for me RSVPs to the meeting whether the meeting is designated as required optional etc.

The user may also assign meetings to classes which comprise specific sets of activities meetings and tasks that may be performed by the user concurrently in preference window . Types of activities may be predefined out of the box and users may add their own types of activities. Each type of activity may be associated with compatible types of activities which a person may perform concurrently. For example as the scheduling algorithm looks for free blocks of time in which to schedule a task A and the algorithm locates a task or meeting B on the calendar which has a compatible type of activity for task A the algorithm schedules task A at the same time as task or meeting B. Thus calendar application may automatically double book such identified items to allow multi tasking on more than one task or meeting.

Task application may for example process tasks and projects for the user such as task project . Task application uses display window to display task project . In addition display window provides an interface for the user to input text with regard to task project such as for example a description of the task the estimated amount of time required to complete the task the due date of the task etc. Any task with a scheduled completion after its due date may be visually distinguished from other tasks in display window such as by having the task highlighted or displayed in a different color than other tasks in display window . Tasks with higher priority levels may also be visually distinguished from lower priority tasks in display window such as by having the task highlighted or displayed in a different color than other tasks in display window .

Task application presents preference window to provide the user with an interface to allow the user to set a variety of preferences. The user may set a preference to link the task application to another application within the data processing system such as a calendar application . For example a user may set a preference in task application to link task application with calendar application . Furthermore the user may use preference window to set other preferences used by task application . For example preference window may allow the user to assign a minimum block of time to a task. The minimum block of time for each task comprises the minimum amount of time needed in the user s calendar to work on the particular task at one sitting in order to make working on the task during that block of time worthwhile to the user. The task will be scheduled in an available block of time in the user s calendar only if the block of time meets the minimum amount of time requirement set by the user.

The user may also use preference window to assign a priority level to a task. The priority level may be a numerical value which indicates the importance of a particular task. Tasks with higher priority levels may be performed before other tasks with lower priority levels. When work on a higher priority task conflicts with a lower priority task or meeting the higher priority task may be scheduled during lower priority meetings as needed in order to complete the higher priority task by the task s due date. Lower priority tasks may be reallocated to a different time block in the user s calendar and lower priority meetings may be cancelled declined or rescheduled.

The user may also use preference window to specify that the scheduling algorithm may automatically call a specified function or a policy to change the priority level assigned to each task when necessary. For example the function or policy may raise the priority level for a task to the highest priority level if the task s estimated completion date is less than two work days before the task s due date. In another example the priority level of a task may be raised by one priority level incrementally up to the highest priority level if the task s schedule has been published since the task s previous reschedule. Preference window may also provide a means for the user to indicate that a task is very important. These very important tasks may be flagged such that their priority levels may not be automatically altered by the function or policy.

The user may also assign tasks to classes which comprise specific sets of activities meetings and tasks that may be performed by the user concurrently in preference window . Assigning tasks to such classes allows these sets of activities to overlap on the user s calendar. Task application may automatically double book such identified items to allow multi tasking on more than one task or meeting.

Tasks may also be planned without being scheduled in the calendar or may be removed from the schedule while retaining information that the task contains. For example this information may include contacts history references unique problem approaches and the like. Retaining the task information even if tasks are not scheduled enables a user to brainstorm on the tasks such as document the tasks arrange the tasks etc. without being held accountable by the user or anyone else to accomplish the tasks.

The process begins when a new meeting or appointment is created in the user s calendar step . When the new meeting or appointment is created the user enters information about the meeting or appointment such as the date start and end times the subject of the meeting or appointment the attendees etc step .

The user also sets a priority level for the new meeting or appointment step . The priority level indicates the importance of the meeting or appointment. The priority level set by the user may override any priority level already associated with the meeting or appointment. For example when a meeting coordinator sends a meeting invitation to the user the coordinator may assign a priority level to the meeting. However when the user receives and accepts the invitation the user may override the existing priority level assigned to the meeting and assign a higher or lower priority to the meeting based on policies defined for the calendar or the time of accepting the invitation.

The user may optionally assign the new meeting to a class of activities which may be performed concurrently with other classes of activities step . Consequently the blocks of time for the new meeting and a task that belongs to a concurrent class may overlap on the user s calendar.

Once the priority level and if applicable the concurrent activity designation is set for the meeting or appointment the meeting or appointment is scheduled in the designated time block in the user s calendar step .

The process begins with the user first creating a task in a calendaring and task scheduler client device step . The user may assign a minimum block of time to the task step . This minimum block of time comprises the minimum amount of time necessary to work on the particular task at one sitting. The user also assigns a priority level to the task step . The priority level indicates the importance of the task to the user.

The user may optionally assign the new task to a class as a concurrent activity step . The task may be designated as an activity that may be performed by the user at the same time as another activity in another class that is designated as a class of activities that may be performed concurrently with activity of the first class. Consequently the blocks of time for the new task and any concurrent activities may overlap on the user s calendar.

Once the priority level and if applicable the concurrent activity designation is set for the task the task is scheduled in the designated time block in the user s calendar step .

The process begins with the scheduling algorithm identifying the highest priority task with no unscheduled dependencies in a group of unscheduled and uncompleted tasks step . If there are multiple unscheduled tasks which meet the criteria of having the highest priority level the scheduling algorithm gives preference to and selects the task with the least remaining time to complete the task.

The scheduling algorithm then locates the next available block of free time in the user s calendar step . If a second pass is made because the first pass did not schedule the task s completion before its due date this step considers lower priority meetings or meetings of a class which allow concurrent work on the task as available free time for scheduling this task. Where such meetings and free time are chronologically adjacent they are considered to be one block of free time for this step in the second pass. A determination is made by the scheduling algorithm as to whether the located block of free time meets is greater than or equal to the minimum time requirement for the selected task step . If the located block of free time does not meet the minimum time requirement for the selected task no output of step the scheduling algorithm loops back to step to locate the subsequent next available block of free time in the user s calendar.

If that located block of free time meets the minimum time requirement for the selected task yes output of step a determination is made as to whether the remaining completion time for the selected task is less than or equal to that located block of free time step . If the remaining completion time for the selected task is less than or equal to that located block of free time yes output of step the scheduling algorithm schedules the task in that block of free time step .

If the remaining completion time for the selected task is greater than that located block of free time no output of step the scheduling algorithm splits the selected task into two blocks of time such that the first of the two blocks will fit into the located block of free time step . The first of the two blocks is scheduled in the located block of free time step and the second of the two blocks is added back to the group of unscheduled tasks step . The scheduling algorithm then returns to step to schedule the second block of time. In this manner the selected task may be split into various time blocks in order to be scheduled within the available blocks of free time within the user s calendar. For example if the next available block of free time is 2 hours and the remaining completion time for the task is 4 hours the selected task may be split into a first block of 2 hours and a second block of 2 hours. In this manner the first block of the task may be scheduled into the next available time block. To schedule the remaining second block of time in the user s calendar the scheduling algorithm may schedule the second block of time into the subsequent next available block of time if that block of time is greater than or equal to the second block of time. If the subsequent next available block of time is less then the second block of time for the task the scheduling algorithm may further split the second block of time for the task into additional blocks of time in order to fit those blocks into the available free time in the user s calendar and to complete the task within the task s due date.

After the task is completely scheduled the scheduling algorithm loops back to step to select and schedule the next unscheduled task. The process continues until all tasks are scheduled.

The process begins when the scheduling algorithm detects that a task is being added to or removed from the user s calendar step . The scheduling algorithm then determines whether the task is being added or removed step .

If the task is being removed from the user s calendar removed output of step the scheduling algorithm removes the scheduled task step and then reschedules all of the tasks from that point forward in time to another earlier block of time in the user s calendar step . This rescheduling follows the process illustrated in .

If the task is being added to the user s calendar added output of step the scheduling algorithm reschedules all tasks from that point forward in time along with the new task being added step following the process illustrated in . That is all of the tasks from that point forward in time are removed from the schedule and added to the group of unscheduled tasks and then rescheduled along with the added task.

The process begins when the scheduling algorithm detects that a meeting is being added to or removed from the user s calendar step . The scheduling algorithm then determines whether the meeting is being added or removed step . If the meeting is being removed from the user s calendar removed output of step the scheduling algorithm identifies all existing scheduled tasks which occur after the time block of the removed meeting step . Each of these identified tasks are rescheduled in new earlier time blocks in the user s calendar beginning at the time block for the removed meeting step . This rescheduling follows the process illustrated in .

If the meeting is being added to the user s calendar added output of step the scheduling algorithm determines if the desired time block specified to be scheduled for the added meeting conflicts with an existing scheduled task in the user s calendar step . A conflict may include any overlap in the time block for the added meeting with the time block scheduled for the existing task. If the time block to be scheduled for the added meeting does not conflict with the time block for an existing scheduled task no output of step the scheduling algorithm schedules the added meeting in the time block specified by the user step with the process terminating thereafter.

If the time block to be scheduled for the added meeting conflicts with the time block for an existing scheduled task yes output of step the scheduling algorithm schedules the added meeting in the time block specified by the user and reschedules all tasks from that point forward in time following the process illustrated in step . In this manner the time block assigned to a lower priority meeting may overlap a higher priority task which cannot be moved without missing its due date. Thus while the lower priority meeting is scheduled at the specified time block the lower priority meeting is flagged as conflicting with a higher priority task. In contrast lower priority tasks which may overlap with higher priority tasks are rescheduled to a different time block by the scheduling algorithm. In an alternative embodiment the scheduling algorithm may not schedule the lower priority meeting if it conflicts with a higher priority task which cannot be moved without missing its due date. Instead the scheduling algorithm may send a notice to the meeting coordinator or other meeting participants declining the meeting invitation.

The process begins when meeting coordinator initiates a request for available meeting times step . The meeting coordinator s calendar application contacts each of the invitee s calendar applications to request a list of available times for a given meeting of a given length in a given time range passing along information including the meeting coordinator s suggested priority level of the meeting that each invitee s calendar application could use to assign a priority to the potential meeting such as who called the meeting whether the invitee is required or optional and meeting topic step . Upon receiving the request for available times an invitee s calendar application runs a user configured function to determine the priority of the meeting request step . An invitee s calendar application looks at the given time range on the invitee s calendar and other attributes e.g. who called the meeting is it okay to send a delegate meeting location other meeting invitees etc. and compiles a list of free times of length greater than or equal to the requested meeting length step . An invitee s calendar application then completes another pass and compiles a list of times allocated to lower priority items step and then returns both lists step . The meeting coordinator s calendar application computes the intersection of all of the returned free time lists and also computes the intersection of all of the lower priority time lists and presents the intersections to the meeting coordinator as available meeting times using visual markers to distinguish the free times from the lower priority times step . The meeting coordinator then uses this information to select a time to schedule the meeting step . The meeting coordinator s calendar application then emails the meeting request to the invitees who may then accept decline counter or delegate the meeting step .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Further a computer storage medium may contain or store a computer readable program code such that when the computer readable program code is executed on a computer the execution of this computer readable program code causes the computer to transmit another computer readable program code over a communications link. This communications link may use a medium that is for example without limitation physical or wireless.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

