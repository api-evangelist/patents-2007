---

title: Threat-detection in a distributed multi-camera surveillance system
abstract: A method is provided for detecting a threat in a distributed multi-camera surveillance system. The method includes: monitoring movement of an object in a field of view of a first camera using software installed at the first camera; detecting a suspicious object at the first camera when movement of the object does not conform with a motion flow model residing at the first camera; sending a tracking request from the first camera to a second camera upon detecting the suspicious object at the first camera; monitoring movement of the object in a field of view of the second camera using software installed at the second camera; assigning threat scores at the second camera when the movement of the object does not conform with a motion flow model residing at the second camera; and generating an alarm based in part on the threat scores detected at the first camera and the second camera.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08760519&OS=08760519&RS=08760519
owner: Panasonic Corporation
number: 08760519
owner_city: Osaka
owner_country: JP
publication_date: 20070216
---
The present disclosure relates to surveillance systems and more particularly to an automated threat detection scheme for a distributed multi camera surveillance system.

Video surveillance is a key technology for enhanced protection of facilities such as airports and power stations. Video surveillance hardware has developed to the point where the implementation of networks having thousands of cameras is now feasible. However constructing software that efficiently and reliably deals with networks of this size remains a problem.

A key step towards automating surveillance of video from many cameras is to generate an understanding of the paths which targets take between the field of views of different cameras. Detecting a threat based on the historical path information requires finding the correlation between the flows cross multiple cameras. Without such correlation an abnormal threat behavior of a person visiting different surveillance zone may appear normal in each camera. This disclosure proposes to solve the problem using a novel activity topology discovery method to calculate correlation of statistical properties of object path between the entry and exit regions of the multiple cameras by using a decentralized approach in which the correspondence between cameras is carried out through message exchange. Each camera learns their source entry and sink exit regions thereby reducing the state space. The space is further reduced by considering only the source and sink regions when determining correspondence between cameras. Learned topology information may be also used to answer alarm related queries and combine surveillance video recordings from multiple cameras into a coherent retrieval result.

Learned correlation between the object paths between cameras forms a normal activity topology information base that may be used to detect the threat level of object traveling from camera to camera. It can also be used to display highly correlated surveillance video in adjacent position to facilitate tracking a fast moving objects cross multiple cameras.

The statements in this section merely provide background information related to the present disclosure and may not constitute prior art.

A method is provided for detecting a threat in a distributed multi camera surveillance system. The method includes monitoring movement of an object in a field of view of a first camera using software installed at the first camera detecting a threat at the first camera when movement of the object does not conform with a motion flow model residing at the first camera sending a tracking request from the first camera to a second camera upon detecting the threat at the first camera monitoring movement of the object in a field of view of the second camera using software installed at the second camera detecting an threat at the second camera when the movement of the object does not conform with a motion flow model residing at the second camera and generating an alarm based in part on the threat detected at the first camera and the second camera.

In another aspect of this disclosure a method is provided for learning motion flow of objects between two or more cameras in a distributed multi camera surveillance system. The method includes detecting an object moving in a field of view of a first camera using software installed at the first camera sending a tracking request from the first camera across a network to other cameras in the network searching for the object in a field of view of a second camera in response to the tracking request received from the first camera and associating the second camera with the first camera when the object is detected in the field of view of the second camera.

Further areas of applicability will become apparent from the description provided herein. It should be understood that the description and specific examples are intended for purposes of illustration only and are not intended to limit the scope of the present disclosure.

The drawings described herein are for illustration purposes only and are not intended to limit the scope of the present disclosure in any way.

With reference to each camera is configured to learn the motion flow of objects in its field of view and build a motion flow model also referred to herein as flow model building algorithm . The path or track of an object moving in the field of view of the camera is generated at by an object tracking algorithm. Each track is defined by an object identifier and a series of positional data i.e. x y coordinates having a corresponding timestamp as is known in the art. The camera accumulates such metadata over one or more periods of time.

Flow descriptors are the directional paths of objects moving in the field of view of the camera. From the track data the camera can build flow descriptors by using clustering. For a given period of time a clustering algorithm is applied at to the beginning points and ending points of the tracks which occur in the time period. Exemplary clustering algorithms may include but are not limited to a K means or an expectation maximization EM algorithm. The clustered beginning points define entry source areas within the field of view of the camera whereas the clustered ending points define exit sink areas within the field of view of the camera. Entry and exit areas may have temporal extend in which they are active.

Each camera assigns unique identifiers for each discovered entry region exit region and flow where a flow is between an entry and an exit region. Given n entry areas and m exit areas the possible number of directional paths Fare n m. Flow descriptors are constructed by assigning individual tracks to an applicable directional path when its begin point and end point falls within the entry areas and exit areas respectively of the applicable directional path. Unassigned tracks may be discarded. Likewise directional paths having only a few assigned tracks may be discarded so that the resulting flow descriptors are for the predominant traffic patterns. By repeating this process for different time periods different flow descriptors can be developed for different times such as different times of the day different days of the week e.g. weekdays vs. weekends etc.

For each flow the system can extract the average number of object detection events in average how long each object spends on the flow per flow. The measure of difference from the expected average will indicate the level of threat for an object. For example an object is spending too much time on the flow may be indicative of somebody is wandering around . For each obstacle region the system can extract the average number of seconds frames during which an object would be behind the obstacle till the re appearance on the possible flows. This extracted knowledge is used as to assign threat score to an object when the object is not re appearing again. In addition to this information each flow descriptor is comprised of a flow description a temporal description and a confidence attribute. The flow description represents the directional motion flow in the camera s field of view. The temporal description denotes the time interval in which the flow is in effect and the confidence attribute is a quantitative measure of how reliable this knowledge is. The compilation of the flow descriptors defines a motion flow model for the camera which may be stored in its local data store.

Directional paths may be separated by obstacles which appear in the camera s field of view as shown in . Object matching may be used to associate two disjoint paths within the field of view of a camera. Briefly when a camera detects an object the camera can determine visual properties associated with the object. The camera can then look for the object along other directional paths within its field of view. For instance when the camera detects an object moving along directional flow F it may look for that object to appear on directional flow F. When the camera detects the object moving along another path it may form an associate between these two paths. Further details regarding object matching are provided below.

In the case two or more paths emerge from behind an obstacle e.g. Fand F the camera may assign a probability that an object will appear on a given path. Conditional probability is modeled for obstacle regions by using normal probability model. P ObjectAppears InEntryRegion X ObjectDisappearedInExitRegion Y and ObjectWasOnFlow F is an example probability model associated with the obstacle regions. The condition can be extended by utilizing other properties of objects such as object type car person etc and velocity. The model can include the expected time of appearance. The model can also include that the object will not appear in any of the known flows.

Each camera is also configured to learn its associations with other cameras within the surveillance system also referred to herein as camera association algorithm . Object matching is again used to determine associations between cameras. Object matching is based on a set of visual features of an object obtained by cameras. The match between different feature vectors can be represented by a weighted sum approach or Bayesian approach. Other matching approaches are also contemplated by this disclosure.

Each camera does not need to have the same set of feature extraction components. This is sometime due to the lack of availability of a homogenous camera system and sometimes even when the cameras are exactly the same the camera views are different for example one camera is mounted to ceiling and looking down . In such configuration some features cannot be reliably observed and it does not make sense to use such features in the matching algorithm. For example the height measurement requires that the camera field of view has the ground plane. The height feature of an object obtained by a camera looking down from ceiling cannot be used. Thus the weight of such feature should be set to 0. The matching algorithm is applied on the common feature vectors associated with an object. Some feature vectors such as color descriptor may be using different color spaces or quantization. Thus the matching algorithm may need to normalize the feature vectors into common representation before comparison.

Visual descriptor of an object does not need to be obtained from the last observation measurement. The some visual descriptor of an object also can be build by combining the last k number of observations. For example assume that the camera extracts the color histogram CIE LAB space for the whole object upper part of the object and lower part of the object. Assume that the color feature vector of object in last k observations are FVt FV t 1 . . . FV t k 1 . Then the weighted combination of feature vectors can be used as a descriptor at the current frame t 

Exemplary features may include a velocity model N color descriptors such as color histograms or MPEG7 Color Descriptors texture descriptors such as MPEG7 Texture Descriptors shape descriptors such as MPEG7 Shape Descriptors height model N weight model gait and face descriptors such as based on Gabor features and MPEG7 Face Descriptor. Some of these features are further described below. It is readily understood that other features are within the scope of this disclosure.

The velocity model of an object is build by using Gaussian probability model by using the instantaneous velocity observations. The distance between two models can be calculated by using Kullback Liebler divergence or Jensen Shannon divergence measure.

The height model of an object is build by using Gaussian probability model by using the instantaneous height measurements. The distance between two models can be calculated by using Kullback Liebler divergence or Jensen Shannon divergence measure.

The distribution of colors observed in an object is expressed by color histograms. Each bin represents a color and the value represents the frequency of such color in an object. For example in RGB color space one can use 8 bins for each color and obtains 8 8 8 512 bins and each bin represents a color interval in RGB space 3D representation and these intervals may be variable length. There are many color spaces such as HSV Hue Saturation Value . YCbCr CIE Lab etc. to build a color histogram. Particularly color histogram in CIE Lab is more perceptually linear color space. The histogram can be obtained by using the 3 components L a b as well as only using a b components by dropping the luminance component. The histogram representation by using only a and b channels of Lab color space likely to produce color descriptor that are less sensitive to illumination changes between cameras. The distance between color histograms can be calculated by using Lp distance histogram intersection quadratic distance etc. methods. The Lp norm Minkowski distance defined as 

Dominant color descriptor represents the distribution of salient colors in the region of interest. The distance between two descriptors Fand Fis measured with L2 distance function D F F as F c p v s i 1 2 . . . N F c p v s j 1 2 . . . N where c denotes the dominant color value a vector corresponding to color space components in given color space for example in RGB color space 3 D vector N denotes the number of dominant colors. The percentage p is the fraction of pixels corresponding to color c and normalized value between 0 and 1

The color variance describes the variation of the color values of the pixels in a cluster around the corresponding representative color c. The spatial coherence s is a single number that represents the overall spatial homogeneity of the dominant colors.

The homogeneous texture descriptor represents the region texture by using mean energy and the energy deviation from a set of frequency channels each channel modeled using Gabor functions . The HTD contains HTD f f e e . . . e d d . . . d where fand fare the mean and standard deviation of the region eand dare the nonlinear scaled and quantized mean energy and energy deviation of the corresponding channel. The similarity is weighted sum of absolute difference between two sets of features.

The region based shape descriptor represents the pixel distribution within a 2 D object or region. It uses 2D Angular Radial Transform. The distance is based on L1 norm. In contrast the contour based shape descriptor uses Curvature Scale Space representation of the contour. The similarity measure is based on weighted L1 norm.

When a camera detects an object the camera starts determining and accumulating properties of the detected object i.e. properties are compiled as a set of feature vectors or attributes associated with an object as indicated at of . Upon approaching an exit area in the field of view of the camera the camera sends a tracking request at across the network to other cameras. For instance the tracking request may be sent as a broadcast message as is known in many communication protocols. The tracking request message includes a unique identifier for the originating camera an object identifier an identifier for each flow traversed by the object properties of the detected object a time stamp threat scores and an expiration value i.e. time to live TTL . In the case of a wireless network the camera may use a location aware messaging scheme to restrict where the tracking requests are sent in the network.

When a camera receives a tracking request the camera begins searching for or tracking the requested object in its field of view as indicated at . In an exemplary implementation a tracking entry is placed into a tracked object s list that is maintained by the tracking algorithm residing on the camera. If an entry in the tracked object s list already matches with the requested object then the camera sends feedback message back to originating camera to inform that the object is detected. This positive feedback message contains threat scores associated with an object. If requested object does not match any of the currently tracked objects the camera puts an entry into the tracking list until TTL expires. If a matching object is detected before the expiration of the request then the camera will also sends a feedback message back to the originating camera. Use of the expiration field allows cameras which do not have overlapping field of views can be associated with each other. An exemplary feedback message will contain an identifier for the responding camera an object identifier an identifier for each flow traversed in the field of view of the responding camera a time of detection threat scores and confidence level of match. If a matching object is not detected e.g. TTL expires then camera removes this object definition from the tracked object list and no feedback message is provided to the originating camera. In an alternative implementation a feedback massage may be sent even when a matching object is not found if the tracking message requires that the feedback is needed.

When a camera receives a feedback message from another camera the camera may form or update an association with the responding camera. In a simple example the originating camera forms an associate with a responding camera upon receipt of any feedback message from the responding camera. Alternatively the originating camera may form the associate when the confidence level of a match as reported in the feedback message exceeds some predefined threshold.

To construct a more detailed topology the originating camera may form an associated between a particular flow path in its field of view and a particular flow path in the field of view of the responding camera. In an exemplary embodiment each camera keeps two kinds of information about the flows between cameras where in which camera an object will re appear if an object is in a given flow within the camera and where in which camera an object was if an object is detected in an entry region of camera 

To learn in which camera an object will re appear each camera keeps a list of the records for each flow flow id . Each record contains the following attributes 

To learn where an object could be before it appeared in an entry region each camera also maintains another list for each entry region in its field of view. Each record in this list includes a camera identifier a flow identifier an exit region identifier and a probability it was there i.e. a of inflows from different exit regions in other cameras to a entry region . This information is easily captured in the messaging scheme described above.

Let s assume obj x following flow f disappeared from the field of view of camera . When camera receives feedback message for obj x from camera y this feedback message at least contains a camera identifier for camera y an entry region identifier in camera y a flow identifier in camera y a confidence of match and timestamp. Assuming that the confidence value is larger than a threshold 90 this feedback acknowledges that the appearance of obj x in camera y. Camera can then proceed as follows. First a counter that tracks number of objects disappeared on flow f is incremented. Next a search is performed for an entry f camera y entryRegionId in the associations table. Update the number of observations in the entry by incrementing the number of samples attribute. If no entry is found then a new entry is added to the associations table with current time stamp flow identifier as f camera identifier as camera y number of observations as 1 probability p as 0. Lastly probability values for each row that has f as a flow are re evaluated based on the current feedback message. Special camera identifier 1 denotes that the object did not appear in any camera or the confidence was below average. Thus the special row f camera id 1 tracks such observations and their occurrence probabilities. In this way an originating camera may also form associates based upon a series of feedback messages for different objects.

Since usage patterns will change over time cameras are further configured to re learn its associations. For instance a camera may periodically broadcast tracking requests to confirm its associations. Alternatively when a camera detects it is no longer receiving feedback from an associated camera it may re initiate the learning process.

Camera associations may be defined using directed graphs as shown in . Each node in the graph corresponds to a camera or alternatively to a flow path whereas each edge in the graph corresponds to an association between cameras or between flow paths respectively. Each association may further denote a confidence level for the association. Other techniques for representing the camera associations are also contemplated by this disclosure. In any case associations between an originating camera and other cameras are maintained in a local data store associated with the originating camera.

A method for detecting a threat in a distributed multi camera surveillance system is further described below in relation to . By learning the motion flows in its observation area a camera builds temporal motion flow models for its observed scene. When a detected object does not conform to the learned flow model i.e. detects a threat or abnormality the camera may generate an alarm. This approach is superior to the directional VMD configurations. For example a camera observing an entrance of building is able to learn that in the morning hours the flow is from north to south and in the evening hours the flow is from south to north since people leave the building. These exemplary flows are generalized for easy of understanding. The number of flows depends on the scene observed by the camera.

Moreover associated cameras can work together to detect threats without the involvement of a central server. Upon detecting a threat an originating camera sends a tracking request to one or more associated cameras. Tracking request contains scores that are assigned to an object from individual scoring algorithms applied by the originating camera. An exemplary scoring algorithm is provided in the appendix below. Other exemplary scoring algorithms may be found in U.S. patent application Ser. No. filed concurrently herewith and entitled Surveillance Systems and Methods which is incorporated herein by reference. These and other scoring algorithms are within the scope of this disclosure. Thus the threat score is passed along in the tracking request to assist other cameras in evaluating the threat.

Rather than flooding the network with unnecessary messages the tracking request is only sent to associated cameras. In a preferred embodiment the tracking request may be sent only to cameras associated with the exit area in which tracked object was last observed. Upon receiving a tracking request the camera begins searching for or tracking the requested object in its field of view in the manner described above.

When the movement of the tracked object does not conform with the motion flow model of a second camera the second camera may generate an alarm. In the camera detecting an object X in entry area A is an expected event. But the detecting an object coming from exit region A in camera is quite rare. The motion cannot be flagged as suspicious by camera and camera since for both stand alone observations are quite normal. What makes this a threat in camera is that the object X has been appeared in camera before. Aggregation of threat level for an object in the second camera builds on top of the threat score obtained from the previous camera. The combination can be weighted average with or without time dependent time decay values.

The distributed multi camera surveillance system may also be interconnected to a remote monitoring station as shown in . The remote monitoring station is generally comprised a video server and a plurality of video monitors for viewing the video data captured throughout the surveillance system. It is understood that the number of video monitors is less than the number of camera and that video data from different camera is typically displayed in accordance with some predefined sequence.

The video server at the remote monitoring station further includes a global view builder a query engine and a data store. The global view builder is responsible for collecting learned camera associates from each of the cameras and building a global camera association.

The global view builder may learn the camera associates from the distributed cameras in different ways. For instance each camera may support an application programming interface API that allows an external module such as the global view builder to pull learned camera associations from the camera. Although other data formats are contemplated the camera associations may be represented using the Predictive Model Markup Language. The global view builder may then periodically query the API to retrieve the camera associates residing on each camera. In another instance each camera supports an API that allows an external module to configure a notification endpoint such as a port number HTTP address multicast address etc. to report when the learned associations have changed. In this way the global view builder may receive updates when camera associates have changed.

Given the camera associations as reported by each of the cameras the global view builder can construct a global view of the network. illustrates how the global view builder deducts camera associations from an exemplary collected local view. Let s assume that the global view builder has collected the following records from each camera flowid exitRegionId cameraid entryRegionIdInCamera flowIdInCamera probabilityOfAppearance numberOfSamples TS lastNResults. For each camera extract cameraid i and probabilityOfAppearabce i . In the list of camera probabilityOfAppearabce combine add the probability attribute values when cameraid is the same for iand jelement. For each unique camera identifier there is only one probability value. Normalize the probability value by using the sum of probability values. This algorithm produces the camera camera associations. Special camera id value such as 1 is used for objects does not appear in any known camera.

The camera associates are preserved as directed graphs. An exemplary directed graph is shown in . Each vertex in the graph contains a camera identifier. Each edge in the graph denotes a confidence measure for the associate and an average time delay for objects moving between the field of views of the associated cameras. The t value is obtained from and in combination with the sample size addition of two mean value require sample size to get a reliable value .

When an alarm is reported by one of the cameras to the central monitoring station the reporting camera may also provide the video file that is associated with the alarm. In other words the video data which shows the object that caused the alarm condition. When the alarm was based on observations by multiple cameras then the reporting camera may also send messages to each of the other cameras which observed the suspicious object. These observing cameras may in turn send video data which shows the suspicious object to the monitoring station. In this way video data associated with an alarm condition is reported to the monitoring station. The video data may be stored for subsequent query at the video server of the monitoring station and or may be immediately displayed along with other operator indicators on one of the monitors residing at the monitoring station.

In lieu of or in addition to real time reporting of alarm conditions video data from each camera may be archived at the remote monitoring station. Video data or portions of video data from each camera is periodically retrieved and stored at the remote monitoring station. Archived video data from different camera may be queried by the query engine in the manner further described below.

For example an operator is aware of an approximate time an event that occurred at a location which is in the field of view of a particular camera. The operator formulates a search query for this event and submits the query to the query engine. For instance search for video files taken by the particular camera during a specified time period i.e. between tand t . When the time period is quite large e.g. a few hours or a few days multiple video files may meet the search criteria. Given a search query the query engine first retrieves all of the video files which meet the search criteria.

The query engine can then search for video files from other cameras. Cameras associated with the particular camera are learned from the directed graphs constructed by the global view builder. A new set of queries can be executed for each of the associated cameras. The specified time period for each query will be adjusted based on the average time delay between the cameras as denoted on the graph. For example if the average time delay is t then the specified time period for the query is t t 

In the case of a query with a large time window further correspondence between video files at each node needs to be established. In one example correspondence can be established by using temporal relationships. In another example correspondence can be established between videos using additional visual features. For example face vectors associated with each person detected in a video file can be used to link videos from different cameras.

Finally the videos are ordered in time axis and a synchronized video playback is returned as the search result by the query engine. In an exemplary embodiment Synchronized Multimedia Integration Language SMIL is used to synchronize the video playback. Other synchronization techniques are contemplated by this disclosure.

The above description is merely exemplary in nature and is not intended to limit the present disclosure application or uses.

Compare the current occurrence probability associated with current location of an object with the mean value of occurrence probabilities obtained from last 3 time slices. When the occurrence probability associated with the current location of an object is less than the mean value of occurrence probabilities the algorithm assigns abnormality score by using the distance from the mean value.

