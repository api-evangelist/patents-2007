---

title: Method and apparatus for runtime error handling
abstract: A method and an apparatus for receiving an error notification associated with a runtime error of a software application to generate a plurality of context attributes from a runtime state of the software application associated with an instant of time of the runtime error are described. One or more potential solutions are searched from a data storage including a solution repository based on the plurality of context attributes at substantially the same instant of time. An acceptable solution for the runtime error is determined based on the one or more potential solutions. The solution repository is updated with a new solution if the acceptable solution cannot be determined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07861120&OS=07861120&RS=07861120
owner: SAP AG
number: 07861120
owner_city: Walldorf
owner_country: DE
publication_date: 20071214
---
The present invention relates generally to error handling for software applications. More particularly this invention relates to automatic reporting and solutions search for runtime errors in client server based software applications.

As the complexity of software applications increases proper handling of runtime errors or software problems becomes more and more challenging. Exemplary error handling approaches such as forwarding a pre defined error message presenting an error code and or sending a code dump associated with a crash of a running software application etc. are neither informative nor user friendly for most software application users. Additionally as runtime errors may occur either in a local client or a remote server in software application such as web based applications or Rich Internet Applications uninformative or unfriendly error messages may further intimidate a user. Even after a software runtime error is reported for a support request a user may still be required to constantly checking the status of the request such as logging onto a customer support system from time to time which is usually time consuming and cannot provide a timely response.

Furthermore to offer service support most software applications require users to make an effort to record or report encountered runtime errors. However many users are either unable or not willing to identify necessary information surrounding encountered software problems especially for runtime errors. Often times such identification is not even possible as a software application may not provide a proper mechanism for a user to gather related field data. Worse yet user driven interactions between a client and a server may still be allowed even after a runtime error occurs which may leave user data in an unpredictable state or make a system vulnerable in security. As a result the cost of customer support services may increase significantly.

Besides repeated runtime errors due to similar sources of software bugs may contribute to major waste in human effort to analyze observed software problems and provide corresponding solutions. It is not however uncommon that a large number of support efforts are directed to a small number of software problems. Consequently the efficiency of customer support effort may be greatly compromised.

The present invention includes a method and apparatus that receive an error notification associated with a runtime error of a software application to generate a plurality of context attributes from a state of the software application at the time of the runtime error. One or more potential solutions are searched from a data storage including a solution repository based on the plurality of context attributes generated. An acceptable solution for the runtime error is determined based on one or more potential solutions. The solution repository is updated with a new solution if an acceptable solution cannot be determined.

In an alternative embodiment a software plug in received from a remote server is executed to run a software application. A runtime error in the software application causes an error notification to generate an error message for the remote server. The error message includes a plurality of context attributes from the state of the software application at the time of the runtime error. A solution based on the plurality of context attributes is received from the remote server for presentation via a user interface.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.

A method and an apparatus for handling runtime errors are described herein. In the following description numerous specific details are set forth to provide thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known components structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software such as is run on a general purpose computer system or a dedicated machine or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in different order. Moreover some operations may be performed in parallel rather than sequentially.

In one embodiment a system and a method for reporting learning and tracking software problems in Rich Internet Applications are disclosed. The system may comprise a software problem repository which may include problem reports and solution descriptions for a software problem. Pop up modal window may be invoked to block user interactions when an unexpected software problem occurs either in a client application such as a desktop browser or in a backend server such as an application server. A software problem repository or a solution database may be searched according to characteristics of corresponding software runtime errors such as stack traces exception types and source code locations etc. Characteristics of a software runtime error may be extracted as error descriptions from a software runtime state including automatically collected software runtime contexts and or states from both a client and a server.

In another embodiment for example a software problem and a solution description may be matched to present a solution suggestion to an end user. A modal window having a report creation wizard may be prompted to solicit additional descriptions of encountered software runtime errors from a user. A software problem report may consist of problem characteristics end user inputted problem descriptions software runtime contexts and or possible solutions. A semi supervised learning mechanism may be provided to facilitate support personnel and or solution providers for updating and adding solutions descriptions leveraging existing solutions corresponding to repeated or similar software problems. A support subscription service may be provided for an end user to track reported software problems when updates are available. An RSS Really Simple Syndication feed format may be employed in a support subscription service without requiring a user constantly logging into a customer support system. Note that throughout this application for the illustration purposes a system to handle software runtime errors is used as an example to illustrate techniques of embodiments of the invention. However it is not so limited. It will be appreciated that other similar error handling systems may also be applied.

A browser may download application plug ins such as downloadable Java codes from an application server to provide application services including a client error handler running in a client . A client error handler may control how a browser coupled with the associated application plug ins interact with an application server when an error occurs while executing application plug ins in a client . An application plug in may include downloadable executable codes such as a JavaScript library a Flash plug in or Java codes. In one embodiment an application server may provide remote services according to business logics associated with business objects . Optionally a database coupled with an application server may provide persistent storage service for business objects . An application server may execute an error handler to handler runtime errors detected in an application server .

In response to receiving the extracted error information an error identification module may request an end user interface module to present a pop up modal window. In one embodiment an end user interface module may block a user from continuing an existing session of service between a client such as client of and a server such as application server of associated with a running software application invoking an error notification. An error identification module may identify attributes of runtime errors associated with error information received such as context attributes associated with a running software application where runtime errors occur. A context attribute may be related to a runtime state of a software application at the time a run time error occurs in the software application. A runtime state of a running software application may be related to values of runtime variables traces of stacks instantiated runtime objects etc. at the time a runtime error occurs in the running software application. In one embodiment a runtime state collection module may selectively collect runtime state data related to a subset of the runtime state for a running software application at the time a runtime error occurs according to a context reference . Runtime state data may include one or more context attributes. A predetermined set of context references such as identifiers of target variables modules and or object classes may be stored in the context reference . An error identification module may generate context attributes with corresponding values according to collected runtime state received from a runtime state collection module .

In another embodiment an error identification module may generate context attributes and corresponding values associated with a runtime error based on error information embedded inside an error notification including source code line number comments local variables values class object member information etc. Source codes may include specifications for embedding error information into an error notification when triggered during runtime. An error identification module may derive context attributes based on a source code repository storing data related to source codes corresponding to a running software application. Information stored in the source code repository may include for example object class hierarchy version number or release date etc. related to a source code.

In one embodiment an error identification module may forward generated context attributes related to a runtime error to a solution identification module for identifying potential solutions to correct the error. A solution identification module may include a search engine configured according to settings to identify potential solutions from a solution database based on received context attributes. In one embodiment a degree of confidence may be assigned for an identified potential solution. Settings may include a set of rules or one or more parameters employed by the associated search engine . In one embodiment a solution database may include a repository of solutions and error records . A solution in a repository may be associated with a text description and corresponding error information including context attributes. Each record in error records may include context attributes associated with a corresponding runtime error corresponding to the record. In one embodiment if a solution identification module determines an acceptable solution from a set of identified potential solutions for the received error information the solution identification module may generate a report from the accepted solution to present to a user via an end user interface module . An acceptable solution may be a potential solution associated with an error record having context attributes matching the received error information. If no acceptable solution is identified a solution identification module may register a notification address associated with a user to a notification register for sending a notification message to the user when an acceptable solution corresponding to a runtime error is available.

In one embodiment a solution identification module may present one or more identified potential solutions from a solution database to support personnel via a support interface module . Updates to a solution in a solution database such as modifying associated context attribute values adding new context attribute associations etc. may be performed via a support interface module . In another embodiment a new solution may be added into a solution database via a provider interface module by a solution provider. A solution identification module may receive instructions or feedbacks which specify target set of potential solutions to be identified based on particular error information via a support interface module or a provider interface module . In one embodiment a learning module in a solution identification module may adapt settings associated with the search engine to perform a search that identifies potential solutions from a solution database confirming to a specified target set of potential solutions.

In one embodiment a client runtime state collection module may retrieve client context references such as stored in a context reference of remotely from an application server via an error messaging module . A client runtime state collection module may determine which context attributes included in a client runtime state to collect based on retrieved client context references. In one embodiment a client error identification module may send client error notification messages to a remote server such as application server of via an error messaging module . Client error notification messages may be packaged according to error notification received from a client exception handler module and collected runtime state information from a client runtime state collection module . In one embodiment an error messaging module may receive a solution report from a remote server about a runtime error to present to an end user via a client end user interface module .

At block in one embodiment the processing logic of process may collect runtime state data of a running software application at the time when the error notification was triggered. A runtime state of a software application may be a runtime context including values and relationships among allocated variables and pointers in an associated memory storage for executing corresponding executable codes for the software application at a certain instant of time. In one embodiment a runtime state may include values of data members belonging to class object instances values of local and or global variables stack traces size of runtime allocated memories etc. Runtime state data collected may be a subset of a runtime state selected according a predetermined context reference such as a runtime context reference of . A context reference may include specifications on targeted state information such as a list of names of variables class data members modules and or class member functions etc. In one embodiment a context reference may be configurable independently from updating corresponding source codes for a target software application. At block the processing logic of process may present a user interface form to block user commands such as interactions with a service provided by the running software application where a runtime error has occurred. In one embodiment the processing logic of process may retrieve user descriptions about the runtime error via the user interface presented. In one embodiment at block the processing logic of process may generate error descriptions according to error information extracted from a received error notification collected runtime state data and or retrieved user descriptions for a runtime error. Error descriptions may include pairs of attribute value. An attribute may be a variable name a class name and or a predefined name such as source file name line number comment etc. The processing logic of process may update error records such as error records of according to for example an error identity retrieved from a received error notification. In one embodiment updating error records may include incrementing a count on the number of occurrences of a corresponding runtime error.

At block the processing logic of process may invoke a solution identification engine to search for potential solutions from a solution repository according to the generated error descriptions. A solution repository may include previously known solutions provided by a solution provider stored in a solution database such as solution database of . In one embodiment a solution in a solution repository may include a text description and or instructions on how to resolve runtime errors. Each solution in a solution repository may be associated with a plurality of attribute values related to error descriptions. In one embodiment a solution identification engine may perform a match between error descriptions and a solution from a solution repository to determine if the solution is a potential solution for the corresponding error descriptions. A solution identification engine may measure a similarity between a solution and error descriptions to make a determination whether a solution is a potential solution according to settings such as a set of rules and or a set of features derived from attribute values associated with the solution. A solution identification engine may be configurable by updating associated settings such that the updated solution identification engine is capable of making desired determination. In one embodiment each potential solution determined may include a confidence value indicating a confidence about the potential solution to solve the corresponding runtime error. A confidence value may be between 0 and 1. A potential solution of confidence value 1 may indicate a complete match with the error descriptions.

At block the processing logic of process may determine if an acceptable solution could be selected from the set of potential solutions. In one embodiment the processing logic of process may determine a potential solution with a confidence value above a predetermined confidence level is an acceptable solution. If an acceptable solution is found at block the processing logic of process may update a solution database according to the accepted solution such as for example incrementing an associated number indicating how many times the solution has been offered in response to reported runtime errors. In one embodiment a solution database may include error records such as error records of the processing logic of process may present the accepted solution via a user interface to a user at block . In one embodiment the processing logic of process may generate a report including the accepted solution to forward the report to a client device for presentation.

At block in one embodiment if no acceptable solutions are determined the processing logic of process may register a notification address to receive an update e.g. a callback when the corresponding runtime error becomes available such as for example a new solution for the corresponding runtime error is added to a solution database. A notification address may be registered in a database such as a notification register of . In one embodiment an update may be sent to a notification address via an RSS Really Simple Syndication feed. In another embodiment a notification address may be an email address. At block the processing logic of process may present a set of potential solutions ranked according to associated confidence values such as determined by the search at block to a user interface for a support personnel. In one embodiment at block the processing logic of process may receive solution updates including a suggested set of solutions from for example support personnel. The set of potential solutions presented and the set of suggested set of solution received may differ in associated confidence values and or member solutions included. At block the processing logic of process may update settings of a solution identification engine such as a set of rules conditions associated with a rule and or parameter values for feature based matching to target the suggest set of solutions during a search in a solution database. Thus a solution identification engine may learn to adapt received inputs from support or provider personnel. In one embodiment the processing logic of process may determine an acceptable solution from the suggested set of solution to send a message including the determined acceptable solution to a registered notification address such as the address registered at block .

At block the processing logic of process may send a request to a remote server such as application server of for one or more client context references e.g. context references related to the current runtime state of a client software plug in application where a runtime error occurs. In one embodiment the processing logic of process may retrieve client context references locally stored in a client device hosting the processing logic of process such as client of . At block the processing logic of process may present a user interface to block user commands from interacting with a running client software application where a runtime error has occurred. At block the processing logic of process may selectively collect client runtime state data related to a subset of the runtime state of a running client software plug in application at the time a runtime error occurs. In one embodiment client runtime state data may be collected according to error information included in a client error notification received or based on client context references received either from a remote server or retrieved locally.

At block the processing logic of process may send an error notification to a remote server such as application server of . An error notification sent from a client device may include error information embedded in a corresponding client error notification and or collected client runtime state data. In one embodiment the error notification from a client device may include error descriptions about a runtime error retrieved from a user via a user interface. The processing logic of process may receive a response including a solution such as a text description or instructions for a corresponding client runtime error based on error information embedded in an error notification. At block in one embodiment the processing logic of process may present a received solution to a user.

In one embodiment a usage function to report software problems may be performed by system of . A usage function to report software problems may include usage functions . In one embodiment a usage function to search a software problem repository a usage function to suggest problem solution information a usage function to provide software subscriptions and a usage function to update a software problem repository may be performed in part for example by a solution identification module of . A usage function to provide software problem subscriptions may be based on a database storing notification addresses associated with a subscription such as a notification register of . In one embodiment a usage function to collect software problem descriptions and a usage function to collect software problem contexts may be performed in part for example by an error identification module of . A usage function to block main user interactions may extend from the usage function to receive software problems . In one embodiment a usage function to block main user interactions may be performed in part by a user interface module of . A usage function to analyze software problems and a usage function to update problem solution information may extend from a usage function to update a software problem repository . In one embodiment either usage function to analyze software problems or usage function to update problem solution information may be performed in part by a support interface module or a provider interface module of .

At block the processing logic of process may pop up a user interface including a modal dialog box to block interactions from a user to a running software application having a runtime error in an application server . In one embodiment a modal dialog box may be based on a web page presented according to a client browser such as browser of . Subsequently at block the processing logic of process may determine causes of the software problem such as error information of a runtime error based on for example an error identification module of . At block the processing logic of process may search a solution in a software problem repository such as a solution database of base on for example a solution identification module of .

If a matched solution such as an acceptable solution among potential solutions identified is found at block the processing logic of process may send client a report including suggestions related to solution information based on for example an end user interface of . If there is no matched solution found at block in one embodiment the processing logic of process may send a request to a client for collecting user information and problem descriptions based on for example a solution identification module and an end user interface module of . At block the processing logic of process may create a software problem report including error descriptions such as stored in a solution database of based on for example a solution identification module of . In one embodiment at block the processing logic of the process may update a software problem repository such as a solution database of based on for example a solution identification module of . The processing logic of process may send a notification message to a client when a software problem repository is updated based on for example an end user interface module of . At block in one embodiment the processing logic of process may present a notification message such as in a web page to notify a user a software problem has been reported successfully.

At block the processing logic of process may pop up a user interface including a modal dialog box to block interactions from a user to a running client software application having a runtime error in a client . At block the processing logic of process may determine causes of a client software problem such as error information of a client runtime error based on for example a client error identification module of . In one embodiment at block the processing logic of process may search a solution in a software problem repository such as a solution database of based on for example a solution identification module of . The processing logic of process may search for a solution update a software problem repository create a report present a solution suggestion and send a notification to a user in a similar manner as performed by the processing logic of process of .

As shown in the computer system which is a type of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may retrieve the instructions from the memories and execute the instructions to perform operations described above. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory.

The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine executable instructions that cause a machine that executes these instructions to perform certain functions. In this context a machine may be a machine that converts intermediate form or abstract instructions into processor specific instructions e.g. an abstract execution environment such as a virtual machine e.g. a Java Virtual Machine an interpreter a Common Language Runtime a high level language virtual machine etc. and or electronic circuitry disposed on a semiconductor chip e.g. logic circuitry implemented with transistors designed to execute instructions such as a general purpose processor and or a special purpose processor. Processes taught by the discussion above may also be performed by in the alternative to a machine or in combination with a machine electronic circuitry designed to perform the processes or a portion thereof without the execution of program code.

It is believed that processes taught by the discussion above may also be described in source level program code in various object orientated or non object orientated computer programming languages e.g. Java C VB Python C C J APL Cobol ABAP Fortran Pascal Perl etc. supported by various software development frameworks e.g. Microsoft Corporation s NET Mono Java Oracle Corporation s Fusion etc. . The source level program code may be converted into an intermediate form of program code such as Java byte code Microsoft Intermediate Language etc. that is understandable to an abstract execution environment e.g. a Java Virtual Machine a Common Language Runtime a high level language virtual machine an interpreter etc. or a more specific form of program code that is targeted for a specific processor.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

The preceding detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be kept in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

In addition the operations described above may be performed by an apparatus. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The processes and displays presented herein are not specifically related to a particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize from such discussion the accompanying drawings and the claims that various modifications can be made without departing from the scope of the invention

