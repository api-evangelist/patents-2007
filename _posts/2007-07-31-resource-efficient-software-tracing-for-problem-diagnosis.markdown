---

title: Resource efficient software tracing for problem diagnosis
abstract: The present invention discloses a solution that defines multiple retry points for a software application which are operable to generate and record trace information only as part of a retry execution in response to an exception. Outside these conditions, the burdens of generating and recording trace information can be avoided. Furthermore, the determination of a preferred one of these retry points can be made to focus the retry execution in a way that only the retry point which generates the most helpful, or informative, trace information is necessarily reverted to in response to an exception.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07765434&OS=07765434&RS=07765434
owner: International Business Machines Corporation
number: 07765434
owner_city: Armonk
owner_country: US
publication_date: 20070731
---
This application claims the benefit of British Patent Application No. 0623354.8 filed 23 Nov. 2006 and which is hereby incorporated by reference.

The present invention relates to the field of software technologies and more specifically to a resource efficient software tracing for problem diagnosis.

Problems can be encountered during the execution of a software application. For example exceptions to the normal operation of the software application can manifest in many ways including but not limited to irregular or undesirable results erroneous data interruptions to execution poor performance excessive and unnecessary resource utilization abnormal or premature termination abnormal state and a complete failure of the application. The process of problem determination for such exceptions can involve the use of many tools and techniques. Most notably the capture of information relating to the state of a software application at the point of a problem occurrence. For example techniques such as First Failure Data Capture FFDC can provide an automated snapshot of a system environment when an unexpected internal error occurs. Furthermore the provision of memory and state dumps is well known in the event of software failure and is common in such software as operating systems.

The inadequacies of such data capture techniques in problem determination are widely known to those skilled in the art and include the limited scope of the data collected at the point of exception. For example it is not possible to retrieve state information leading up to an exception using such techniques. To address these deficiencies software tracking is often employed to monitor and record software application state information at execution time. In this way a rich set of valuable trace information can be recorded for the entire execution of a software application such that in the event of an exception state information for the entire period leading up to the exception is available to assist in problem determination.

However recording trace information routinely during the execution of a software application is burdensome and imposes a further resource requirement over and above that of the software application itself manifesting as a requirement for further storage and processing throughput. In some environments the burden of generating and recording trace information at execution time can be so great that it exceeds the resource requirements of the software application itself. For this reason a decision to include facilities for the generation and recording of trace information in a software application involved compromise. The balance is between a resource efficient high performance software application and a rich set of trace information for use in the event of exceptions at runtime. However this balance is struck for a particular software application one of performance and reliability will be compromised.

It would therefore be advantageous to provide for the advantages of a software application which is free of the burden of routinely generating and recording trace information at runtime while retaining the richness of trace data provided where such trace information is generated and recorded in the event of an exception.

The present invention discloses a solution that defines multiple retry points for a software application which are operable to generate and record trace information only as part of a retry execution in response to an exception. Outside these conditions the burdens of generating and recording trace information can be avoided. Furthermore the determination of a preferred one of these retry points can be made to focus the retry execution in a way that only the retry point which generates the most helpful or informative trace information is necessarily reverted to in response to an exception.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a method for generating trace information for an exception in a software application. The software application can include a set of retry points. Each of the retry points can be a defined point in a series of instructions for the execution of the software application. The method can include a step of repeatedly executing the software application to cause occurrences of the exception. For each occurrence of the exception execution can revert to a different one of the retry points such that after multiple occurrences of the exception each of the retry points is reverted to. Execution of each of the retry points includes generating trace information for the execution of the software application. A preferred retry point can be determined which is used to generate trace information for subsequent occurrences of the exception.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or as a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory or any other recording medium. The program can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

It should also be noted that the methods detailed herein can also be methods performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

In the example of software routine A called software routine B which in turn called software routine C . Each software routine will normally execute to completion and return to the software routine which called it. Thus when software routine C completes execution can return to software routine B . Completed software routines are removed from the call stack as they return to respective calling software routines.

Software routines A B and C are executable software components constituting part of or being called by the software application . For example the software routines can be functions procedures subroutines macros application programming interface routines programs sub programs software methods or any other executable program component. Software routines A b and C can include a series of instructions to the CPU of a computer system for their execution.

The software application is operable to generate trace information which is recorded in a data store. In this regard the software routine is operable in one of at least two modes including a trace mode . In the trace mode trace information is recorded to the trace information data store . In the absence of the trace mode such trace information is not recorded. Trace information can include by way of example only the state and content of data structures variables flags and other data items used by or included in the software application descriptive information relating to the state or functioning of the software application failure data information storage dumps software routine entry point information software routine exit point information call stack information and exception information. The trace mode is switchable to an on and off state at runtime. For example the trace mode can be a global flag accessible to all software routines in and used by the software application . In this way software routines are able to determine whether to generate and record trace information by interrogating the global flag. Other techniques for the operation of a trace mode will be apparent to those skilled in the art. When the trace mode is on trace information is generated which can cause system performance to suffer. When the trace mode is off trace information is not generated and system performance will not be affected.

While the trace mode has been described as a polarized on and off system of operation it will be apparent to those skilled in the art that varying degrees of trace mode can be implemented and such variable tracing modes are entirely compatible with the exemplary embodiments of the present invention described herein. In particular the trace mode off can in practice be implemented as a reduced trace mode wherein trace information is generated at a coarser granularity or a lower frequency than in the trace mode on . In this regard the characteristics of the trace mode which are pertinent to the present description are that the trace mode off is less burdensome in that it may be less resource intensive less processing overhead less storage intensive for example than the trace mode on .

The software application further includes an identification of an exception point . The exception point is a nominal identifier for the purpose of explanation only of a location in a series of instructions forming part of the software application or called by the software application where an exception occurs at execution time. Such an exception can include for example irregular or undesirable results erroneous data interruptions to execution poor performance excessive and unnecessary resource utilization abnormal or premature termination abnormal state and a complete failure of the application. Such exceptions are detectable by facilities such as error detection routines First Failure Data Capture FFDC facilities exception handlers error handlers and operating system interrupt or error handlers. In the example of software routine C is illustrated as including the exception point indicating that it is within software routine C that an exception will occur during execution.

The software application further includes a retry point which is a defined point in a series of instructions for the execution of the software application . The retry point can be defined by a software developer or an automated retry point defining routine. Such a routine may operate by scanning software routines comprising the software application and insert retry point using defined criteria. For example an aspect oriented software environment may weave retry point software aspects into software methods in accordance with an aspect definition. Such an aspect definition can include for example the entry or exit point of every method every occurrence of a particular method or function call every method executing at a regular frequency of temporal distance and the occurrence of a developer inserted indicator.

The retry point is a defined point in the execution of the software application for retrying execution of the software application in the event of an exception. When executed the retry point records execution state information to a data store. The execution state information includes all information required to allow the execution of the software application to restart from the retry point . For example the execution state information can include the call stack state local and global variable information and pertinent content in the memory of the computer system. A retry trace processor is operable to detect an exception at exception point and identify the appropriate retry point . The retry trace processor is then operable to retry the execution of the software application commencing from the retry point . An important part of the operation of the retry trace processor and the retry point is that the trace mode is turned on when execution is retried from the retry point . Subsequently when the exception point has been executed during the retry the trace mode is turned off .

During retry the trace mode can be turned on by the retry trace processor or alternatively by the software routine B as part of the retry point . Subsequently the trace mode can be turned off in one of two main ways. First if the exception point causes an exception during the execution from the retry point the retry trace processor can be triggered and the trace mode can be turned to off by the retry trace processor . Alternatively it is possible that the exception point does not cause an exception during execution from the retry point . This is common in software problem determination problems caused by such aspects as timing and synchronization may not be reproduced on subsequent execution of a software routine. In particular the very change to a trace mode of on can cause timing differences which manifest in an exception which is not reproducible.

In this scenario the trace mode can be switched to off when the software routine B is to be removed from the call stack . The removal of software routine B from the call stack is an indication that the software routine C executed without exceptions and is a useful trigger to deactivate the trace mode . Thus regardless of whether the execution from the retry point results in an exception at the exception point the trace mode can be switched to an off state to prevent the undesirable burden of ongoing tracing during the subsequent execution of software application .

In this way the software application executes with the trace mode on during the retry execution of the software application between the define retry point and the exception point . Notably the software application returns to the trace mode off once the exception point is executed with trace mode on during the retry execution. Thus trace information is generated for the retry of the software application but not for the entire execution of the software application . Further trace information is not generated for the execution of the software application following the exception point during the retry execution since the software application is returned to the trace mode off . In this way the extent of the execution of the software application which is undertaken with trace mode on is reduced to only that extent necessary to cover the retry execution. The impact of tracing the execution of the software application is therefore limited to the retry execution.

While many of the elements of are represented as residing within the software application it will be apparent to those skilled in the art that these elements may alternatively reside outside the software application and instead reside elsewhere within a computer system such as in the storage of the computer system or may form part of another aspect of the computer system such as a part of the operating system. In particular the call stack data structure may be organized to reside outside the software application itself but within the storage of the computer system such as a memory of the computer system. Similarly the retry trace processor may be a facility provided in software or hardware outside the software application itself such as part of an operating system or a service component associated therewith.

The determination as to whether the exception point is reached is preferably made by recognizing that an exception has occurred during the retry execution or alternatively by recognizing that the software routine B having the retry point is to be removed from the call stack .

Once each retry point and has been employed to generate trace information for the exception in software application a preferred retry point determinator determines which of the retry points and is preferred for tracing the exception. In one embodiment this determination is made with input from an operator. In an alternative embodiment the determination is based on an analysis of the trace information generated by each of the retry points and in conjunction with predefined criteria. For example trace information is grouped and associated with a retry point or responsible for its generation. Subsequently the preferred retry point determinator ranks the groups of trace information in accordance with predefined criteria. Such criteria can include for example a quantity of trace information generated a quantity of trace information generated for a particular data structure in the software application and a quantity of trace information generated for a particular software routine in the software application . The preferred retry point determinator is then operable to select the one of the retry points or associated with the best ranked group of trace information as the preferred retry point.

At software routine D executes and causes an exception at . The exception is detected by the retry trace processor at which turns the trace mode to off . At the retry trace processor resets the execution state to that associated with retry point and at execution is reverted to retry point in software routine C . At software routine C turns trace mode to on and calls software routine D at . At software routine D executes and causes an exception at . The exception is detected by the retry trace processor at which turns the trace mode to off . Finally at the retry trace processor along with the preferred retry point determinator determines a preferred retry point for the exception point caused at and . The preferred retry point can be determined using the techniques described above with respect to .

Alternatively the exceptions occurring at and may not reoccur during the retry executions from retry point and retry point . In these scenarios the trace mode can be switched to off and the retry trace processor can be triggered to revert to other trace points when the software routine is to be removed from the call stack . The use of the call stack in such a way was described in some detail above with respect to .

Notably trace information generated by the retry points and can be grouped into trace information group generated during the retry execution for retry point and group generated during the retry execution for retry point . Multiple retry points can be defined for the software application and a preferred one of the retry points can be determined for tracing the exception arising from exception point .

In this way embodiments of the present invention provide for the definition of multiple retry points and for a software application which are operable to generate and record trace information only as part of a retry execution in response to an exception. Outside these conditions the burdens of generating and recording trace information can be avoided. Furthermore the determination of a preferred one of these retry points and can be made to focus the retry execution in a way that only the retry point which generates the most helpful or informative trace information is necessarily reverted to in response to an exception. It will be apparent to those skilled in the art that despite the determination of a preferred retry point the use of multiple retry points to provide a rich set of trace information may be desirable under certain circumstances and embodiments of the present invention can be readily adapted to provide such a facility.

Insofar as embodiments of the invention described are implementable at least in part using a software controlled programmable processing device such as a microprocessor digital signal processor or other processing device data processing apparatus or system it will be appreciated that a computer program for configuring a programmable device apparatus or system to implement the foregoing described methods is envisaged as an aspect of the present invention. The computer program may be embodied as source code or undergo compilation for implementation on a processing device apparatus or system or may be embodied as object code for example.

Suitably the computer program is stored on a carrier medium in machine or device readable form for example in solid state memory magnetic memory such as disk or tape optically or magneto optically readable memory such as compact disk or digital versatile disk etc. and the processing device utilizes the program or a part thereof to configure it for operation. The computer program may be supplied from a remote source embodied in a communications medium such as an electronic signal radio frequency carrier wave or optical carrier wave. Such carrier media are also envisaged as aspects of the present invention.

It will be understood by those skilled in the art that although the present invention has been described in relation to the above described example embodiments the invention is not limited thereto and that there are many possible variations and modifications which fall within the scope of the invention.

The scope of the present invention includes any novel features or combinations of features disclosed herein. The applicant hereby gives notice that new claims may be formulated to such features or combination of features during prosecution of this application or of any such further applications derived therefrom. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the claims.

