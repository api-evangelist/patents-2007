---

title: Collaborative document authoring
abstract: Embodiments are provided to enable a collaborative authoring of a document or other data structure. In an embodiment, a system includes a number of components configured to structure a collaborative authoring process. The components of the system can be used to define a number of sections, roles, and other collaboration parameters associated with a collaboration effort. A workspace can be provisioned to allow participants to interact with the document based in part on a number of permissions. Components of the system can be used to communicate a customized document to the participants based in part on an associated role and other collaboration parameters. Other embodiments and collaborative functionality are available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933952&OS=07933952&RS=07933952
owner: Microsoft Corporation
number: 07933952
owner_city: Redmond
owner_country: US
publication_date: 20070629
---
Occasionally a team of users would like to collaborate when authoring a document. The collaboration effort can become difficult and unmanageable when the users attempt to simultaneously modify the document. Moreover managing a collaboration effort can be very time consuming and collaboration interactions are often managed using e mail file sharing and or web hosting architectures. Users of many of the current collaboration tools complain about an incoherent view on progress overwrites loss of content and lost time when having to manually assemble content submitted by various users. Consequently the current collaboration authoring tools are limited and generally result in an unsatisfactory experience for the users.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are provided to enable a collaborative authoring of a document or other data structure. In an embodiment a system includes a number of components configured to structure a collaborative authoring process. The components of the system can be used to define a number of sections roles and other collaboration parameters associated with a collaboration effort. A workspace can be provisioned to allow participants to interact with a document based in part on a number of permissions. Components of the system can be used to communicate a customized document to the participants based in part on an associated role and other collaboration parameters.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

Embodiments are provided to enable a collaborative authoring of a document or other data structure as part of a collaborative authoring process. In an embodiment a collaboration application can be used to collaborate with other authors when collaborating on a document. The collaboration application can be used to synchronize changes updates and other modifications to defined users. In one embodiment the collaboration application can be used to define a number of sections wherein each defined section can be associated with a particular user who has permission to interact with the associated section. The collaboration application can use an add in component to break down or shred and reassemble a declarative document from its basic parts to a compound document. For example the collaboration application can use an open extensible markup language XML standard as part of a collaborative authoring effort.

In another embodiment a collaborative system is configured to provide a collaborative environment for participants to interact with a collaborative document. A number of participants can be associated with the collaborative environment based on certain credentials and other collaborative parameters. For example depending on associated privileges a participant can add to delete from and or otherwise modify sections of the collaborative document. Thereafter all changes made by participants to the collaborative document can be propagated to each participant who is using a client. Each client can be configured to communicate as part of a peer to peer communication environment client server communication environment or other communication environment.

The system includes a client having a data store or other repository and an assembly workspace . In one embodiment the client is configured as a networked collaboration system operating on a computing device wherein the client can interact with other clients as part of a collaborative effort. The client includes functionality to enforce constraints that have been applied to certain sections of an assembly document. The client is further configured to communicate the constraints e.g. collaboration privileges and other information to other invited clients or participants.

The data store is configured to store information including collaboration metadata such as a number of section records roles participants document section ownership status and other collaboration associated information. As described below the collaborative document can be stored in the data store as a collection of parts. Moreover the data store and information contained therein can be updated at desired times. In one embodiment the data store can be updated whenever a user has connectivity and a change has been detected by the client . For example time stamping version numbers or delta comparisons can be used to detect if there has been a change to parts of a collaborative document.

As shown in and according to this embodiment the data store includes an authored section record an authored section record an authored section n record where n is an integer and an assembly record . In one embodiment each authored section record and the assembly record can be associated with an assembly document. Each authored section record can be described as a container that is used to store interactions made by a participant who has the requisite permission. The following discussion with respect to is described in the context of documents and associated applications but the embodiments are not so limited.

The system also includes an assembly workspace . In an embodiment the assembly workspace can be configured as a read only user interface UI and can be used to interact with the data store . For example the UI can include data from the data store such that a user can see a summarized view of a collaboration project and can also access a base document which operates to launch a document editing environment. Accordingly the assembly workspace can be used to launch an application or other program that can then be used to interact with an information source or other data construct such as a document file e.g. .docx presentation file e.g. .pptx etc. In one embodiment an assembly document can be stored as an attachment to the assembly workspace e.g. Document Assembly Tool . Thereafter when the attachment is opened a custom assembly document can be created for the user of the client based on a number of parameters which include but are not limited to workspace identity workspace role and or assembly document role.

Accordingly the assembly workspace can operate to launch an associated application or program depending on the type of information source that is opened. As shown in an assembly document shown as a file is included as part of the assembly workspace wherein a user can select the assembly document and the client can operate to launch a word processing application according to a defined operational sequence as described below. As another example the assembly workspace can operate to launch a presentation application associated with a presentation file.

The assembly workspace also includes a sections component that includes metadata and other information associated with a number of authored section records. For example the sections component can include existing sections and assigned users section progress state and read write status. In one embodiment the sections component includes a tabular view of section metadata for quick review and or reporting purposes. For example metadata for each section record can be displayed in a table for easy monitoring of a project s status.

As described further below when a user selects the assembly document a document assembler can be used to intercept a normal opening sequence of an application associated with the document. The document assembler can operate to create a document in memory e.g. RAM wherein the document can be customized for an end user depending on an associated role and other parameters described below. The document assembler is configured to interact with and access data and other information from the data store when creating an assembly document object .

In one embodiment a number of actions can be used against the data stored in the data store in order to include the data as part of the assembly document object . For example create read update and or delete CRUD actions can be used to interact with the data store when including data as part of the assembly document object . As described below the assembly document object can be used by a document assembly proxy to enable user interaction therewith based in part on one or more permissions.

In one embodiment the document assembler is configured as an application programming interface API which can be used to interact with the data store . The API can be configured to write to and get information from the data store . The API can be used locally remotely or according to some other communication configuration. The document assembler can be configured to be document type agnostic e.g. word processing applications presentation applications spreadsheet applications etc. . Correspondingly the document assembler can be used with any document or other data structure that is XML based e.g. open XML to enable a collaborative authoring functionality.

With continuing reference to the system includes an assembly component that includes the document assembler . In an embodiment the assembly component includes code that runs in the context of a word processing application e.g. WORD . In another embodiment the assembly component can be configured as an add in component and included as part of a word processing application or system. In yet another embodiment the document assembler can be included as part of the functionality of the assembly workspace or some other functional component or system.

The assembly component also includes an assembly document proxy an authored section content control an authored section content control an authored section n content control and document XML . The content controls can be configured as self describing logical entities mapped to document and section abstractions. The content controls allow sections of an assembly document to be uniquely identified dynamically updated and assigned special security. These object form the backbone of the assembly document as they enable the fragmentation of a document into distinct elements. Moreover the content controls allow independent authors to update sections in parallel.

In one embodiment the assembly document proxy is an in memory manifestation of the state of an assembly document e.g. the assembly document record . The assembly document proxy stores data metadata content and or actions in memory until they are persisted to the client or written to the assembly document record . For example when an assembly document is first loaded the assembly document proxy can operate to build the assembly document from scratch using information of the data store and the assembly document object to create authored section content controls and other document parameters associated with what is ultimately presented to the end user e.g. assembly document . In one embodiment save and refresh operations can be used to update the state of the underlying data source e.g. assembly template assembly document etc. associated with the assembly document proxy .

The document XML can be described as XML code that defines the structure e.g. fonts access privileges sections etc. of an assembly document . Correspondingly the document XML provides the underlying structure for formatting layout and a container for the content controls and custom XML parts. Custom XML parts refer to distinct XML blobs stored as part of the assembly document . Assembly templates can use the custom XML parts to store custom metadata. Moreover an assembly document can use the custom XML parts to uniquely associate a word processing document with an assembly workspace . Assembly workspaces and the associated tools can be uniquely named wherein the names can be persisted in the documents for interaction and association therewith. Accordingly the custom XML parts provide a store where metadata can be maintained between collaboration sessions.

In one embodiment a structure of an assembly document can be described as an assembly document containership. Accordingly a document is the root node of the containership hierarchy. Sections can be placed in line with content not contained in sections. A section that is not embedded in another section can be referred to as a top level section. Interstitial content refers to content inside an assembly document that is not within the boundaries of a section. A role can be used to determine which user is able to interact with interstitial content. Sections can contain other sections referred to as subsections. A section that contains another section can be referred to as a parent section. A top level section all its subsections and any subsections they contain can be referred to as the section containership hierarchy. If an insertion point is in a section that section can be referred to as the current section.

In an embodiment a schema can be used to define an assembly template which includes data pertaining to the assembly document and section objects. When an assembly template is opened the assembly document proxy can be populated using the assembly template contents. The assembly template can be updated with any updates when the assembly document is closed. The assembly template can include customized ribbon groups task pane controls and custom XML parts. The ribbon and task pane allow users to prepare a template for assembly whereas the custom XML parts can be used to store and persist metadata associated with an associated assembly document. When a user views and or updates metadata the metadata is read from and or written to the custom XML parts. In one embodiment the schema defining an assembly template or document XML can be configured as follows 

In an embodiment a schema can be used to define an assembly document. The schema can also be used to identify an assembly workspace associated with the assembly document. A document assembler e.g. API can be used to perform a number of operations associated with the assembly document and or assembly workspace. The document assembler can be used to load and save other metadata from and to the assembly workspace . In one embodiment the schema defining an assembly document can be configured as follows 

In one embodiment components of the system can be implemented as part of a peer to peer computing environment including a peer to peer synchronization service e.g. GROOVE . Each peer can include a collaboration application or client that can be used to collaborate with other authors when collaborating on a document including producing and consuming information. For example each peer client can receive updates to the document as other authors make changes.

In another embodiment components of the system can be implemented as part of a client server computing environment wherein each client includes a collaboration application that can be used to interact with a server. The server can be configured to host a master assembly document in a library and the sections as a list. The master assembly document can be updated or otherwise modified when a user makes a change to a document. Thereafter changes updates and other modifications can be communicated to respective clients using private copies of the master assembly document. Correspondingly the master assembly document can be used to track and maintain user changes. For example each client of the computing environment can use a private copy of the master assembly document to display the content s of the master assembly document including recent changes and modifications thereto when connected to the server.

A computing environment can be described as a network or collection of components wherein the associated components are communicatively coupled in such a manner to provide an operational functionality. Each computing device of a computing environment can include networking and security components configured to provide communication functionality to and from respective components of the associated computing environment. For example a computing environment can include wireless local area networks WLANs local area networks LANs wide area network WANs combinations thereof and or other types of computing and or communication networks. In one embodiment a computing environment can be configured as is a distributed computer network that allows one or more computing devices communication devices etc. to communicate when collaborating to create or modify a document according to a desired implementation.

Exemplary computing devices can include desktop computers laptop computers tablet computers handheld devices and other communication devices. Components of a computing environment can be communicatively coupled using wired wireless combinations of wired and wireless and other communication techniques. A collaboration effort can also include combinations of various communication methods.

Correspondingly users of the system can receive updates and notifications associated with a collaborative document based in part on the type of computing environment and connectivity. Thus the system can be used to ensure that collaborating authors are using the same information up to date with modifications to the collaborative document. For example the communication of modifications can be provided to a collaborating author when the author has network connectivity and has provided proper access credentials e.g. domain authorization WINDOWS account etc. to access the collaborative document.

According to an embodiment a collaboration application can be configured to support a process of assembling an assembly document. A number of phases can be included as part of the process wherein the phases include but are not limited to 

1 Assembly Template Development Phase This optional phase involves creating a template from which users create instances of a certain document type. A professional services organization for example may create a template for a statement of work which could be completed by engagement teams on a per engagement basis. Once ready for use assembly templates go through a formal publishing process.

2 Assembly Document Creation In this phase a user creates a collaborative document or assembly document based on a template such as an assembly template for example. In one embodiment an assembly template includes document XML content controls and custom XML parts. Some document assembly specific properties can be set at this phase. This phase ends when the user associates the assembly document with a document assembly workspace thereby associating the assembly document to the assembly workspace. In an embodiment an assembly workspace can be created with a uniform resource identifier URI that can be stored in the document XML. The document assembly component can use the URI to locate an associated assembly workspace and thereby access its APIs. In one embodiment an assembly document includes document XML content controls custom XML parts and a number of workspace form records.

3 Collaboration Setup Phase In the setup phase a user such as an editor for example can select an assembly template and or specify the structure of the document to be assembled by creating sections in an assembly document. The user can also define the users or participants who can interact with each section of the assembly document.

4 Authoring Phase In the authoring phase individual authors can add content to sections assigned to each author. These sections can be subject to approval or review workflows.

5 Publishing Phase In the publishing phase the final assembly document may be transformed to a different format stored in a document management repository etc. The output of the publishing phase is a published assembly document.

Table 2 below lists a number of roles or properties that can be used in the assembly process under an embodiment.

A single user may fulfill multiple roles in a given document assembly. For example an Editor may also be an Author.

In an embodiment a number of permissions can be associated with an assembly document. A read permission allows a user to view all document and section properties non restricted sections content and all interstitial content. An edit section content permission allows a user to modify content of an assigned section. An update metadata for all root sections permission allows a user to update the author due date and restricted properties. The update metadata for all sub sections permission allows a user to update the author due date and the restricted properties for all sub sections if the user is the parent section s author. The insert root section property allows a user to insert a section in the main document e.g. the interstitial content this permission coincides with the permission to edit interstitial content.

The insert sub section property allows a user to insert section within an existing section if 1 the user is the parent section s author and 2 the parent section s allow sub section property is set to true. The delete root section property allows a user to delete a section from the main document i.e. the interstitial content . This coincides with the permission to edit interstitial content. The delete sub section property allows a user to delete a section within an existing section if the user is the parent section s author. The edit interstitial content permission allows a user to edit a document s content that is not stored in any sections. The change editor permission allows an editor to assign a new editor for an assembly document.

As described above assembly sections can be rendered using a number of content controls. In one embodiment a section name corresponds with a title of the content control. Placeholder text corresponds to the section description. All sections are not editable by default but the property can be changed to unlocked if the user is the section s author. Each section that is not nested in another section is termed a root section. An editor has primary control over root section wherein the editor role can be used to create root sections and can continue to edit certain properties even after the properties are assigned to other workspace participants. Each root section can be assigned an integer to indicate the sequential position in the assembly document. Each section that is nested in another section is termed a sub section. The section which includes a sub section is termed a parent section. In one embodiment a parent section can have no more than 5 levels in a section nesting hierarchy and or may contain no more than 20 sub sections at the same level. If any of these limits are reached the Insert button in the section ribbon group can be disabled.

At the document assembly component can use an API to determine if a client is installed on the user s computing device. If a client is not installed on the user s computing device the flow proceeds to and a message is presented to the user e.g. invalid client state and the user is asked to install a client and the flow returns to . If a client is installed the flow proceeds to and a workspace provisioning questionnaire opens in the client . If the user has only one identity it is used for the collaboration process. However if the user has multiple identities all of the identities are displayed and the user is asked which one they will be using in the new assembly workspace. If the user has no identities they will be asked to create a new account.

In one embodiment the workspace provisioning questionnaire can be configured as a custom form including the following fields as shown in Table 3 below.

At the user can provide workspace and document information associated with a collaboration effort. For example the user can define participants roles participant sections etc. At the assembly component operates to create an assembly workspace and an associated assembly document . At this point all authored sections are assigned to the editor role. At the editor can save the work to this point and the flow proceeds to of . Otherwise the flow ends at .

At the user as the editor can begin the process of assigning one or more authored sections. Also at a user can use the client to open an existing assembly document. In addition the flow can proceed from of . From or the flow proceeds to and the document assembly component determines if the user has closed the assembly document . The flow ends at if the user has closed the assembly document . Otherwise the flow proceeds to and the document assembly component determines if the user has clicked the insert button in the section ribbon group. If the user has clicked the insert button the flow proceeds to and the document assembly component provides a section details dialog.

In one embodiment the section details dialog can be presented as a form for creating and editing section metadata and includes a number of the following identifiers as shown in Table 4 below.

In one embodiment clicking the insert button operates to create a new content control including adding a new authored section to the assembly document proxy . As part of the insert operation a content control ID is associated with the new authored section as its unique identifier and a new ordinal value indicating its position relative to other authored sections. The ordinal value of all authored sections further down the assembly document are updated to display their new relative positions e.g. A new section added between Section 2.0 Section 3.0 would lead to the following state Section 2.0 Section 3.0 new section Section 4.0 formerly 3.0 . A sub section added to 3.0 would be numbered 3.1.0 and a sub section added to 3.1.0 would be 3.1.1.0 etc. .

At the document assembly component can use a number of APIs to determine if the section assignee s name is included in a member list associated with the assembly document . If the section assignee s name is not included in the member list the flow proceeds to and the user can click the open button in the workspace ribbon group. At the user can use an invitation window of the client to invite members to the workspace associated with the assembly document .

At the user can navigate back to the assembly document and the flow proceeds to wherein the document assembly component determines if the start date is current or past. If the start date is not current or past the flow returns to . If the start date is current or past the flow proceeds to of . If the section assignee s name is included in the member list associated with the assembly document at the flow proceeds to and the user can select the assignee s name. If the user chooses to save the assembly document at the flow again proceeds to . Otherwise the flow returns to .

If the user has not clicked the insert button at the flow proceeds to and the user can click a view details button in the section group. If the user has not clicked the view details button at the flow proceeds to where the user if assigned as an author to the section can edit section content. If the user does edit section content the flow proceeds to of . As shown in at the user can close the assembly document . If the user closes the assembly document at the flow ends at .

Otherwise the flow proceeds to and the user as a permitted author can reassign a section. If the author decides to reassign a section the flow returns to of . Otherwise the flow proceeds to and the author can create a subsection of an existing section. If the author decides to create a subsection at the flow again returns to of . If the author does not want to create a subsection at the flow proceeds to and the user can click a refresh button in the ribbon group which operates to update the assembly document . The refresh operation operates to update the assembly document properties interstitial content and or all of the sections with the associated metadata and content.

If the user wants to refresh at the flow proceeds to wherein the document assembly component can use a number of APIs to determine if a section has been deleted. If a section has been deleted the flow proceeds to and the document assembly component raises the State Conflict dialog. If a section has not been deleted at the document assembly component can use a number of APIs to determine if a section has been reassigned at . If a section has been reassigned at the flow returns to . Otherwise the flow proceeds to and the assembly document is refreshed to show the latest updates from the editor and authors. Thereafter the flow returns to .

If the user does not want to refresh at the flow proceeds to and the author can update section content. If the author does not update section content at the flow returns to . If the author does update section content at the flow proceeds to and the author can save the assembly document . If the author saves the assembly document at the flow proceeds to and changes are saved to the assembly workspace . The flow proceeds to and the document assembly component determines if the section is marked as private. If the section is marked as private the flow returns to .

If the section is not marked private the flow proceeds to and the document assembly component determines if the section s Complete property is checked. If the Complete property is not checked the flow proceeds to and an update e.g. Section Update notification can be issued to the participants and the flow returns to . In one embodiment the document assembly component can be configured to display an update notification to an associated participant by assessing changes associated with the data store . In another embodiment an e mail or instant messenger notification can be sent to the participants to indicate a change when a section is updated as completed. If the Complete property is checked the flow proceeds to and the section is locked for the former author. The flow then returns again to .

An assembly document author has a number of associated privileges including but not limited to editing section content creating sub sections deleting sub sections and editing sub section metadata . Editing sub section metadata can also be used to assign a section update section status and restrict a section .

An assembly workspace manager has a number of associated privileges including but not limited to reassigning an editor inviting assembly workspace members reading an assembly document and publishing a static assembly document .

An assembly workspace participant has a number of associated privileges including but not limited to inviting assembly workspace members reading an assembly document and publishing a static assembly document .

An assembly workspace guest has a number of associated privileges including but not limited to reading an assembly document and publishing a static assembly document .

An assembly document reader has the privilege to read a restricted section . While a number of roles and associated privileges are described above other embodiments are available.

An example scenario illustrates use of the system described above. David is preparing a sales proposal for a key client. David is designated as the document editor and opens a sales proposal template using a word processing application e.g. WORD . David then adds content to some of the template sections. David also creates and assigns a number of new template sections. For example David can add characteristics to each new template section such as a section name an authorized author responsible users etc.

Thereafter David provisions an assembly workspace so that other members of the sales team can provide content to assigned sections. In an embodiment provisioning refers to the creation of an assembly workspace and the setup required for users to begin participating in a document assembly process. In one embodiment the provisioning of an assembly workspace includes the following steps but is not so limited 

2 The user completes a provisioning questionnaire providing required and other collaboration parameters.

3 An assembly workspace can be created based on a template existing or created and opens on the user s computing device. The assembly workspace can include an associated assembly document.

In one embodiment a number of provisioning parameters can be associated with the assembly workspace as shown in Table 5 below.

Each member then has a complete copy of the collaborative document on their client. David assigns specific sections of the document to individual contributors specifying certain expectations. The assigned sections are then locked so only the assigned contributor can make changes thereto. David limits visibility of highly sensitive sections to only a limited number of contributors. The team collaborates on the sales proposal wherein individual contributors work in parallel on sections assigned to them. All changes made by each contributor automatically appear in each member s copy. When David sees collaboration is complete he delivers the complete compound document to the key client.

As another example assume that a participant receives an invitation to collaborate on a document. After accepting the invitation the participant sees the document in an assembly workspace. The participant can click on the document in the assembly workspace which operates to invoke an assembly component whose components operate to build the document which is tailored to the participant based on a role and one or more privileges. The participant can edit one or more sections if the participant has access to one or more sections. For example the participant can make certain requested changes to sections of the collaborative document and can thereafter save those changes.

The changes are then communicated to a data store wherein the associated records can be updated with the saved changes. Thereafter the saved changes can be disseminated to other users associated with the collaborative document and presented in an associated assembly workspace. For example notifications can be communicated to other users informing them of the changes to the collaborative document or asking them to review and or further modify the collaborative document. In one embodiment changes associated with a collaborative document can be propagated outside of the control or awareness of a word processing application.

In an embodiment an OpenXML file format can be used to create composite documents composed of meaningful entities. Entities can include but are not limited to workspace document section editor author and observer. Entities can be defined using custom schemas that detail content state relationship with other entities version locking behavior and or project status. When users wish to begin collaboration a number of entities can be stored in a data store in order to 

1 generate complete copies of a document for each participant thereby avoiding the pitfalls of splintered copies and version conflicts 

2 enable asynchronous and or synchronous collaboration via various networking and communication environments 

3 facilitate communication using various communication abilities e.g. instant messengers IMs e mail etc. 

In various embodiments groups teams etc. can simultaneously interact with a collaborative document including progress tracking assigning responsibility preventing unintentional overwrites and or sub document locking based in part on a user s role. A collaborative document can be stored and maintained using a web service server on a peer machine and or on the user s computing device. The collaborative document can then be communicated to defined participants when they have connectivity. Depending on the communication architecture synchronization of the collaborative document operates to aggregate changes made by each participant so that each participant obtains other user modifications. In alternative embodiments the functionality and operation of the various components can be combined to provide fewer components and or a desired implementation.

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld or other type of computer capable of executing one or more application programs. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments of the invention the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of input types including a keyboard mouse pen finger and or other means. Similarly an input output controller may provide output to a display a printer or other type of output device. Additionally a touch screen can server as an input and an output mechanism.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store application programs such as a collaboration application word processing application an imaging application e mail application drawing application etc.

It should be appreciated that various embodiments of the present invention can be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

