---

title: Speech recognition using a state-and-transition based binary speech grammar with a last transition value
abstract: A computer-loadable data structure is provided that represents a state-and-transition-based description of a speech grammar. The data structure includes first and second transition entries that both represent transitions from a first state. The second transition entry is contiguous with the first transition entry in the data structure and includes a last-transition value. The last-transition value indicates that the second transition is the last transition from the first state in the data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571096&OS=07571096&RS=07571096
owner: Microsoft Corporation
number: 07571096
owner_city: Redmond
owner_country: US
publication_date: 20070918
---
This application is a divisional of and claims priority from U.S. patent application Ser. No. 11 178 043 filed on Jul. 8 2005 which was a divisional of and claimed priority from U.S. patent application Ser. No. 09 778 479 filed on Feb. 7 2001 which claimed the benefit of U.S. Provisional Application 60 219 861 filed on Jul. 20 2000 and entitled MICROSOFT SPEECH SDK SAPI 5.0 .

The present invention relates to the construction of grammars used in speech recognition. In particular the invention relates to the construction of grammars in a binary format.

In speech recognition systems a computer system attempts to identify a sequence of words from a speech signal. One way to improve the accuracy of the recognition is to limit the recognition to a set of selected phrases. This is typically done by limiting valid recognition hypothesis to phrases that are found in a context free grammar CFG .

One common method for describing phrases in a context free grammar is to use a Recursive Transition Network description. Under such RTNs each word in a phrase is represented by a transition between two states. Multiple transitions can extend from a single phrase allowing multiple phrases to be represented by a single RTN structure. For example the phrase go back and the phrase go forward can be represented by a single RTN structure with a first transition extending between a first state and a second state to represent the word go and two parallel transitions extending between the second state and a third state to represent the words back and forward respectively.

In the past the binary version of the context free grammar included a description of the RTN structures that explicitly recited each state and each transition. Since each description of a state or transition requires some amount of memory each description adds to the size of the binary grammar.

In addition binary grammars of the past generated records for each transition that included both the transition s position in the structure and the actual word or semantic tag associated with the transition. Because the words and tags are of variable lengths prior art grammars either had to make the records a fixed size that was large enough to accommodate all possible words or a variable size. If the records were made a fixed size almost all of the transition records would include unused space making the binary grammar wastefully large. If variable length records are used parsing the grammar to retrieve information becomes very difficult because the grammar must be searched to find the right record.

There is also a need for a binary grammar that includes several different types of records that reference one another in such a way that if the binary grammar were loaded into memory the references could be used directly to retrieve desired information without having to first resolve one or more pointers.

A computer loadable data structure is provided that represents a state and transition based description of a speech grammar. The data structure includes first and second transition entries that both represent transitions from a first state. The second transition entry is contiguous with the first transition entry in the data structure and includes a last transition value. The last transition value indicates that the second transition is the last transition from the first state in the data structure. By using such a last transition value the present invention is able to avoid including an explicit description of states in the data structure.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to PAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way o example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD RON or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Memory is implemented as non volatile electronic memory such as random access memory RAM with a battery back up module not shown such that information stored in memory is not lost when the general power to mobile device is shut down. A portion of memory is preferably allocated as addressable memory for program execution while another portion of memory is preferably used for storage such as to simulate storage on a disk drive.

Memory includes an operating system application programs as well as an object store . During operation operating system is preferably executed by processor from memory . Operating system in one preferred embodiment is a WINDOWS CE brand operating system commercially available from Microsoft Corporation. Operating system is preferably designed for mobile devices and implements database features that can be utilized by applications through a set of exposed application programming interfaces and methods. The objects in object store are maintained by applications and operating system at least partially in response to calls to the exposed application programming interfaces and methods.

Communication interface represents numerous devices and technologies that allow mobile device to send and receive information. The devices include wired and wireless modems satellite receivers and broadcast tuners to name a few. Mobile device can also be directly connected to a computer to exchange data therewith. In such cases communication interface can be an infrared transceiver or a serial or parallel communication connection all of which are capable of transmitting streaming information.

Input output components include a variety of input devices such as a touch sensitive screen buttons rollers and a microphone as well as a variety of output devices including an audio generator a vibrating device and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition other input output devices may be attached to or found with mobile device within the scope of the present invention.

Under one embodiment the composite grammar in context free grammar engine is organized as a recursive transition network RTN that includes a collection of grammar structures known as rules. Each rule contains a collection of transitions that define one or more paths from a starting state to an ending state for the rule. Under these embodiments each transition corresponds to the recognition of a recognition value such as a single word the lack of a word known as an epsilon transition or the recognition of some other rule known as a rule reference .

The composite grammar maintained by context free grammar engine is constructed from a collection of binary grammars that are formed by a compiler . Compiler includes a front end and a back end . Compiler front end converts text formatted grammars which in one embodiment are XML tagged grammars into a set of instructions for building a binary grammar. These instructions are passed to compiler back end and direct back end to build binary structures that represent particular rules grammar structures in a grammar.

In embodiments where the composite grammar is a recursive transition network the instructions define new rules to be added to the network and the location and content of transitions to be added to each rule. Thus the instructions indicate whether a transition is associated with a word a lack of a word an epsilon transition or a rule. The instructions also indicate the identity of any semantic tag semantic value pair that is to be associated with the transition.

When compiler front end reaches the end of the text formatted grammar it instructs back end to commit the grammar. When it receives this instruction shown as instruction in a binary build component of back end takes the current form of the grammar in grammar memory and constructs a compact binary representation of the grammar. The format and characteristics of binary grammar are described in more detail below.

Compiler back end may also receive grammar building instructions directly from application at run time. These instructions are generated by the application to produce one or more run time grammars that are then added to the composite grammar used by context free grammar engine . Like compiler front end application is able to specify semantic tag semantic value pairs for transitions that it wants added to the grammar.

During recognition speech recognition engine compares sections of the speech signal to acoustic models representing a set of phonetic units that can be spoken in the language of interest. From these comparisons engine identifies sequences of phonetic units that could be represented by the speech signal. When identifying the possible sequences recognition engine eliminates those sequences that do not occur in at least one of the grammar structures of the composite grammar.

The present invention provides an improved format for the binary grammars used by context free grammar engine . This format makes the binary grammar more compact and easier to access than prior art grammars.

The general layout of one embodiment of a binary grammar of the present invention is shown in . The grammar contains a header section and a data section .

Header section provides general information regarding the grammar as well as layout information indicating the location and size of various types of data in data section . The general information includes things such as a FORMAT ID and a GRAMMAR GUID that both represent global unique identifiers for the grammar. Header also includes a LANGUAGE ID that identifies the spoken language represented by the grammar i.e. English or French .

The layout information in header allows a parsing program to quickly access information stored in data section and allows it to allocate enough memory to manipulate the data if necessary. For example header includes an entry that indicates the largest number of transitions or arcs that extend from a single state so that the parsing program can allocate enough space to handle all of these transitions.

The remaining information in header is tied directly to a particular data entry in data section . For example entries and describe the number of characters and nulls and the number of words respectively in a word string in data section . Further entry describes the memory offset from the beginning of binary grammar to the first character of word string

Word string is a string of null separated words. An example of the layout of word string is shown in where each word and is placed between two nulls such as nulls and . Each word in word string appears at least once on a transition in the grammar. To save space words that appear multiple times in the grammar only appear once in word string .

Entries and of header provide information related to a symbol string in data section . Entry describes the total number of characters and nulls in symbol string and entry describes the memory offset from the beginning of grammar to the first character in symbol string .

Symbol string contains null separated character strings that represent reference symbols such as semantic tags semantic values and rule names. An example of the layout of a symbol string is shown in where each symbol such as symbols and is placed between two null characters such as null characters and .

Entries and of header describe the number of and location of rule entries in data section . In particular entry indicates how many rule entries are in grammar and entry indicates the memory offset from the beginning of grammar to the first character of the first rule entry in rule entries .

An example of the layout of each rule entry is shown in . Each entry consists of a set of fields that together describe a rule in the grammar. For instance RULE ID field and NAME INDEX field provide a rule identifier and a reference to a rule name respectively that can be used to identify the rule. Although RULE ID field contains the actual rule identifier NAME INDEX field does not contain the actual name of the rule. Instead field contains an index number that describes the location of the first character of the rule s name in symbol string . By keeping the actual name out of field the present invention is able to keep the rule entries at a small fixed size since they do not have to accommodate variable length strings to represent rule names.

Fields and are each single bit flag fields that describe some characteristic of the rule. For example TOP LEVEL field indicates whether the rule is a top level rule one that can represent an entire utterance or a sub rule that can only represent a part of an utterance.

ACTIVE field indicates whether the rule should be activated when an application passes a generalized command to activate rules. If this bit is set to one the rule will be activated by the generalized command. If this bit is zero the rule can only be activated with a specific command to activate this particular rule.

INTERPRETER field indicates whether this rule has an associated interpreter that is to be called when the rule is recognized. The location of the interpreter is maintained by the context free grammar engine at run time.

IMPORTED field and EXPORTED filed indicate whether this rule has been imported into the current grammar and whether the rule may be exported to other grammars. Under the present invention rules may be imported and exported at run time based on instructions from the application.

RESOURCE field indicates whether or not the current rule has an associated resource. A resource is a string file or network location that contains information that can be used by the speech recognition engine during recognition of this rule. The value of the resource is stored as a resource string in symbol string . For resources that are files or network locations the string represents the address of the resource. In other embodiments the resource string is interpreted as something other than an address. The location of the symbol in symbol string is found in a list of resource entries which are described below.

DYNAMIC field indicates whether or not this rule is dynamic. A dynamic rule may have its structure changed at run time based on instructions from the application. Under one embodiment of the present invention dynamic rules are placed at the end of rule entries so that changes to these rules do not require changes to static rules in the grammar. By doing this the grammar may be updated more quickly when a dynamic rule changes since only the dynamic rule s transitions and words need to be changed.

FIRST ARC INDEX field of each rule entry provides an index number for the first arc or starting transition associated with the rule. The index number is the entry number for the arc in a list of arc entries provided in data section . Like the rule entries each transition entry has a fixed size. Therefore using the starting memory location of the arc entries the fixed size of each entry and the index number of the first transition for the rule the location of the first transition can be easily calculated. Specifically the location of the first transition for a rule is calculated as index number entry size offset to start of arc entries .

Thus to access a value in a transition entry the index of the entry is first converted into a memory offset relative to the beginning of the grammar. This offset is then used to retrieve the value. This technique can be used when receiving an index from a rule entry or when the speech recognition engine returns a transition index for a word that it recognized in the speech signal.

The offset to the start of arc entries and the number of entries in arc entries is stored in header in entries and respectively. The layout of each arc entry under one embodiment of the invention is shown in .

Each entry describes the characteristics of a transition and indicates a next transition that can be followed after the current transition. In addition the organization of the entries in grammar indicates how the transitions are structurally related. In particular transitions that extend from a same state are grouped as contiguous entries in grammar . The last entry for a state includes a bit flag in a LAST field that indicates that the transition is the last transition extending from that state. By using this technique the present invention does not have to explicitly describe the states. Instead the states may be inferred.

In particular any transition that enters a state makes an indirect reference to the state by indicating that the next transition that can be followed is the first transition that extends from the state. This is done by placing the index of the next transition in NEXT ARC field of the current transition entry. All of the transitions that leave the state can then be found by reading each entry from this first entry to the first entry that has the last flag set in LAST field . Thus simply by specifying one transition that can follow the current transition a current transition entry is able to indicate all possible transitions that can be followed after the current transition.

By not making direct reference to the states themselves the present invention greatly reduces the space occupied by the grammar.

Each transition entry also includes a content index value which appears as WORD RULE INDEX in . The content index designates a word or rule that is associated with the transition. If a rule is associated with the transition INDEX is an index into rule entries . By multiplying the index by the fixed size of each rule entry the location of the rule entry can be easily determined. If a word is associated with the transition INDEX provides an offset into word string . In particular the word offset indicates the number of characters and nulls to the first character of the word in the word string. For example a word that begins at the twelfth character in the word string would have a word offset of 12 . A bit flag in RULE REF field indicates whether INDEX field contains an index to a rule or an offset to a word.

Each transition entry also includes a SEMANTIC TAG field which indicates whether a semantic tag is associated with the current transitions. The field contains a single bit flag indicating the existence of semantic information for the transition. The description of the semantic information itself is found in semantic property entries which are described further below.

A transition entry may also be associated with a weight value found in weight entries described below. The weight value biases the recognizer toward or away from recognizing a particular word and is used by applications to control the behavior of the recognizer for certain words.

The number of weight entries and the location of the first weight entry in weight entries are described by entry and entry respectively of header section . If all of the transition entries have the same weight value the default value of 1.0 there is no need to store the weight entries. Thus if the weight values are all the same there are no weight entries and weight entry is zero. If at least one transition has a weight value different than 1.0 there is a separate weight entry for each transition entry. Thus if there were ten transition entries and only one transition had a value different than 1.0 there would be ten weight entries.

Each weight entry contains an ARC INDEX field and a WEIGHT field as shown in . ARC INDEX field contains the index of a transition entry and WEIGHT field contains an offset into symbol string to the first character of the weight value for that transition entry.

Header entries and indicate the number of semantic property entries and the offset from the beginning of grammar to the first semantic property entry respectively. Semantic property entries describe semantic tags and semantic values that are associated with one or more transitions. provides a layout of one embodiment of a semantic property entry under the present invention.

In field contains the index of the transition that is associated with this semantic information. Under most embodiments the entries in semantic property entries are ordered based on the indices in field so that entries may be searched using an efficient search algorithm such as a binary search. Thus when a transition is identified by the speech recognition engine the semantic information for the arc transition is retrieved by searching for the transition s index in the semantic property entries.

The semantic tag s name and its semantic value are found using NAME OFFSET field and VALUE OFFSET field . The values in both fields and are indices into symbol string and provide the locations of the first characters of the semantic name and semantic value respectively.

Under some embodiments an application may also designate a name ID and a value ID for the semantic name and the semantic value. When a word associated with such semantic information is recognized the name ID and the value ID are returned to the application. This allows the application to use the name ID and value ID directly in further processing without having to perform a string compare on the returned semantic information. Since the name ID and the value ID are a fixed size they are placed directly in the semantic property entry in fields and respectively.

Under some embodiments of the present invention context free grammar engine is able to move semantic information across transitions so that the semantic information is as far forward as possible in the grammar structure without introducing semantic ambiguity into the grammar. To avoid introducing ambiguity when adding rules to a dynamic rule during run time the compiler needs to know the starting transition and the ending transition associated with each semantic entry. Fields and provide that starting arc and ending arc information.

In particular fields and provide the indices of the first transition and the last transition associated with the current semantic information may be placed. The semantic information can be placed on any transition that is along any path from the first transition to the last transition. The indices in fields and are the indices of the transition s entry in transition entries .

Fields and are PARALLEL FLAG fields for the first transition and the last transition respectively. When one of these fields is set to 1 the context free grammar engine must place the semantic information on all transitions that extend from the same state as the transition associated with the flag if it places the semantic information on the transition associated with the flag. Thus if field is 1 and the context free grammar engine wants to place semantic information on the first transition it must also place the semantic information on any transition that extends from the same state as the first transition.

The last set of entries in data section of is resource entries . The number of resource entries in the grammar is designated in header entry and the offset from the beginning of the grammar to the first resource entry is designated in header entry .

An example of a resource entry is shown in and includes a RULE INDEX field and a RESOURCE INDEX field . RULE INDEX field provides an index to the rule in rule entries that is associated with the resource. RESOURCE INDEX field provides an index into symbol string to the first character of a string of characters that describe the value of the resource.

An example of a binary grammar for a grammar structure is described below. The grammar consists of three rule structures which are shown in and . The rule of is named MOVE the rule of is named CARD and the rule of is named SUIT .

 MOVE rule of begins with two parallel transitions and between states and of the rule. Transition is associated with the word PLEASE and transition is an epsilon transition that indicates that the word PLEASE is optional for the rule.

After transition there are two transitions and that are in series and represent the words MOVE and THE respectively. Transition also has semantic information associated with it. In particular the semantic tag MOVECARD and the semantic value 1 are associated with transition . Although semantic information is placed on transition is actually associated with the entire rule.

Transition comes after transition and is a rule reference transition. In particular transition makes reference to CARD rule of . In order for transition to be recognized an entire path through CARD rule must be recognized.

Transitions and are in parallel with each other and both extend after transition . Transition is a word transition representing the word PLEASE and transition is an epsilon transition. Both of these transitions end at the end state of rule .

Rule of begins with two parallel word transitions and which represent the words QUEEN and ACE respectively. These transitions are followed by word transition for the word OF which is followed by rule transition for SUIT rule of . Thus at least one path through rule must be recognized in order for rule to be recognized.

Rule contains four parallel word transitions and for the words CLUBS SPADES HEARTS and DIAMONDS . Transitions and are also associated with semantic information and respectively. Semantic information includes the semantic tag RED and the semantic value 0 . Semantic information includes the semantic tag RED and the semantic value 1 .

In each word found in rules and is found once in word string . Note that even though the word please appears twice in rule it only appears once in word string . Also note that the name of the rules do not appear in the word string. Instead the rule names the semantic tags and the semantic values appear in symbol string of .

In the rule entries of each rule has a separate entry. In particular rules and are represented by entries and respectively.

For rule field of entry indicates that its rule id is 01 and field indicates that it is a top level rule. Fields and indicate that rule can be activated by a general activation command that it does not have an associated interpreter and that it is not imported. Field indicates that rule can be exported to other grammars and field indicates that there are no resources associated with the rule. Field indicates that rule is not dynamic.

Field of entry provides an index into symbol string for the name of rule . This index value is 01 . By counting characters and nulls from the beginning of symbol string the first character of the rule s name can be found. In this case the first character is M in the rule name MOVE . The entire name is retrieved by reading from the first character to the next null.

Field of entry provides an index into transition entries of for the first transition of rule . In this case the transition index is 01 which is an index to entry of . Note that the first entry in transition entries is designated as entry 00 .

Rule entry of represents rule of . Because rule is embedded in another rule it is not a top level rule. This is indicated by a 0 in field . In addition entry indicates that rule can be activated by a general activation command it does not have an interpreter and is not imported. Entry also indicates that rule can be exported it does not have a resource and it is not dynamic.

Field of entry points to character index 17 in symbol string to indicate the name of rule . In particular this index points to character which is the first character in the word CARD . The first transition for rule is listed in field as transition index 08 of transition entries . This corresponds to transition entry in .

Rule is represented by rule entry in the rule entries of . Rule entry has the same settings as rule entry for the TOP LEVEL ACTIVE INTERPRETER IMPORTED EXPORTED RESOURCE and DYNAMIC fields. NAME INDEX field and FIRST ARC INDEX field however are different. In particular NAME INDEX field contains a value of 22 which points to character in symbol string . This is the first character in the word SUIT . FIRST ARC INDEX field has a value of 12 which points to entry of arc entries .

In arc entries entry represents an ending state for a rule. When entry is listed as the next arc in NEXT ARC field of a transition entry it is an indication that the transition for that transition entry terminates at the end of a rule.

As noted above transition entry represents the first transition of rule of . In fact entry represents epsilon transition of . Because it is an epsilon transition it does not have a word or rule associated with it. As such WORD RULE INDEX field has a value of zero for entry . RULE REFERENCE field and SEMANTIC TAG field indicate that transition is not a rule transition and that it does not have any semantic information associated with it. LAST field indicates that transition is not the last transition to extend from state of and NEXT ARC field indicates that the entry for the next transition after transition has an index of 3 . This corresponds to entry in .

Entry in corresponds to transition of . As such RULE REFERENCE field indicates that it is not a rule transition and WORD RULE INDEX field provides an offset value of 1 into word string of FIG. . This corresponds to word which is PLEASE in word string .

LAST field in entry indicates that this transition is the last transition that extends from state of . As such entry completes the implicit description of state that was begun by entry . Note that state is not referred to directly under the present invention but instead is inferred by placing entries and next to each other in arc entries .

NEXT ARC field of entry indicates that the next transition after the transition of entry is described in entry .

Entry describes transition of . Its WORD RULE INDEX has a value of 8 thereby pointing to the first character in word in word string . This corresponds to the word move . Since transition is the only transition extending from state in LAST field indicates that entry is the last entry for that state.

Because transition is associated with semantic information SEMANTIC TAG field has its bit flag set to 1 to indicate the existence of the semantic information. Lastly NEXT ARC field indicates that the next transition is represented by the entry at index 4 which is entry .

Entry represents transition of . Its WORD RULE INDEX points to the word THE which is word in word string . Its LAST field indicates that it is the only transition from state and its NEXT ARC field indicates that the next transition is represented by the entry at index 5 which is entry .

Entry represents transition of . Since this is a rule transition RULE REFERENCE field is set to 1 and the value in WORD RULE INDEX field is an index into the rule entries of . In particular field has a value of 2 which corresponds to rule entry in the entry for CARD rule .

Since transition is the only transition after transition LAST field indicates that entry is a last entry from a state. NEXT ARC field indicates that the next transition for entry is at index 6 which corresponds to entry .

Entry represents transition of . Because it is an epsilon transition it has a RULE WORD INDEX value of zero. In addition since this transition extends to the last state of rule its NEXT ARC field also contains a value of zero.

Because transition is just one of two transitions that extend from state of LAST field is set to 0 . This indicates that at least the next entry in arc entries extends from the same state as the transition of entry .

The next entry after entry is entry which represents transition of . This transition is associated with the word PLEASE and as a result WORD RULE INDEX field points to the word PLEASE which appears as word in word string . Note that entries and point to the same word in the word string. By doing this the present invention reduces the space needed to represent words that appear multiple times in the grammar.

Transition is the last transition that extends from state . As such LAST field of entry is set to 1 . Like transition transition also extends to the last state of rule . As such NEXT ARC field is set to 0 for entry .

Entry of represents the first transition of rule . In particular entry represents transition of rule . Since transition is a word transition representing the word ACE WORD RULE INDEX is set to 17 thereby making reference to the first character in the word ACE in word string . NEXT ARC field of entry is set to 10 to indicate that the transition represented by entry follows the transition for entry . Because transition is in parallel with transition LAST field of entry is set to 0 .

Entry has a corresponding entry in weight entries of . In particular a weight value other than 1.0 is set in weight entry which contains an ARC INDEX field and a WEIGHT field . For entry ARC INDEX field has a value of 8 which is the index for entry in arc entries and WEIGHT field has a value of 39 which is an offset into symbol string of . In particular the offset points to the value 0.8 in symbol string which is the weight value to be applied to the word ACE .

Returning to the transition entries of the next entry after entry is entry which represents word transition of . In entry WORD RULE INDEX field is set to 21 to point to word which is the word QUEEN in . Entry has a corresponding weight entry in the weight entries of . To find this weight value ARC INDEX is searched to find an index value that matches the arc index value of entry . In particular the weight entries are searched for an arc index value of 9 . The weight value for entry is 42 which is an offset to the value 0.2 in symbol string .

Note that all other entries in weight entries have the same offset of 35 which points to the value 1.0 in symbol string .

Entry of transition entries describes transition of and entry describes rule transition of . Because entry represents a rule transition RULE REFERENCE field is set to 1 and WORD RULE INDEX field makes reference to a rule entry in the rule entries of . In particular field has an index value of 3 which is a reference to rule entry of .

Entries and of represent transitions and of respectively. Since transitions and contain semantic information entries and have their SEMANTIC TAG flags set to 1 .

NAME ID field and VALUE ID field provide alternative descriptions of the semantic information. In particular NAME ID field has an integer value of 100 and VALUE ID field has an integer value of 1 .

START ARC INDEX field and END ARC INDEX field indicate the first and last arc on which the semantic information of entry may be placed. In particular START ARC index field indicates that the first arc that the semantic information can be placed on is represented by the entry at arc index 2 . This corresponds to entry in and transition for the word PLEASE in . END ARC INDEX field indicates that the last arc that the semantic information can be placed on is represented by the arc entry at index 7 which is entry for transition of .

Both START ARC INDEX and END ARC INDEX have their corresponding PARALLEL FLAG fields and set to 1 . This indicates that both the starting arc and the ending arc are in parallel with at least one other arc. As can be seen from starting arc is in parallel with epsilon transition and ending arc is in parallel with epsilon transition .

Semantic entries and represent semantic information and respectively of . Since both sets of semantic information have the same semantic tag NAME OFFSET field has the same value in both entries. In particular both entries have a value of 27 in NAME OFFSET field thereby making reference to the first character of the word RED in symbol string .

The semantic information of entries and cannot be moved. As such in both entries the START ARC INDEX and the END ARC INDEX have the same index value. For entry the index value is 12 and for entry the index value is 15 . Since the semantic information of entries and cannot be placed on a parallel transition PARALLEL FLAGS and are set to 0 for both entries.

Although the present invention has been described with reference to particular embodiments workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention.

