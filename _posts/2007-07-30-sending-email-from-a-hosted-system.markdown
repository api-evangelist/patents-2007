---

title: Sending e-mail from a hosted system
abstract: A method includes receiving e-mail input data from a client at a server that is configured to serve a hosted application that includes an e-mail user interface to the client. The e-mail input data is used to generate an e-mail message from a user of the client, where the client is associated with a first domain and the server is associated with a second domain. An e-mail object corresponding to the e-mail message from the user of the client is generated at the server, and the e-mail object is forwarded from the server to the client along with instructions to convert the e-mail object into the e-mail message and to send the e-mail message from the first domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707258&OS=07707258&RS=07707258
owner: SAP AG
number: 07707258
owner_city: Walldorf
owner_country: DE
publication_date: 20070730
---
This application claims priority under 35 U.S.C. 119 e to U.S. Provisional application Ser. No. 60 892 803 filed on Mar. 2 2007 entitled Sending E Mail From a Hosted System which is hereby incorporated by reference in its entirety.

This description relates hosted systems and in particular to sending e mail from within a hosted system.

In a client server system a server can host an application that provides a service to a client and the client can operate the application remotely. For example a website such as yahoo.com or msn.com can run applications that provide a financial portfolio tracking service to remote clients. The clients can connect to the hosted system through a network and operate the system enter information concerning their portfolios and then track the performance of their portfolios through use of the hosted system. Because the application is hosted and run by the server and data about the users portfolios is stored on the server the client need not install any software or store any data about the portfolios. Moreover the application can be updated automatically by the server without the client having to take action to install updated or additional software. From the perspective of the website owner an advantage of providing the hosted application in an application service provider ASP model as opposed to providing the application through a stand alone application that is loaded onto and run by the client is that the website owner can more easily update the application communicate with the client and has access to data provided by the client. These advantages allow the website owner to know and understand the user better so that the application can be tuned for the user. In addition because the user must connect to the server to access and use the application the website owner has the opportunity to communicate with the user more frequently.

Some hosted applications provided by a server to a client can include an electronic mail e mail application that allows the user of the application to send e mail messages through the hosted application. E mail messages are composed in the e mail application and sent from a mail server that is associated with the server. For example if the hosted application is provided by a server associated with the domain SAP.com the e mail messages are sent from a mail server that is also associated with the domain SAP.com. A problem with this is that if a user utilizes the e mail application of the hosted application to send malicious or spam e mails network security systems and software may associate the malicious or spam e mail with the domain from which they were sent i.e. SAP.com and may take action to quarantine or blacklist the domain. Therefore one malicious user or spam sender utilizing the hosted application may cause the e mail traffic from non malicious users of the hosted application or other users associated with the domain to be limited or blocked. Furthermore a SPAM filter may identify an e mail as SPAM if the domain of the listed as the sender s domain does not match the domain of the sending mail server. Thus legitimate e mails may be routed into junk mail when using a hosted solution if the user sends e mail from the domain of hosted solution s mail server but the user s from address has a different domain. In addition if the domain of the hosted application is used to send a sufficiently large number of e mails on behalf of its clients then according to some laws e.g. German Law the provider of this hosted application may be deemed an Internet Service Provider which may require that the that the provider conform to certain burdensome and or costly regulations.

In a first general aspect a method includes receiving e mail input data from a client at a server that is configured to serve a hosted application that includes an e mail user interface to the client. The e mail input data is used to generate an e mail message from a user of the client where the client is associated with a first domain and the server is associated with a second domain. An e mail object corresponding to the e mail message from the user of the client is generated at the server and the e mail object is forwarded from the server to the client along with instructions to convert the e mail object into the e mail message and to send the e mail message from the first domain.

Implementations can include one or more of the following features. For example the e mail input data can be composed with the e mail user interface of the hosted application that is served to the client. Generating the e mail object can include creating an XML representation of the e mail message from the user of the client. Forwarding the e mail object from the server to the client can include sending instructions to the client to convert the e mail object into the e mail message and to send the e mail message through a local e mail client application associated with the first domain and configured to run on the client. The local e mail client application can be selected from the group consisting of Microsoft Outlook and Lotus Notes. The data indicating that the client should unpack the e mail object and send the e mail message through a local e mail client application can include a scripting language program. A copy of the e mail message can be generated at the server and the copy can be stored in a storage device on the server for presentation to the user through the e mail user interface of the hosted application served to the client.

In another general aspect a method includes accessing an application hosted by a server and served to a client where the application includes an e mail user interface that is served to the client and runs on the client and where the client is associated with a first domain and the server is associated with a second domain. E mail input data is received from a user of the client and the e mail input data is used to generate an e mail message from the user where the e mail input data is composed within the e mail user interface of a hosted application. The e mail input data is sent from the client to the server and an e mail object corresponding to the e mail message is received from the server. The e mail object is converted into the e mail message and the e mail message is sent from the first domain.

Implementations can include one or more of the following features. For example receiving the e mail object can include receiving an XML representation of the e mail message from the user of the client. Sending the e mail message can include sending the message through a local e mail client application associated with the first domain and configured to run on the client. The local e mail client application can be selected from the group consisting of Microsoft Outlook and Lotus Notes. The e mail user interface of the application to the user can be provided through a browser application running on the client. A confirmation message can be sent from the client to server to inform the server that the e mail message has been sent.

In another general aspect a server system includes a network interface a processor and an e mail object generating engine. The network interface is configured for connecting the server system to a client system where the client is associated with a first domain and the server is associated with a second domain. The processor is configured for providing a hosted application that is served to the client where the hosted application includes an e mail user interface within which a user of the client system that can generate e mail input data for sending an e mail message from the user. The e mail object generating engine is adapted for receiving the e mail input data from the client and generating an e mail object to be sent to the client system along with instructions for converting the e mail object into an e mail message to be sent from the first domain.

Implementations can include one or more of the following features. For example the e mail object can include an XML representation of the e mail message from the user of the client. The instructions for converting the e mail object into an e mail message to be sent from the first domain can include instructions to the client to send the e mail message through a local e mail client application associated with the first domain and configured to run on the client. The local e mail client application can be selected from the group consisting of Microsoft Outlook and Lotus Notes. The instructions for converting the e mail object into an e mail message to be sent from the first domain can include a scripting language program. The hosted application can be a customer relations management application. Internet Protocol header information of the sent e mail message can be associated with the first domain.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

In one implementation the processor can execute a hosted application that can provide services to a client user. In one implementation the hosted application can provide a suite of business services to a client user. For example the hosted application can provide a suite of customer relationship management CRM services to a user so that the user can manage interactions with a customer. The hosted application CRM On Demand offered by SAP AG of Walldorf Germany is an example of such a hosted application.

To utilize the services provided by the hosted application a user of the client can connect the client to the server through a network . The network can be a wide area network WAN such as for example the Internet or a local area network LAN such as a corporate network. The client can connect to the network though a first network interface controller and the server can connect to the network though a second network interface controller . After connecting the client to the server the user can require the server to load and run the hosted application .

Like the server the client can include a memory device such as for example a hard disk a random access memory RAM or a read only memory ROM for storing executable instructions such as in a computer program. The instructions can be executed by a processor . When the client is connected to the server and the hosted application is running the client can access the services provided by the hosted application through a hosted application user interface UI running on the client. The hosted application UI can be provided for example through a browser application such as for example Microsoft Internet Explorer or Mozilla Firefox. Instructions for operating the browser can be stored on the client s memory and executed by the client s processor . The client can receive input data from a user and send the data to the server for processing and or storage by the hosted application . For example when the hosted application provides CRM On Demand services to the client the user can enter information about customers with whom the user interacts sales made to the customers call center interactions and personal meetings with the customers for processing organization and storage within the hosted application on the server .

In some implementations the user may utilize the hosted application to send e mail messages. In one implementation the user can compose an e mail message within an e mail user interface by entering email input data e.g. the text of an e mail message the subject of the message and the e mail address of the recipient of the message . The hosted application can receive the e mail input data from the client and instructions to send an e mail message based on the e mail input data. In response to the e mail input data and the instructions the hosted application can send the e mail message though a mail server associated with the server . For example the mail server and the server can both be associated with the same domain. For example the mail server and the server can both be associated with the domain SAP.com when the hosted application is hosted and provided by SAP AG The client can be associated with a different domain for example the domain adcom.com. The mail server can include a processor and a memory device for receiving the e mail message from the server and sending the e mail message out through a network to the intended recipient.

In another implementation when a user desires to send an e mail message through the hosted application provided by the server the e mail message can be sent from a mail server having a domain associated with the client . In this implementation the user can compose the e mail message within the e mail UI of the hosted application UI and e mail input data and instructions to send the message are forwarded to the server . When the hosted application receives the e mail input data and the instructions to send the message an e mail object generating engine within the application creates an e mail object and packages the e mail object in an XML representation of the e mail message but does not send the message from the mail server of the domain associated with the server . Instead the hosted application running on the server sends a response to the client with the XML formatted e mail object and instructions to the client to unpack the object and send the email message from a mail server having a domain that is associated with the client .

In one implementation the instructions to unpack the email object can be contained in scripting language code e.g. Javascript that is executed by an engine e.g. a Java engine . Execution of the scripting language code by can make use of the client s application programming interface API via ActiveX control to create a new email message within an email client application e.g. Microsoft Outlook or Lotus Notes running on the client . In one implementation the email message is created within the Outbox of the email client . After the email message is created within the Outbox of the email client the email client forwards the message to the mail server associated with the client . The mail server contains a memory for storing instructions regarding how to send the mail message and also includes a processor for executing the instructions to send the email message to the intended recipient though a network . The network can be the same or similar network as the network and network . For example each network could be the Internet. In another implementation the networks and can be different or can have some small degree of overlap.

The email client can have a user interface through which the user can view the sent message and through which the user can review the status of the sent message in the email client . For example after the email object is unpacked and the message is created within the Outbox of the email client with the email user interface the user can verify that the message has been created in the Outbox and after the message has been sent the user can see the message in the Sent Items folder of the UI . After the scripting language code has been executed and the email message has been sent from the mail server control is returned again to the hosted application and the user can perform the next action or task within the hosted application .

In other implementation when the email message is sent from the mail server it may bypass the email client application. For example when executed the scripting language code may cause the processor to unpack the XML email object received from the server and to send the email message from the client to the SMTP server of the Microsoft Exchange Server running on the mail server . In this case the SMTP credentials of the mail server must be identified to the client so that the client can communicate directly with the mail server .

After the user has composed the email in the interface and clicked an icon in the interface to send the email then as explained above the data input by the user in the various portions and of the email user interface is forwarded from the client to the server where the email object engine creates an email object that it sends back to the client so that the client can send the email message from its own domain. After the email object received from the server is unpacked on the client and converted into an email message the email message can be loaded into the email client application where it is viewable in the UI of the application . The UI can have several portions including an individual message portion an individual folder portion and an overview portion . Within the individual message portion the email message composed by the user is displayed. The message portion can present to the user the body of the email a signature block and a default letterhead block . The default letterhead and signature blocks can be added automatically based on pre stored data either by the email client application or by the email service of the hosted application . A header portion within the individual message portion can provide information about the subject the sender and the recipient of the email. The individual folder portion of the UI can provide information about the individual messages contained within a particular folder of the email client application . For example as shown in the individual folder portion can show that the email message presented in portion is a message that is stored in the Outbox folder of the application and that it was stored in the Outbox folder at 3 05 pm on the day the user is viewing the UI . The overview portion presents overview information about all the user s email folders including the user s favorite folders. For example as shown in when the label for the Outbox folder is presented in bold font the user would know that at least one unreviewed or unprocessed message is stored in the Outbox folder of the application . The numeral 1 in parentheses after the name of the Outbox folder would indicate to the user that only one unreviewed or unprocessed message is stored in the Outbox folder of the application . After a message in the Outbox has been processed and sent it may be moved to the Sent Items folder of the application .

In a next step an e mail object is generated at the server where the email object corresponds to the e mail message from the user of the client. Generating the e mail object can include creating an XML representation of the e mail message from the user of the client. Then in a step the e mail object is forwarded from the server to the client along with instructions to convert the e mail object into the e mail message and to send the e mail message from the first domain. It is also possible that at step a copy of the e mail message is generated at the server and stored in a storage device on the server for presentation to the user through the e mail user interface of the hosted application served to the client. Forwarding the e mail object from the server to the client can include sending instructions e.g. in a Java script to the client to convert the e mail object into the e mail message and to send the e mail message through a local e mail client application e.g. Microsoft Outlook or Lotus Notes associated with the first domain and configured to run on the client.

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.

