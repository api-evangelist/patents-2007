---

title: Generic XML screen scraping
abstract: A method may include creating an Extensible Markup Language (XML) instruction file based on screen shots of a host system, providing the XML instruction file to a screen scraper program, executing screen scraping operations based on the XML instruction file, and outputting a user interface file based on the screen scraping operations that corresponds to extracted data output from the host system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484626&OS=08484626&RS=08484626
owner: Verizon Patent and Licensing Inc.
number: 08484626
owner_city: Basking Ridge
owner_country: US
publication_date: 20070928
---
Screen scraping is a technique in which a computer program extracts data from the display output of another computer program. Typically a developer may write a screen scraping program for each screen to be scraped. Given the complexities associated with screen scraping development and maintenance of a screen scraping program can be onerous. In this regard screen scraping has become a technique that is often times implemented as a last resort. In addition to the complexities associated with this type of program a screen scraping program may have operational limitations. For example the screen scraping program may not be able to jump to multiple screens or read multiple pages from a screen.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following description does not limit the invention.

The XML Instruction file may include various XML statements that include tags text arguments etc. which may be interpreted by the GENSS program as a corresponding screen scraping operation. For example an XML statement may include among other things a Read tag. In this instance the GENSS program may interpret the XML Read tag as a read screen scraping operation. In another example an XML statement may include among other things a conditional statement and or a loop statement e.g. IF FOR etc. . In this instance the GENSS program may interpret the XML condition and or the XML loop statement as a conditional or loop screen scraping operation. The GENSS program may for example read multiple pages of data from the screen without any additional coding and or read data from one screen and use that data as input to scrape another screen.

If the screen scraping operations are completed on the host device the GENSS program may convert the extracted data and generate an Output file to the client device. In one implementation as illustrated in the Output file may be an XML Output file. In another implementation the Output file may be a HyperText Mark up Language HTML Output file or of some other format. The XML Output file may be utilized on the client device. That is the XML Output file may provide a new and more user friendly interface to the data and or assets residing on the host device.

As a result of the foregoing this new architecture for screen scraping provides a variety of enhancements compared to other methods. For example developers may design an instruction file for screen scraping based on an XML file which may be significantly easier to develop and maintain compared to other programs designed for screen scraping. Additionally the GENSS program may perform sophisticated screen scraping operations based on language constructs built into the XML Instruction file. Furthermore the GENSS program may allow developers to create new user interfaces based on extracted data and provide a more user friendly environment to access and manage systems containing data and other assets.

Legacy system may include a computational device. In one implementation legacy system may include a computer or another type of computation or communication device a thread or process running on one of these devices and or an object executable by one of these devices. For example the computer may be a mainframe computer or some other host system such as a terminal. The computer may include a legacy application. The legacy application will be described in greater below.

Link may include a communication path between legacy system and screen scraping system . For example link may be a wired or a wireless connection that connects legacy system and screen scraping system . As will be described below screen scraping system may perform various screen scraping operations on legacy system via link .

Screen scraping system may include a computational device. In one implementation screen scraping system may include a computer or another type of computation or communication device a thread or process running on one of these devices and or an object executable by one of these devices. Screen scraping system may include the GENSS program. As will be described below the GENSS program may provide for screen scraping of another system such as legacy system .

Although illustrates exemplary components of system in other implementations system may include fewer additional and or different components than are depicted in . Given the widespread application of screen scraping a variety of systems may be envisioned other than legacy systems. Today screen scraping may be employed in relation to enterprise application integration enterprise content management web harvesting unstructured data management etc. Further legacy system is not limited to a single computer but may include a network of interconnected computers or other configurations.

Bus may include a path that permits communication among the exemplary components of the device. Processor may include a processor a microprocessor or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . ROM may include a ROM device or another type of static storage device that may store static information and instructions for execution by processor . Storage device may include for example a magnetic and or an optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator to input information to the device such as a keyboard a button a mouse etc. Output device may include a mechanism that outputs information to the operator including a display one or more light emitting diodes LEDs a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables the device to communicate with other devices and or systems.

As further shown in storage device may include a legacy application . Legacy application may include software relating to managing and accessing a repository of data. For example legacy application may relate to an application for bulk data processing information such as financial transaction records or service orders. In some instances legacy application may be based on a low level programming language and or may provide a non graphical user interface.

The device depicted in may perform certain operations relating to legacy application . Legacy system may perform these operations in response to processor executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a physical or logical memory device and or carrier wave. The software instructions may be read into main memory from another computer readable medium such as storage device . The software instructions contained in main memory may cause processor to perform processes associated with legacy application . Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows exemplary components of legacy system in other implementations legacy system may contain fewer different or additional components than depicted in . In still other implementations one or more components of legacy system may perform some or all of the tasks described as being performed by one or more other components of legacy system .

Bus may include a path that permits communication among the exemplary components of the device. Processor may include a processor a microprocessor or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . ROM may include a ROM device or another type of static storage device that may store static information and instructions for execution by processor . Storage device may include a magnetic and or an optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator to input information to the device such as a keyboard a button a mouse a pen a microphone voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator including a display one or more light emitting diodes LEDs a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables the device to communicate with other devices and or systems.

As further shown in storage device may include a GENSS program . As will be described in greater detail below GENSS program may include software that provides screen scraping capability based on an XML Instruction file.

The device depicted in may perform certain operations relating to screen scraping. The device may perform these operations in response to processor executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a physical or logical memory device and or carrier wave. The software instructions may be read into main memory from another computer readable medium such as storage device . The software instructions contained in main memory may cause processor to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows exemplary components of screen scraping system in other implementations screen scraping system may contain fewer different or additional components than depicted in . In still other implementations one or more components of screen scraping system may perform some or all of the tasks described as being performed by one or more other components of screen scraping system .

It will be appreciated that GENSS program may include other modules not illustrated that aid in screen scraping a system such as legacy system . For example GENSS program may include a host integration interface such as a standard or enhanced Terminal Emulation Application Programming Interface API interface or some other type of suitable host interface.

Reader module may include an XML reader such as a Java XML reader. Reader module may read XML instructions from an XML file such as the XML Instruction file. Reader module may also include an XML parser such as a Java XML parser. For example the XML parser may be a Java API for XML Processing JAXP . In other instances the XML parser may be a Document Object Model DOM parser or a Simple API for XML SAX parser. The XML parser may parse the XML from the XML Instruction file. For example reader module may parse the XML into XML document objects.

Scraper module may provide screen scraping operations for a system such as legacy system . In one implementation scraper module may perform various screen scraping operations based on the parsed XML document objects. For example scraper module may interpret the parsed XML document objects as instructions that correspond to screen scraping. For example scraper module may perform reads and writes as well as more sophisticated operations normally associated with programming languages such as control flow statements and conditional statements. For example scraper module may perform screen scraping operations based on XML IF statements XML WHILE loop statements XML DO WHILE loop statements XML FOR loop statements and or XML SWITCH block statements.

Scraper module may also send emulated keystrokes to move from one screen to another screen on legacy system and or to write to legacy system . In one implementation the emulated keystrokes may be based on KeyDown keystrokes and KeyPress keystrokes. For example a KeyDown keystroke may include an ENTER keystroke or programmed function keystrokes such as F1 through F12 keystrokes to move from one screen to another screen. A KeyPress keystroke may include a character data keystroke such as a keystroke associated with a standard alphanumeric character on a keyboard. A KeyPress keystroke may be associated with a writing operation.

Additionally scraper module may perform various verifications during screen scraping. For example scraper module may perform value comparisons between a value e.g. a character string contained in the XML Instruction file and a value e.g. a character string output from legacy system . In this way scraper module may verify that various screen scraping operations between scraper module and legacy system correspond to for example a sequence in the XML Instruction file. An example of a verification command is provided below.

As previously mentioned scraper module may perform various screen scraping operations such as read write and control flow statements based on XML instructions contained in the XML Instruction file. An XML Instruction may include for example start and end tags and elements. In one implementation the elements may include arguments corresponding to a screen scraping operation. For example scraper module may perform read and write operations based on arguments such as column and row positions and or length indicators. The column and row positions may identify a display location corresponding to the screen of legacy system . Scraper module may read and or write information according to the display location.

In one example an XML statement may include among other things the arguments of column 2 and row 5. In this instance scraper module may perform a display matrix calculation based on these arguments to position itself to read and or write from this display location. In addition the XML statement may include an argument such as length 5. Scraper module may read and or write for a length of five 5 starting from the display location corresponding to the column and row arguments. In this regard an XML statement may include various arguments and or other information that may be interpreted by scraper module to perform the corresponding screen scraping operation. Furthermore extracted data during run time may be utilized by scraper module to perform various screen scraping operations.

In view of the above scraper module may perform various screen scraping operations. Scraper module may scrape a single screen multiple screens and or linked screens based on the XML Instruction file. In addition scraper module may utilize data extracted from one screen to access one or more other screens. Despite the screen scraping operations specifically mentioned it is to be understood although not specifically described that additional screen scraping operations may be performed.

Output module may perform various processes to generate an Output file. For example when scraper module completes the instructions contained in the XML Instruction file output module may convert the extracted data from legacy application to form an Output file. Output module may convert the extracted data into any number of formats such as XML HTML etc. The Output file may provide a user interface to the data and assets residing on legacy system . That is a user of screen scraping system may utilize for example an XML Output file when accessing managing etc. the data associated with legacy application .

Although illustrates exemplary functional components within GENSS program in other implementations fewer additional and or different functional components than those depicted in may be employed. In still other implementations one or more functional components may be operable within one or more different modules described above.

In Block the systems may be set up for a screen scraping procedure. For example a client device may include GENSS program . The XML Instruction file may be loaded onto the client device e.g. screen scraping system and or may be stored in storage device . The client device may be connected e.g. via link to a host device e.g. legacy system . The connection may be for example wired or wireless and or via a network. The host device that includes the host application may run the host application to be scraped.

Depending on the systems involved various host interfaces may be employed that include one or more communication and emulation protocols. For example a standard Terminal Emulation API interface such as IBM Standard 32 bit High Level Language Application Programming Interface HLLAPI may be employed. Alternatively an enhanced Terminal Emulation API interface such as an Extended EHLLAPI may be employed. A client host screen scraping session may be established and a client host dialog may be executed as described herein.

In Block the system may be screen scraped based on the XML Instruction file. For example in one implementation GENSS program may perform various screen scraping operations based on the XML Instruction file as described herein on a host device e.g. legacy system . In addition to read and write screen scraping operations GENSS program may perform more sophisticated operations such as reading from one screen and utilizing that data as input to scrape another screen. During run time the XML Instruction file may for example extract data from the host device e.g. legacy system in an interactive manner. Thus the XML Instruction file may not be a static file. That is for example extracted data during run time may be written into the XML Instruction file which in turn may be read to perform a subsequent screen scraping operation etc.

In Block an XML Output file may be generated. For example in one implementation GENSS program may generate the XML Output file based on the extracted data from the screen scraping operations. GENSS program may convert the extracted data to form a corresponding XML Output file. The XML Output file may operate on the client device such as screen scraping system .

Although illustrates exemplary operations for screen scraping in other implementations fewer additional or different operations may be performed. For example in Block the Output file may be of a different format such as an HTML Output file or some other suitable format.

In line an XML declaration of the version of XML may be stated. Line may begin with a start tag i.e. Screen followed by an element i.e. name E1SCID that provides a reference for GENSS program to the screen that is to be scraped. In line GENSS program may input an ENTER command into legacy system . In line the Status command may verify that the previous command i.e. the ENTER command was correct. In this example GENSS program may position itself at column row for a value comparison. The value comparison may occur between the output string at column row of legacy application and the string contained in the XML Instruction file stated in line which is SONET CARRIER DISPLAY E1SCID . Also in line a length indicator length may correspond to the length of the string including spaces. If the values corresponding to the strings match then GENSS program may know that the ENTER command was the correct command. If the values do not match then GENSS program may know that the ENTER command was not the correct command.

In line a write command WriteField may be called and a reference string name SCID may be indicated. The reference string may provide a reference for the developer. Further in line the XML statement may include column row and or length arguments. The column and length arguments may position GENSS program to write the string NBM. The length argument may provide GENSS program with a number of characters to be written. In one example the string NBM may be provided during run time. Similarly line may provide another write command. A reference string name DISPLAY may be indicated and may be proceeded by column row and length arguments. GENSS program may write the string SG beginning at the indicated position.

In line a read command ReadField may be called. A reference string name FAC TYPE may be indicated and may be proceeded by column row and length arguments. The arguments may position GENSS program to read from legacy application at the indicated position. In lines through GENSS program may execute an IF statement. In this example GENSS program may position itself at column row and may check whether legacy application outputs a value corresponding to the string DISPLAY STS. If so in line GENSS program may write SG at a location corresponding to column row with length . In line the end tag Screen may be indicated.

Although illustrates an exemplary XML Instruction file in other implementations the XML Instruction file may include fewer different or additional types of XML instructions and or tags elements etc.

The foregoing description of implementations provides illustration but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the teachings. The foregoing description however provides a new architecture to improve the performance of screen scraping while reducing development and maintenance time.

In addition while a series of blocks has been described with regard to a process illustrated in the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that aspects described herein may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects does not limit the invention. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware can be designed to implement the aspects based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the invention. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification.

No element act or instruction used in the present application should be construed as critical or essential to the implementations described herein unless explicitly described as such. Also as used herein the article a an and the are intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise. As used herein the term and or includes any and all combinations of one or more of the associated list items.

