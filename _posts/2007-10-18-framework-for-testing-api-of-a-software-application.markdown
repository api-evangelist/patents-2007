---

title: Framework for testing API of a software application
abstract: A test executor for testing an application programming interface of a software application includes a plurality of invokers, a mapper/converter, and a comparer. The plurality of invokers includes a software application invoker and a database application invoker. The software application invoker is adapted to communicate with a software application through an application programming interface of the software application while the database application invoker is adapted to communicate with a database application through an application programming interface of the database application. The mapper/converter is in communication with the plurality of invokers. The mapper/converter converts results from at least one of the software application invoker and the database application invoker into a common data format. The comparer is in communication with the mapper/converter and compares the results in the common data format to assess the functionality of the application programming interface of the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08091072&OS=08091072&RS=08091072
owner: Microsoft Corporation
number: 08091072
owner_city: Remond
owner_country: US
publication_date: 20071018
---
Information such as line of business information is often stored in databases on a host system such as a corporate server. In order to access such information one of many database applications e.g. Siebel SAP CRM ERP etc. may be employed. While such database applications are readily available the average user often finds such applications difficult to use as a result of the average user s unfamiliarity with the applications interface.

Software developers have addressed this issue by creating software applications with familiar interfaces that access the information stored in the database. However there is a need for a test methodology to ensure the accuracy of these software applications.

An aspect of the present disclosure relates to a test executor for testing an application programming interface of a software application. The test executor includes a plurality of invokers a mapper converter and a comparer. The plurality of invokers includes a software application invoker and a database application invoker. The software application invoker is adapted to communicate with a software application through an application programming interface of the software application while the database application invoker is adapted to communicate with a database application through an application programming interface of the database application. The mapper converter is in communication with the plurality of invokers. The mapper converter converts results from at least one of the software application invoker and the database application invoker into a common data format. The comparer is in communication with the mapper converter and compares the results in the common data format from the mapper converter to assess the functionality of the application programming interface of the software application.

Another aspect of the present disclosure relates to a method for testing an application programming interface of a software application. The method includes reading a test case data file into a test executor invoking a plurality of invokers including a software application invoker and a database application invoker in accordance with the test case data file and comparing the results returned from the software application invoker and the database application invoker.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Reference will now be made in detail to the exemplary aspects of the present disclosure that are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like structure.

Referring now to an exemplary computing network system generally designated suitable for use with the present disclosure is shown. In the subject embodiment the computing network system includes a computing device generally designated and a host device generally designated . It will be understood however that the scope of the present disclosure is not limited to the computing network system having a computing device and a host device . The computing device and the host device can take the form of any of one or more of a plurality of communication devices . Such communication devices include but are not limited to mobile devices such as cellular phones and personal digital assistants PDAs and computer systems such as laptops desktops servers and mainframes.

A communication network provides direct or indirect communication paths between the computing device and the host device . In the subject embodiment the communication network includes but is not limited to local area networks personal area networks wide area networks satellite networks or the Internet. Communications between components in the computing system network can be done through wired or wireless technologies.

Referring now to typical elements of the computing network system are shown schematically. In the subject embodiment the computing device includes an input output device e.g. keyboard mouse voice input device touch input device display speakers printer etc. a processing unit storage media generally designated and a network communications device .

The storage media can be volatile memory e.g. RAM non volatile memory e.g. ROM flash memory etc. or a combination of the two. In the subject embodiment the storage media includes an operating system and one or more applications .

The host device includes a host input output device e.g. keyboard mouse voice input device touch input device display speakers printer etc. a host processing unit host storage media generally designated and a host network communications device .

The host storage media can be volatile memory e.g. RAM non volatile memory e.g. ROM flash memory etc. or a combination of the two. In the subject embodiment the host storage media includes a host operating system and host applications .

In the subject embodiment the host device further includes some form of computer readable media such as a data storage device for storing information. The data storage device can include but is not limited to any of one or more of memory storage technology e.g. RAM ROM EEPROM flash memory etc. optical storage technology e.g. CD ROM digital versatile disks DVD etc. or magnetic storage technology e.g. magnetic cassettes magnetic tape magnetic disk storage etc. .

A database is stored on the data storage device . In the subject embodiment the database includes line of business LOB information related to the operations of a business such as accounting supply chain management and resource planning applications. Examples of such information include without limitation accounting information e.g. billing days on hand etc. human resources information e.g. employee names dates of hire etc. manufacturing information e.g. inventory suppliers defective parts per million etc. marketing information e.g. customers pricing information etc. product information e.g. parts lists design versions etc. etc. It will be understood however that the scope of the present disclosure is not limited to the database including LOB information.

Database applications are used to access the information stored in the database . Typically database applications are stored on the host device and include an application programming interface API through which software applications stored on either the computing device or the host device can request information.

Referring now to a test framework for testing and validating software applications will be described. In the subject embodiment the test framework includes a test executor generally designated . The test executor controls the testing and validating of the API of the software application which is used for requesting information from a database application . The test executor is in communication with the database application and the software application which is also in communication with the database application .

In the embodiment shown in the database application is an LOB application such as SAP Siebel Customer Relationship Management CRM Enterprise Resource Planning ERP or Supply Chain Management SCM . It will be understood however that the database application is not limited to being an LOB application.

In the embodiment shown in the software application that requests LOB information from the LOB application is an Office Business Application OBA . The OBA uses applications within MICROSOFT OFFICE e.g. Outlook Word Excel etc. as front end applications to request LOB information from the LOB application . The use of applications within MICROSOFT OFFICE as front end applications is beneficial since the interface is familiar to the average user. The front end applications make requests for LOB information through the API of the OBA which then communicates with the LOB application through the API of the LOB application .

In one embodiment the OBA communicates with the LOB application through a connectivity solution pack CSP . The CSP is a supplemental software package that provides enhancements to the OBA . In one embodiment the CSP is installed in order to establish communication between the OBA and the LOB application through the API of the LOB application . It will be understood however that the scope of the present disclosure is not limited to the software application being an OBA or to the OBA communicating with the LOB application through the CSP .

Referring now to the test executor performs various test functions such as loading and executing test case data files invoking components of the test executor converting results from the software application and or LOB application based on the test case data files and comparing and logging the results of the software application and results obtained directly from the LOB application . To perform these functions the test executor includes test components such as an executor interface a plurality of invokers generally designated a mapper converter a comparer and a results logger .

Referring now to an exemplary schematic of the test components of the test executor will be described. In one embodiment the test executor communicates with external applications such as a test harness through the executor interface . The test harness includes at least one test case data file having a plurality of test case parameters conditions under which the software application can be run. Different test harnesses or test case data files can be used to test different software applications or to test different functionalities of the software application . The executor interface of the test executor provides a common interface for any test harness .

In one embodiment the executor interface loads a single test case data file from the test harness . In another embodiment the executor interface loads a test suite which contains multiple test case data files from the test harness . In the subject embodiment the test case data files are provided to the executor interface of the test executor in an extensible markup language XML file format. It will be understood however that the scope of the present disclosure is not limited to test case data files being provided to the test executor in XML file formats.

While some test case data files are loaded by the test executor from the test harness the test executor can include a test case library having predefined test case data files. In one embodiment the predefined test case data files provide testing parameters conditions to test different operations of the software application such as create read update delete query etc. It will be understood however that the scope of the present disclosure is not limited to the test executor including predefined test case data files.

After the test case data file is read from the test harness the test executor calls a test case schema and passes the parameters conditions of the test case data file to the test case schema. In the subject embodiment the test case schema is programmed in XML Schema. It will be understood however that the scope of the present disclosure is not limited to the test case schema being programmed in XML Schema as other languages for expressing schemas such as Document Type Definition DTD RELAX NG etc. can be used.

After receiving the parameters conditions of the test case data file the test case schema validates the test case data file. To validate the test case data file the test case schema checks if the test case data file conforms to criteria established in the test case schema. If the test case data file conforms to the criteria of the test case schema the test case schema provides a testing sequence which is then executed by the test executor to test the software application . In an exemplary embodiment the testing sequence includes the steps of invoking one or more of the invokers mapping and converting the results of the invokers comparing results of the invokers and logging the results.

Referring now to the steps of the testing sequence provided by the test case schema will be described. In the subject embodiment the test executor invokes the invokers after validating the test case data file and reading the testing sequence from the test case schema. In the subject embodiment there are two types of invokers . One type of invoker is a software application invoker e.g. Business Data Catalog BDC invoker Workflow WF invoker etc. while the other type of invoker is a database application invoker . In the subject embodiment the database application invoker is an LOB invoker although it will be understood that the scope of the present disclosure is not limited to the database application invoker being an LOB invoker.

The software application invoker submits a request to the software application that is consistent with the test case data file provided by the test harness . The software application then executes the request and returns a result which the software application obtained from the LOB application . For example the software application invoker can request the first name and last name for business contacts stored in the LOB information on the database . The software application then executes that request and returns information from the LOB application relating to the first name and last name of the business contacts.

The LOB invoker submits a command which is consistent with the test case data file provided by the test harness directly to the LOB application . The LOB application then executes the command and returns a result. For example the LOB invoker can request the first name and last name for business contacts stored in the LOB information on the database . The LOB application then executes that request and returns the information relating to the first name and last name of the business contacts to the LOB invoker .

In the example above the invokers are returning two sets of results. One set is coming from the software application which is querying the LOB application and the other set is coming directly from the LOB application . The purpose for the two sets of results from the invokers will be described subsequently.

Each set of results from the invokers is stored in a common file format. In the subject embodiment and by way of example only each set of results from the invokers is stored as an XML node object.

In the subject embodiment the software application invokers and the LOB invokers are part of the same base class. As a result the test executor can be easily adapted to include additional invokers by adding the new invokers to the base class. It will be understood however that the scope of the present disclosure is not limited to the invokers being part of the same base class.

An exemplary test case schema is provided below. The following exemplary test case schema evaluates the API of the software application e.g. OBARead and the LOB application e.g. CUSTOMER READ with respect to a read function. The test case schema provided below utilizes the software application invoker and the LOB invoker .

Referring now to the results from the invokers are sent to the mapper converter . In the embodiment shown in only the results from the LOB invoker are sent to the mapper converter . In this embodiment the mapper converter converts the results from the LOB invoker so that the results from the LOB invoker are in a similar common data format as the results from the software application invoker . For example the software application invoker may return results pertaining to the first and last names of business contacts in the following format 

In the embodiment shown in only the results from the software application invoker are sent to the mapper converter . In this embodiment the mapper converter converts the results from the software application invoker so that the results are in a similar common data format as the results from the LOB invoker . In the example above the mapper converter would convert John to John and Doe to Doe.

In the embodiment shown in both of the results from the software application invoker and LOB invoker are sent to the mapper converter . In this embodiment the mapper converter converts the results from the software application invoker and the LOB invoker into some third type of data format. For example in the example above the mapper converter can convert John to John and John to John.

The mapper converter uses a mapping file having a mapping schema to make the above conversions. The mapping schema describes each of the fields e.g. etc. that are returned by the software application and the LOB application and how those fields of the software application relate to the fields of the LOB application . For example in the example above the mapping schema would equate from the software application with from the LOB application . While this example shows a simple mapping scheme the mapping schema is also capable of complex mapping schemes.

Complex mapping schemes are used when one of the software application or the LOB application returns a concatenated field which is made up of multiple single fields while the other returns only single fields. For example in the embodiment shown in if the software application returns

With the results of the software application invoker and the LOB invoker in a similar common data format the results are sent to the comparer . The comparer checks if the converted results returned from the software application and the LOB application are the same. If the converted results are the same the software application is retrieving the correct LOB information from the LOB application and therefore the API of the software application is functioning properly. If however the converted results are not the same the API of the software application may be improperly functioning.

The results logger logs the results of the comparer . In the subject embodiment the results logger is capable of logging results to a console a file XML node object or to Motif. It will be understood however that the scope of the present disclosure is not limited to the results logger logging results to a console a file XML node object or to Motif.

Referring now to an exemplary method for testing the software application that requests LOB information from the LOB application will be described. In step the test executor gets the test case data file and reads that file. As previously described the test case data file can be provided by the test harness but the scope of the present disclosure is not limited to the test case data file being provided by the test harness .

In step the test executor invokes the invokers which are needed to execute the test conditions in the test case data file. As previously described there are two types of invokers the software application invoker and the LOB invoker . In step the test executor receives results from the invokers based on the test parameters conditions in the test case data file.

After receiving the results from the invokers the test executor reads the mapping file having the mapping schema in step . Using the mapping schema the test executor converts the results from the invokers with the mapper converter in step .

In the subject embodiment the test executor makes a determination in step as to whether the test executor can make a comparison of results. If the test executor has received only one set of results from the invokers the test executor invokes the invokers in step in order to receive the other set of results. If the test executor has at least two sets of results those results can be compared in step .

In step the results logger of the test executor logs the results from the comparer . In step the test executor determines if all the test cases have been executed. If all the test cases have been executed the test executor exits in step . If however there are test cases that still need to be executed the test executor returns to step and gets and reads the next test case.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

