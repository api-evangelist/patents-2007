---

title: Speech-enabled content navigation and control of a distributed multimodal browser
abstract: Speech-enabled content navigation and control of a distributed multimodal browser is disclosed, the browser providing an execution environment for a multimodal application, the browser including a graphical user agent (‘GUA’) and a voice user agent (‘VUA’), the GUA operating on a multimodal device, the VUA operating on a voice server, that includes: transmitting, by the GUA, a link message to the VUA, the link message specifying voice commands that control the browser and an event corresponding to each voice command; receiving, by the GUA, a voice utterance from a user, the voice utterance specifying a particular voice command; transmitting, by the GUA, the voice utterance to the VUA for speech recognition by the VUA; receiving, by the GUA, an event message from the VUA, the event message specifying a particular event corresponding to the particular voice command; and controlling, by the GUA, the browser in dependence upon the particular event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862475&OS=08862475&RS=08862475
owner: Nuance Communications, Inc.
number: 08862475
owner_city: Burlington
owner_country: US
publication_date: 20070412
---
The field of the invention is data processing or more specifically methods systems and products for speech enabled content navigation and control of a distributed multimodal browser.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. A multimodal browser typically includes a user agent for each mode of user interaction provided by the multimodal browser. Each user agent provides the functionality for interacting with a user in a particular modality. For example a graphical user agent of a multimodal browser may provide the functionality for interacting with a user through a graphical user interface GUI by processing user input through GUI elements and displaying output on the GUI. A voice user agent of a multimodal browser may provide the functionality for interacting with a user through a voice user interface by recognizing speech input and synthesizing speech output. Because the visual mode of user interaction has historically been the dominate mode of user interaction the graphical user agent of a multimodal browser typically coordinates the user interaction among all the user agent providing a multimodal experience to a user.

Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. The multimodal browser processes visual markup with a graphical user agent and processes voice markup with a voice user agent. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Multimodal browsers may be categorized generally as local browsers or distributed browsers. A local multimodal browser is a multimodal browser for which all user agents operate on the same computer. For example in a local multimodal browser having a graphical user agent and a voice user agent the functionality for processing both visual markup and voice markup of a multimodal application is provided by same computing device. A distributed multimodal browser is a multimodal browser for which the user agents operate on at least two computers. For example in a distributed multimodal browser having a graphical user agent and a voice user agent the functionality for processing both visual markup and voice markup of a multimodal application is provided by two separate computing devices. Distributed multimodal browsers are often utilized on small multimodal devices because such devices typically do not have the computer resources needed to run both a graphical user agent and a visual user agent simultaneously.

As mentioned above a multimodal browser typically provides speech enabled user interaction. Such speech enablement is typically organized into two categories. The first category is speech enabling the content of a multimodal application. Speech enabling the content of a multimodal application may include for example synthesizing the text of an X V page for playback through a speaker of a multimodal device. The second category is speech enabling content navigation and control of a multimodal browser. Speech enabling content navigation and control of a multimodal browser may include for example allowing a user to navigate the links of an X V page using voice commands. Speech enabling content navigation and control of a multimodal browser may also include for example allowing a user to open a new window or tab in a multimodal browser using voice commands.

Local multimodal browsers are routinely able to perform both categories of speech enablement because the voice user agent is available locally to provide voice services such as speech recognition and speech synthesis to the graphical user agent. The ability to perform both categories of speech enablement is not however provided by current distributed multimodal browsers. Distributed multimodal browsers may speech enable the content of a multimodal application using standard protocols developed for the operation of a distributed multimodal browser across a network such as for example the protocols specified by the Open Mobile Alliance and by the Internet Engineering Task Force. Distributed multimodal browsers however typically cannot perform speech enabled content navigation and control because the information needed to speech enable the interface provided by a graphical user agent is not known a priori by a voice user agent. Because current protocols and distributed multimodal browsers do not address this aspect of speech enablement readers will appreciate that room for improvement exists to speech enable content navigation and control of a distributed multimodal browser.

Methods systems and products are disclosed for speech enabled content navigation and control of a distributed multimodal browser the distributed multimodal browser providing an execution environment for a multimodal application the distributed multimodal browser including a graphical user agent and a voice user agent operatively coupled to the graphical user agent the graphical user agent operating on a multimodal device supporting multiple modes of user interaction including a voice mode and one or more non voice modes the voice user agent operating on a voice server including transmitting by the graphical user agent a link message to the voice user agent the link message specifying voice commands that control the distributed multimodal browser the link message also specifying an event corresponding to each voice command receiving by the graphical user agent a voice utterance from a user the voice utterance specifying a particular voice command transmitting by the graphical user agent the voice utterance to the voice user agent for speech recognition by the voice user agent receiving by the graphical user agent an event message from the voice user agent the event message specifying a particular event corresponding to the particular voice command specified by the voice utterance and controlling by the graphical user agent the distributed multimodal browser in dependence upon the particular event.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. Speech enabled content navigation and control of a distributed multimodal browser in this example is implemented with a multimodal application operating on a multimodal device . The multimodal application of is composed of at least one X V page that specifies instructions for rendering content to a user through various modes of user interaction. The multimodal device supports multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application . The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices .

The distributed multimodal browser in the example of is a set of software modules that together provide an execution environment for the multimodal application . The distributed multimodal browser of includes a graphical user agent that provides functionality for interaction between the user and the multimodal application through a visual mode. The distributed multimodal browser of also includes a voice user agent that provides functionality for interaction between the user the multimodal application and the graphical user agent through a voice mode. In the example of the graphical user agent operates on the multimodal device and the voice user agent operates on a voice server . Although the user agents operate on separate computers the graphical agent is operatively coupled to the voice user agent . The operative coupling may be implemented with an application programming interface API a voice service module or a VoIP connection as explained more detail below.

The distributed multimodal browser in the example of is improved for speech enabled content navigation and control according to embodiments of the present invention. The distributed multimodal browser of provides speech enabled content navigation and control according to embodiments of the present invention as follows The graphical user agent transmits a link message to the voice user agent . The link message specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. The graphical user agent receives a voice utterance from a user that specifies a particular voice command. The graphical user agent transmits the voice utterance to the voice user agent for speech recognition by the voice user agent . The graphical user agent then receives an event message from the voice user agent that specifies a particular event corresponding to the particular voice command specified by the voice utterance. In dependence upon the particular event specified in the event message the graphical user agent controls the distributed multimodal browser such as for example by navigating content of the multimodal application or by administering a graphical user interface provided by the graphical user agent .

Readers will note that the voice user agent receives a voice utterance and a link message from the graphical user agent and in return provides the graphical user agent with an event message specifying a particular event. According to embodiments of the present invention the distributed multimodal browser of also provides speech enabled content navigation and control as follows The voice user agent receives the link message from the graphical user agent . The voice user agent receives the voice utterance from the graphical user agent . The voice user agent determines the particular event in dependence upon the link message and the voice utterance. The voice user agent transmits the event message to the graphical user agent . The event message specifies the particular event specified by the voice utterance.

To support the voice user agent in providing voice services to the graphical user agent and the multimodal application the voice user agent of includes a VoiceXML interpreter . The VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions and other data from a multimodal application typically in the form of a VoiceXML element and accepts link messages default voice dialogs and other data from a graphical user agent. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The link messages typically include a VoiceXML element that specifies one or more voice commands along with events corresponding to each voice command using element attributes grammars and semantic interpretation scripts that advise the VoiceXML interpreter which events to activate based on a particular voice utterance specifying a voice command. The VoiceXML interpreter administers such dialogs and link elements by processing the dialog and link instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . Because the VoiceXML interpreter typically only processes VoiceXML elements within a FIA and a VoiceXML interpreter typically only initiates a FIA when the VoiceXML interpreter receives a voice dialog the graphical user agent may provide the default VoiceXML dialog to the VoiceXML interpreter to activate a FIA for processing elements in link messages.

As mentioned above VoiceXML dialogs and link elements typically include grammars. A grammar communicates to the ASR engine the words and sequences of words that currently may be recognized. In the example of a grammar includes grammar rules that advise an ASR engine or a voice interpreter which words and word sequences presently can be recognized. Grammars for use according to embodiments of the present invention may be expressed in any format supported by an ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a VoiceXML interpreter which words presently can be recognized. In the example above rule expansions includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a VoiceXML interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush or tom and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

A multimodal device on which a multimodal application operates is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also providing more than one mode of output such as graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art a multimodal application may refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. The voice user agent of includes a speech engine . The speech engine of is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine.

The voice user agent of also includes a voice server application . The voice server application of is a set of computer program instructions capable of operating a voice server in a system that is configured for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. The voice server application of provides voice recognition services for multimodal devices by accepting requests for speech recognition and VoiceXML processing from the graphical user agent for the graphical user agent itself or on behalf of the multimodal application . The voice server application returns to the graphical user agent speech recognition and VoiceXML processing results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation and so on. The voice server application typically acts as an intermediary between the graphical user agent and the other components of the voice user agent by accepting requests from the graphical user agent encapsulated in messages and returning to the graphical user agent messages into which voice service responses are packaged.

As shown in the speech engine the VoiceXML interpreter and voice server application of the voice user agent is installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that contains only a graphical user agent and does not contain its own voice user agent is said to implement a thin multimodal client or simply a thin client because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice user agent operating on a voice server located remotely across a network from the thin client. In contrast a multimodal device that contains all the user agents of a multimodal browser is said to implement a thick multimodal client or thick client because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for voice services across a network from a remote voice server.

A multimodal application in this example provides speech for recognition and text for speech synthesis to the speech engine of the voice user agent through the VoiceXML interpreter of the voice user agent . The VoiceXML interpreter of is installed remotely with respect to the multimodal device across a data communications network in a voice user agent operating on a voice server . The multimodal application provides dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the VoiceXML interpreter of the voice user agent and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application.

The VoiceXML interpreter provides grammars speech for recognition and text prompts for speech synthesis to the speech engine and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. In a thin client architecture the VoiceXML interpreter is located remotely from the multimodal client device in a voice server . An API for the VoiceXML interpreter however is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition semantic interpretation results and text and voice prompts to and from the VoiceXML interpreter on the voice server .

The use of these four example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to a remote voice user agent which includes an ASR engine and a VoiceXML interpreter and receiving and playing speech prompts and responses from the voice user agent may be improved to function as a multimodal device according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a voice user agent to provide voice services to other user agents of a distributed multimodal browser . The voice user agent of that operates on the voice server includes a speech engine that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention is a data communications data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of also includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices X V markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. A multimodal application in a multimodal device then upon receiving from the web sever an X V markup document as part of a multimodal application may execute speech elements by use of a VoiceXML interpreter and speech engine of the voice user agent located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for speech enabled content navigation and control of a distributed multimodal browser according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers which are computers that is automated computing machinery that provide speech recognition speech synthesis and other voice services. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server .

Stored in RAM is voice user agent which is a set of modules of computer program instructions capable of providing functionality for interaction between a user a multimodal application and a graphical user agent through a voice mode. The voice user agent includes a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. The voice server application of provides voice recognition services for multimodal devices by accepting requests for speech recognition and VoiceXML processing from the graphical user agent for the graphical user agent itself or on behalf of a multimodal application. The voice server application returns to the graphical user agent speech recognition and VoiceXML processing results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation and so on. The voice server application typically acts as an intermediary between the graphical user agent and the other components of the voice user agent by accepting requests from the graphical user agent encapsulated in messages and returning to the graphical user agent messages into which voice service responses are packaged.

As an intermediary the voice server application provides text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications. Voice server application also provides speech enabled content navigation and control of the multimodal browser by accepting link messages and voice utterances that specify voice commands and events from a graphical user agent and returning particular events each event corresponding to a voice command to the graphical user agent for controlling the distributed multimodal browser. Voice server application may be implemented as a web server implemented in Java C or another language that supports speech enabled content navigation and control of a distributed multimodal browser according embodiments of the present invention.

The voice user agent in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and synthesizing human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes a grammar created by a VoiceXML interpreter in dependence upon predictive texts for a predictive text event. The speech engine also includes a lexicon and a language specific acoustic model . The language specific acoustic model is a data structure a table or database for example that associates Speech Feature Vectors with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in a human language. The lexicon is an association of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The voice server application in this example is configured to receive from a multimodal device located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out speech enabled content navigation and control of a distributed multimodal browser the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector SFV . An SFV may be defined for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

In the example of the voice user agent also includes a VoiceXML interpreter . The voice server application passes speech along to the ASR engine for recognition through a VoiceXML interpreter . The VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions and other data from a multimodal application typically in the form of a VoiceXML element and accepts link messages default voice dialogs and other data from a graphical user agent. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The link messages typically include a VoiceXML element that specifies one or more voice commands along with events corresponding to each voice command using element attributes grammars and semantic interpretation scripts that advise the VoiceXML interpreter which events to activate based on a particular voice utterance specifying a voice command. The VoiceXML interpreter administers such dialogs and link elements by processing the dialog and link instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . Because the VoiceXML interpreter typically only processes VoiceXML elements within a FIA and the FIA is typically only initiated when the VoiceXML interpreter receives a voice dialog the graphical user agent may provide the default VoiceXML dialog to the VoiceXML interpreter to activate a FIA for processing elements in link messages.

The exemplary voice server of is useful in a system for speech enabling content navigation and control according to embodiments of the present invention. Such a system may operate generally for speech enabling content navigation and control according to embodiments of the present invention as follows A graphical user agent transmits a link message to the voice user agent . The link message specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. The graphical user agent receives a voice utterance from a user. The voice utterance specifies a particular voice command. The graphical user agent transmits the voice utterance to the voice user agent for speech recognition by the voice user agent . The graphical user agent then receives an event message from the voice user agent . The event message specifies a particular event corresponding to the particular voice command specified by the voice utterance. The graphical user agent controls the distributed multimodal browser in dependence upon the particular event.

Readers will note that the voice user agent receives a voice utterance and a link message from a graphical user agent and in return provides the graphical user agent with an event message specifying a particular event. According to embodiments of the present invention the voice user agent of also provides speech enabled content navigation and control as follows The voice user agent receives a link message and a voice utterance from a graphical user agent. The voice user agent then determines a particular event in dependence upon the link message and the voice utterance. The voice user agent transmits the event message to the graphical user agent. The event message specifies the particular event specified by the voice utterance.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application VoiceXML interpreter speech engine including ASR engine and TTS Engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture ISA buses and Peripheral Component Interconnect PCI buses.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. Speech enabled content navigation and control of a distributed multimodal browser in this example is implemented with a multimodal application operating on a multimodal device . The multimodal application of is composed of at least one X V page that specifies instructions for rendering content to a user through various modes of user interaction.

The distributed multimodal browser in the example of is a set of software modules that together provide an execution environment for the multimodal application . The distributed multimodal browser of includes a graphical user agent that provides functionality for interaction between the user and the multimodal application through a visual mode. The distributed multimodal browser of also includes a voice user agent that provides functionality for interaction between the user the multimodal application and the graphical user agent through a voice mode. In the example of the graphical user agent operates on the multimodal device and the voice user agent operates on a voice server . Although the user agents operate on separate computers the graphical agent is operatively coupled to the voice user agent . The operative coupling may be implemented with an application programming interface API a voice service module or a VoIP connection as explained more detail below.

The distributed multimodal browser in the example of is improved for speech enabled content navigation and control according to embodiments of the present invention. The distributed multimodal browser of provides speech enabled content navigation and control according to embodiments of the present invention as follows The graphical user agent transmits a link message to the voice user agent that specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. The graphical user agent receives a voice utterance from a user that specifies a particular voice command. The graphical user agent transmits the voice utterance to the voice user agent for speech recognition by the voice user agent . The graphical user agent then receives an event message from the voice user agent that specifies a particular event corresponding to the particular voice command specified by the voice utterance. In dependence upon the particular event specified in the event message the graphical user agent controls the distributed multimodal browser such as for example by navigating content of the multimodal application or by administering a graphical user interface provided by the graphical user agent .

Readers will note that the voice user agent receives a voice utterance and a link message from the graphical user agent and in return provides the graphical user agent with an event message specifying a particular event. According to embodiments of the present invention the distributed multimodal browser of also provides speech enabled content navigation and control as follows The voice user agent receives the link message from the graphical user agent . The voice user agent receives the voice utterance from the graphical user agent . The voice user agent determines the particular event in dependence upon the link message and the voice utterance. The voice user agent transmits the event message to the graphical user agent . The event message specifies the particular event specified by the voice utterance.

In the example of the multimodal device supports multiple modes of interaction including a voice mode and one or more non voice modes. The exemplary multimodal device of supports voice with a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The example multimodal device of may support non voice modes of user interaction with keyboard input mouseclicks a graphical user interface GUI and so on as will occur to those of skill in the art.

In the example of the voice user agent includes a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured for speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. The voice server application of provides voice recognition services for multimodal devices by accepting requests for speech recognition and VoiceXML processing from the graphical user agent for the graphical user agent itself or on behalf of the multimodal application . The voice server application returns to the graphical user agent speech recognition and VoiceXML processing results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation and so on. The voice server application typically acts as an intermediary between the graphical user agent and the other components of the voice user agent by accepting requests from the graphical user agent encapsulated in messages and returning to the graphical user agent messages into which voice service responses are packaged.

As an intermediary the voice server application provides text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications. Voice server application also provides speech enabled content navigation and control of the multimodal browser by accepting link messages and voice utterances that specify voice commands and events from a graphical user agent and returning particular events each event corresponding to a voice command to the graphical user agent for controlling the distributed multimodal browser. Voice server application may be implemented as a web server implemented in Java C or another language that supports speech enabled content navigation and control of a distributed multimodal browser according embodiments of the present invention.

In addition to the voice sever application the voice user agent also includes a speech engine with an ASR engine a grammar a lexicon a language specific acoustic model and a TTS engine as well as a Voice XML interpreter that includes a form interpretation algorithm . VoiceXML interpreter interprets and executes a VoiceXML dialog received from the multimodal application and provided to VoiceXML interpreter through voice server application . Input to VoiceXML interpreter may originate from the multimodal application implemented as an X V client running remotely in the distributed multimodal browser on the multimodal device or from the graphical user agent running remotely on the multimodal device . The VoiceXML interpreter administers such input dialogs and other VoiceXML instructions by processing the instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

VoIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VoIP protocols. VoIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VoIP. The two most popular types of VoIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VoIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application through the multimodal browser an API and a voice services module then packages the digitized speech in a recognition request message according to a VoIP protocol and transmits the speech to voice server through the VoIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions and other data and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications providing responses to HTTP requests from multimodal browsers running on multimodal devices.

The voice server application receives speech for recognition and VoiceXML instructions from the graphical user agent and passes the speech and instructions through API calls to VoiceXML interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

In the example of the graphical user agent is operatively coupled to the voice user agent . In this example the operative coupling between the graphical user agent and the voice user agent is implemented with a VoIP connection through a voice services module . The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by the graphical user agent to access the voice user agent . Through the voice services module the graphical user agent provides dialogs and speech for recognition to a VoiceXML interpreter and receives in response voice prompts and other responses including events that correspond to voice commands issued by the user according to embodiments of the present invention. The VoiceXML interpreter in turn utilizes the speech engine for speech recognition and synthesization services.

In the example of the voice services module provides data communications services through the VoIP connection and the voice server application between the multimodal device and the voice user agent . The API is the same API presented to applications by voice user agent when the voice user agent is installed on the multimodal device in a thick client architecture. So from the point of view of a graphical user agent calling the API the graphical user agent is calling the voice user agent directly. The data communications functions of the voice services module therefore are transparent to graphical user agent that calls the API .

Speech enabled content navigation and control of a distributed multimodal browser of a multimodal application according to embodiments of the present invention is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention.

The example multimodal device of includes several components that are structured and operate similarly to parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system . The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Stored in RAM in this example is a multimodal application operating in a distributed multimodal browser on a multimodal device . The distributed multimodal browser provides an execution environment for the multimodal application . The multimodal application of is composed of at least one X V page that specifies instructions for rendering content to a user through various modes of user interaction. The multimodal device supports multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application . The voice mode may be implemented using the sound card microphone and speaker . Non voice modes may be implemented using other input output devices such as keyboards and display screens on the multimodal devices .

Stored in RAM in this example is a graphical user agent . The graphical user agent of provides functionality for interaction between a user and the multimodal application through a visual mode. The graphical user agent of also includes a set of computer program instruction that support speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. The graphical user agent of operates generally for supporting speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention as follows The graphical user agent transmits a link message to the voice user agent that specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. The graphical user agent receives a voice utterance from a user that specifies a particular voice command. The graphical user agent transmits the voice utterance to the voice user agent for speech recognition by the voice user agent . The graphical user agent then receives an event message from the voice user agent that specifies a particular event corresponding to the particular voice command specified by the voice utterance. In dependence upon the particular event specified in the event message the graphical user agent controls the distributed multimodal browser such as for example by navigating content of the multimodal application or by administering a graphical user interface provided by the graphical user agent .

Readers will note that a voice user agent receives a voice utterance and a link message from the graphical user agent and in return provides the graphical user agent with an event message specifying a particular event. According to embodiments of the present invention such a voice user agent of operates generally for speech enabled content navigation and control as follows The voice user agent receives the link message and a voice utterance from the graphical user agent . The voice user agent determines a particular event corresponding to a voice command specified in the voice utterance in dependence upon the link message and the voice utterance. The voice user agent transmits the event message to the graphical user agent . The event message specifies the particular event specified by the voice utterance.

As mentioned above the graphical user agent is operatively coupled to the voice user agent . To implement the operative coupling between the graphical user agent and the voice user agent the RAM in this example stores a voice services module . The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by the graphical user agent to access the voice user agent operating on a voice server. Through the voice services module the graphical user agent provides dialogs link messages and other data to a voice user agent and receives in response prompts event messages and other data.

The multimodal device in the example of is remotely connected to a voice server through data communications network . Because the voice user agent operates in the remote voice server the multimodal browser in this example is referred to a distributed multimodal browser. The multimodal device of is therefore an example of a so called thin client architecture. 

For further explanation sets forth a flow chart illustrating an exemplary method of speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. Speech enabled content navigation and control of a distributed multimodal browser in this example is implemented with a multimodal application composed of at least one X V page . The multimodal application operates on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode may be implemented in this example with audio output through a speaker and audio input through a microphone. Non voice modes may be implemented by user input devices such as for example a keyboard and a mouse.

In the example of the distributed multimodal browser provides an execution environment for a multimodal application . The distributed multimodal browser of includes a graphical user agent that provides functionality for interaction between a user and the multimodal application through a visual mode of user interaction. The distributed multimodal browser of also includes a voice user agent that provides functionality for interaction between a user the multimodal application and the graphical user agent through a voice mode of user interaction. In the example of the graphical user agent operates on the multimodal device and the voice user agent operates on a voice server . Although the user agents operate on separate computers the graphical user agent is operatively coupled to the voice user agent . The operative coupling may be implemented with an application programming interface API a voice service module and a VoIP connection as described above.

The method of includes determining by the graphical user agent whether the multimodal application specifies a VoiceXML dialog. The graphical user agent may determine whether the multimodal application specifies a VoiceXML dialog according to the method of to determine whether the voice user agent will be executing a Form Interpretation Algorithm FIA when the graphical user agent transmits a link message to the voice user agent as discussed below. If the voice user agent is not executing a FIA when the graphical user agent transmits the link message to the voice user agent then the voice user agent will not be able to process the VoiceXML element contained in the link message and therefore not able to voice enable control of the distributed multimodal browser .

The graphical user agent may determine whether the multimodal application specifies a VoiceXML dialog according to the method of by identifying whether the multimodal application contains a VoiceXML element. A VoiceXML element contains dialog instructions for presenting information and collecting data from a user. If the multimodal application contains a VoiceXML element then the multimodal application specifies a VoiceXML dialog. If the multimodal application does not contain a VoiceXML element then the multimodal application does not specify a VoiceXML dialog.

The method of includes transmitting by the graphical user agent the specified VoiceXML dialog to the voice user agent if the multimodal application does specify the VoiceXML dialog. The graphical user agent may transmit the specified VoiceXML dialog to the voice user agent according to the method of by storing the specified VoiceXML dialog in the page source field of a load source message and transmitting the load source message along with an execute form message to voice user agent through the operative coupling between the graphical user agent and the voice user agent . A load source message and an execute form message may implemented using the CMD LOAD SRC and CMD EXEC FORM respectively specified in the Internet Draft of the Distributed Multimodal Synchronization Protocol DMSP promulgated by the Internet Engineering Task Force. As specified in the DMSP the CMD LOAD SRC message includes a page source field which is a string containing a conforming VoiceXML 2.0 document.

The method of also includes transmitting by the graphical user agent a default VoiceXML dialog to the voice user agent if the multimodal application does not specify the VoiceXML dialog. The default VoiceXML dialog represents a VoiceXML dialog that is provided to the voice user agent to active a FIA in the voice user agent . The default VoiceXML dialog may be specified using VoiceXML element. An example of a default VoiceXML dialog may include the following exemplary VoiceXML dialog 

The graphical user agent may transmit a default VoiceXML dialog to the voice user agent according to the method of by storing the default VoiceXML dialog in a load default form message and transmitting the load default form message to voice user agent through the operative coupling between the graphical user agent and the voice user agent . For example consider the following exemplary load default form message 

The exemplary load default form message above includes five fields. The Message Type field stores the message type of the exemplary load default form message. The Message Subtype field stores the message subtype of the exemplary load default form message. The Correlation field stores the message s sequence number to match the command message with a corresponding response message. The Form Source field stores a string containing a VoiceXML element specifying the default VoiceXML dialog. The Base URI field stores a string containing a Uniform Resource Identifier URI used to resolve local references in the default VoiceXML dialog. Readers will note that the exemplary default VoiceXML dialog above and the exemplary load default form message are for explanation only and not for limitation.

The method of also includes subscribing by the graphical user agent to events from the voice user agent using a subscription message . The subscription message represents a request by a graphical user agent to receive certain events from a voice user agent. The graphical user agent may subscribe to events from the voice user agent according to the method of by encoding identifiers for events of interest in a subscription message and transmitting the subscription message to the voice user agent through the operative coupling between the graphical user agent and the voice user agent . An event of interest to a graphical user agent may include an event instructing the graphical user agent to open a new window or tab on a GUI to navigate to a document specified by a hyperlink in the multimodal application to open a menu on a GUI of the graphical user agent or any other events as will occur to those of skill in the art. An event identifier for an event of interest to the graphical user may be specified as a string using dot notation. Consider for example an event instructing the graphical user agent to navigate to a chapter document specified by a hyperlink of the current page in the multimodal application. The identifier for such an event may be specified as follows 

When multiple events of the same type are of interest to the graphical user agent the graphical user agent may specify the events using wildcard characters such as for example . The following string specifies all events instructing the graphical user agent to navigate to a document specified by a hyperlink in the multimodal application 

As mentioned above the graphical user agent may encode identifiers for events of interest in a subscription message. For example consider the following exemplary subscription message identified as add string event listener 

The exemplary add string event listener message above includes five fields. The Message Type field stores the message type of the exemplary load default form message. The Message Subtype field stores the message subtype of the exemplary load default form message. The Correlation field stores the message s sequence number to match the command message with a corresponding response message. The Target Node URI field stores a string containing the URI of the VoiceXML element that may produce the events of interest or stores a to subscribe to all string events. The Event field stores identifiers for events of interest as a string using dot notation. Readers will note that the exemplary add string event listener message is for explanation only and not for limitation.

The method of includes transmitting by the graphical user agent a link message to the voice user agent . The link message of represents a message that links voice commands for controlling a distributed multimodal browser with events used to process the voice commands. The link message of specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. For example the link message may link the voice command browser new window with the event identified by the identifier command.new.window. The graphical user agent may transmit a link message to the voice user agent according to the method of by storing a VoiceXML link element that specifies relationships between voice commands and events into the link message and passing the link message to the voice user agent through the operative coupling between the graphical user agent and the voice user agent .

In the example of the link message includes a VoiceXML link element. The VoiceXML link element may specify the relationships between voice commands and events. For example consider the following exemplary VoiceXML link element 

The exemplary VoiceXML link element above includes an exemplary grammar that specifies various voice commands for controlling a distributed multimodal browser. Using the exemplary grammar above a speech engine may recognize the following voice commands 

Using semantic interpretation scripts in the exemplary grammar above the exemplary VoiceXML link element above associates an event with each voice command. As the voice user agent processes the grammar the voice user agent builds an event identifier for a particular event that matches voice command spoken by a user. The event identifiers associated with each event in the exemplary VoiceXML link element above are as follows 

As mentioned above the graphical user agent may store a VoiceXML link element that specifies relationships between voice commands and events into the link message . An example of a link message may include the following exemplary link message 

The exemplary link message above includes five fields. The Message Type field stores the message type of the exemplary load default form message. The Message Subtype field stores the message subtype of the exemplary load default form message. The Correlation field stores the message s sequence number to match the command message with a corresponding response message. The Source field stores a string containing the VoiceXML element that specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. The Document URL field stores the Uniform Resource Locator of the document to which the Voice XML link element is to be added. If the Document URL field is empty then the Voice XML link element is added to the last document specified by the CMD LOAD SRC message or CMD LOAD URL which the graphical user agent sent to the voice user agent in accordance with the Distributed Multimodal Synchronization Protocol. Readers will note that the exemplary VoiceXML link element and the exemplary link message are for explanation only and not for limitation.

The method of includes receiving by the graphical user agent a voice utterance from a user. The voice utterance of represents digitized human speech provided to the graphical user agent by a user of a multimodal device. In the example of the voice utterance specifies a particular voice command for controlling the distributed multimodal browser such as for example browser go back browser go forward browser jump to Next Page and so on. The graphical user agent may acquire the voice utterance from a user through a microphone and a soundcard installed in the multimodal device. The soundcard may encode the voice utterance in a suitable format for storage and transmission using any CODEC as will occur to those of skill in the art.

The method of also includes transmitting by the graphical user agent the voice utterance to the voice user agent for speech recognition by the voice user agent . The graphical user agent may transmit the voice utterance to the voice user agent for speech recognition by the voice user agent according to the method of through the operative coupling between the graphical user agent and the voice user agent . That is the graphical user agent may transmit the voice utterance to the voice user agent for speech recognition by the voice user agent according to the method of using a function exposed by an API of a voice services module installed on the multimodal device.

The method of includes receiving by the graphical user agent an event message from the voice user agent . The event message of specifies a particular event corresponding to the particular voice command specified by the voice utterance . The event message specifies the particular event as a string using dot notation as discussed above. An example of an event message may include the following exemplary event message 

The exemplary event message above includes four fields. The Message Type field stores the message type of the exemplary load default form message. The Message Subtype field stores the message subtype of the exemplary load default form message. The Correlation field stores the message s sequence number to match the command message with a corresponding response message. The Event field stores an event identifier that specifies the particular event as a string using dot notation. For example if a graphical user agent transmits a voice utterance specifying a voice command browser go back then the graphical user agent may receive an event message having a value of command.back in the Event field. Readers will note that the exemplary event message above is for explanation only and not for limitation.

The method of also includes controlling by the graphical user agent the distributed multimodal browser in dependence upon the particular event . The graphical user agent may control the distributed multimodal browser in dependence upon the particular event by executing a set of actions based on the event identifier received for a particular event in the event message . The set of action executed by the graphical user agent to control the distributed multimodal browser may be contained in a function that receives an event identifier as a parameter such as the following exemplary function 

The exemplary processEvent function above processes the event specified by the value of the EventID parameter. Using the exemplary processEvent function above the graphical user agent may control the distributed multimodal browser according to computer program instructions specified in the definition of the exemplary processEvent function. Depending on the event specified by the EventID parameter the graphical user agent may for example open a new window for browsing content open a new tab for browsing content or jump to content specified by a hyperlink in the document and so on. In such a manner the graphical user agent may control the distributed multimodal browser according to the method of by administering a graphical user interface for the distributed multimodal browser in dependence upon the particular event or by navigating content of the multimodal application in dependence upon the particular event .

For further explanation sets forth a flow chart illustrating a further exemplary method of speech enabled content navigation and control of a distributed multimodal browser according to embodiments of the present invention. Speech enabled content navigation and control of a distributed multimodal browser in this example is implemented with a multimodal application composed of at least one X V page . The multimodal application operates on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode may be implemented in this example with audio output through a speaker and audio input through a microphone. Non voice modes may be implemented by user input devices such as for example a keyboard and a mouse.

In the example of the distributed multimodal browser provides an execution environment for a multimodal application . The distributed multimodal browser of includes a graphical user agent that provides functionality for interaction between a user and the multimodal application through a visual mode of user interaction. The distributed multimodal browser of also includes a voice user agent that provides functionality for interaction between a user the multimodal application and the graphical user agent through a voice mode of user interaction. In the example of the graphical user agent operates on the multimodal device and the voice user agent operates on a voice server . Although the user agents operate on separate computers the graphical user agent is operatively coupled to the voice user agent . The operative coupling may be implemented with an application programming interface API a voice service module and a VoIP connection as described above.

The method of includes receiving by the voice user agent a VoiceXML dialog from the graphical user agent . The VoiceXML dialog represents a VoiceXML dialog specified by the multimodal application or a default VoiceXML dialog provided by the graphical user agent . The voice user agent may receive a VoiceXML dialog from the graphical user agent according to the method of by extracting the VoiceXML dialog from a message received from the graphical user agent and processing the VoiceXML dialog using a Form Interpretation Algorithm FIA as discussed above. Because receiving a VoiceXML dialog causes the voice user agent to activate a FIA and the FIA processes VoiceXML elements readers will note that receiving a VoiceXML dialog from the graphical user agent prepares the voice user agent to process the VoiceXML link element included in the link message described below.

The method of also includes receiving by the voice user agent a subscription message from the graphical user agent . The subscription message represents a request by a graphical user agent to receive certain events from a voice user agent. The voice user agent may receive the subscription message from the graphical user agent according to the method of through the operative coupling between the graphical user agent and the voice user agent . An example of the subscription message may include the add string event listener message described above with reference to .

The method of includes setting up by the voice user agent a subscription in dependence upon the subscription message . The voice user agent may set up a subscription according to the method of by extracting the event identifiers for events of interest to the graphical user interface and associating the event identifiers with an identifier for the graphical user agent in an event registration table .

The method of also includes receiving by the voice user agent the link message from the graphical user agent . The link message of represents a message that links voice commands for controlling a distributed multimodal browser with events used to process the voice commands. The link message of specifies voice commands that control the distributed multimodal browser and specifies an event corresponding to each voice command. For example the link message may link the voice command browser new window with the event identified by the identifier command.new.window. The voice user agent may receive the link message from the graphical user agent according to the method of through the operative coupling between the graphical user agent and the voice user agent .

In the example of the link message includes a VoiceXML link element. The VoiceXML link element may specify the relationship between voice commands and events. For example consider the following exemplary VoiceXML link element 

The exemplary VoiceXML link element above includes an exemplary grammar that specifies various voice commands for controlling a distributed multimodal browser. Using the exemplary grammar above a speech engine may recognize the following voice commands 

Using semantic interpretation scripts in the grammar the exemplary VoiceXML link element above associates an event with each voice command. As the voice user agent processes the grammar the voice user agent builds an event identifier for a particular event that matches voice command spoken by a user. The event identifiers associated with each event in the exemplary VoiceXML link element above are as follows 

As part of receiving the link message according to the method of the voice user agent may obtain the VoiceXML link element by extracting the VoiceXML link element from the link message and may process the VoiceXML link element according to an FIA of the voice user agent .

The method of includes receiving by the voice user agent the voice utterance from the graphical user agent . The voice utterance of represents digitized human speech provided to the graphical user agent by a user of a multimodal device. In the example of the voice utterance specifies a particular voice command for controlling the distributed multimodal browser such as for example browser go back browser go forward browser jump to Next Page and so on. The voice user agent may receive the voice utterance from the graphical user agent according to the method of through the operative coupling between the graphical user agent and the voice user agent .

The method of also includes determining by the voice user agent the particular event in dependence upon the link message and the voice utterance . The voice user agent may determine the particular event in dependence upon the link message and the voice utterance according to the method of by processing the voice utterance along with the VoiceXML link element included in the link message such as for example the exemplary VoiceXML link element illustrated above. The voice user agent may process the voice utterance along with the VoiceXML link element included in the link message by providing the voice utterance and a grammar in the VoiceXML link element to a speech engine for speech recognition and extracting an identifier for the particular event from the results of the speech engine stored in an ECMAScript data structure.

An ECMAScript data structure useful for storing the results of the speech engine may include for example the application variable array application.lastresult . ECMAScript data structures represent objects in the Document Object Model DOM at the scripting level in an X V page of a multimodal application. The application.lastresult array holds information about the last recognition generated by a speech engine for the voice user agent . The application.lastresult is an array of elements where each element application.lastresult i represents a possible result through the following shadow variables 

Referring back to the exemplary VoiceXML link element above readers will note that the semantic interpretations scripts build a string using dot notation that represents an identifier for a particular event. The resulting string is stored in a shadow variable labeled c3n for the application.lastresult .interpretation variable. As such the eventexpr attribute of the exemplary VoiceXML link element directs the voice user agent to retrieve the event identifier for the particular event specified in the voice utterance from the application.lastresult .interpretation.c3n variable.

The method of includes transmitting by the voice user agent the event message to the graphical user agent . The event message of specifies the particular event corresponding to the particular voice command specified by the voice utterance . The voice user agent may transmit the event message to the graphical user agent according to the method of by inserting the event identifier for the particular event contained in the application.lastresult .interpretation.c3n variable in the event message and transmitting the event message to the graphical user agent through the operative coupling between the graphical user agent and the voice user agent . Readers will note that transmitting by the voice user agent to the graphical user agent the event message that specifies the particular event corresponding to the particular voice command specified by the voice utterance advantageously allows a distributed multimodal browser to provide speech enabled content navigation and control of the distributed multimodal browser.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for speech enabled content navigation and control of a distributed multimodal browser. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

