---

title: Securing inter-process communication
abstract: A request to post a message to a destination is intercepted in an operating environment in which processes communicate via message queues. Message content and requester information associated with the request is evaluated to determine whether the message is to be posted. The message is posted to a message queue of the destination if the message is to be posted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863151&OS=08863151&RS=08863151
owner: Red Hat, Inc.
number: 08863151
owner_city: Raleigh
owner_country: US
publication_date: 20070815
---
Embodiments of the present invention relate to inter process communication and more specifically to securing inter process communication in operating environments in which processes communicate using message queues.

In certain operating environments processes communicate with one another using message queues e.g. to pass event information . Almost all communication that occurs in such operating environments is processed through one or more message queues. One operating environment in which processes communicate using message queues is the Microsoft Windows operating system. Wine Wine is not an emulator and ReactOS are additional examples of operating environments in which message queues are used to pass messages.

Requestor may generate a message to be processed by destination . The message may include a message number and provided parameters. However the message does not include context information e.g. the context in which the message was created or requestor information about the process that created the message.

The message is sent to a message poster . The message poster receives the message and posts it to a message queue of destination . Once other messages preceding the received message in the message queue are processed the message processor processes the received message.

One problem with the conventional operating environment is that none of the message poster destination or message processor authenticate messages back to their source requester . Therefore the message processor does not know where the message originated or how it arrived at the message queue .

Destination may check message properties to make sure that they include valid e.g. possible values. However many destinations do not thoroughly check messages. Therefore it is possible for requestor to run arbitrary code in the context of destination by sending a message to destination . Where the destination is a process running with administrative privileges e.g. process run by LOCAL SERVICE by SYSTEM by NETWORK SERVICE etc. an ability to run code in the context of destination enables requestor to crash the operating environment to run arbitrary code with administrative privileges e.g. read write privileges or to perform other harmful activities.

Described herein is a method and apparatus for securing inter process communications. In one embodiment a request to post a message to a destination is intercepted. Message content and requestor information associated with the request may be evaluated to determine if one or more posting criteria are satisfied and whether the message is to be posted to a message queue of the destination. The posting criteria may ensure that nefarious processes or other undesirable processes do not gain access to restricted data or privileges. The requestor and the destination may be processes in an operating environment in which processes communicate via message queues.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing computing generating performing displaying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes a machine readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine readable transmission medium electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

In one embodiment the operating environment includes a requestor a message manager a message poster and a destination . The requestor and the destination may be processes running in the operating environment . In one embodiment the requestor and destination are window objects associated with a process or processes. A window object is a data structure used to manage windows and or processes. Each process may have multiple window objects each of which may be represented by a unique window handle. The operating environment may include additional processes each of which may also be requesters or destinations . Therefore the operating environment may include multiple requestors and multiple destinations . Moreover a single process may be both a requestor and a destination . This may occur for example when a process posts a message to another process and receives a message from yet another process. This may also occur if a process posts a message to itself.

In one embodiment the operating environment runs on an individual computing device. In another embodiment the operating environment is part of a distributed computing system in which requester and destination may be processes operating in different computing devices and or different operating environments .

Requestor may generate a message directed to destination . The message may be an integer or any arbitrary string and may include one or more process parameters. In one embodiment requestor then attempts to invoke call and then pass the message to message poster . Requestor may invoke message poster by calling a dynamic link library dll or application programming interface API for message poster . By invoking message poster requestor may also automatically cause message manager to be invoked. In another embodiment requestor may invoke message manager and then send the message to message manager .

Message manager may include a message interceptor a message evaluator and a message store . Once message manager is invoked e.g. when message poster is invoked message interceptor may intercept and or receive a message from requestor . Message interceptor may also receive requestor information along with the message. In one embodiment in which message manager is invoked in the context of requestor the requestor information includes one or both of a process identifier process ID and a thread identifier thread ID of the requestor . In another embodiment in which requestor is from a remote operating device e.g. a device other than a device on which operating environment is running requester information includes one or both of a session identifier session ID and a user identifier user ID of the requestor . Message interceptor may then pass on the message and requester information to message evaluator .

Message evaluator may analyze the message the requester information e.g. thread ID and process ID and destination information e.g. a window handle of destination a thread ID and or process ID associated with the window handle of destination etc. to determine whether to pass the message on to message poster . Message evaluator may be a protected function to minimize security risk. In one embodiment message evaluator is a kernel level module or function which may increase the difficulty of deleting or modifying message evaluator . Tampering of message evaluator may thus be reduced or eliminated.

Message evaluator may apply a number of message posting rules criteria to determine whether to pass on a message to the message poster . Message posting rules may be arranged in a hierarchical fashion such that a second rule may only apply if a first rule is satisfied. Alternatively subsequent rules may only apply if a preceding rule fails to be satisfied. Rules in the hierarchy may also include as part of their definition whether or not to execute successive rules. For example a first rule may specify to execute a second rule if the first rule is satisfied and a third rule if the first rule is not satisfied.

Optimally message posting rules should enable message evaluator to determine whether to pass a message to message poster as quickly as possible and with a minimum amount of overhead e.g. processor and or memory usage . Therefore rules that are quicker to process may be applied before rules that are slower to process. Furthermore rules that filter out a large percentage of messages may be applied before rules that filter out a small percentage of messages. Thus for example a first rule may pass on all messages that are not directed to a destination that has administrative privileges. This rule may be processed without examining process parameters of the message and without examining requestor information. Since most messages will not be directed to a destination with administrative privileges this rule will also filter out a majority of messages. This may minimize processor time used to analyze messages and increase message throughput. Additional message posting rules are described with reference to below.

Referring to based on application of the message posting rules message evaluator may or may not pass on the message to message poster . In one embodiment if message evaluator does not pass the message to the message poster it informs the requestor that the message could not be posted. In another embodiment if the message is not to be posted passed on to message poster and additional message posting rules are satisfied the requestor is terminated. The additional message posting rules may call to terminate the requestor if for example the message is an undocumented message the message includes impermissible or impossible values or the message is being posted in an inappropriate context. If the additional message posting rules are satisfied the requestor may be terminated by the message manager or by a terminator not shown invoked by the message manager .

In one embodiment message evaluator stores information regarding the message destination information and or requestor information in message store . In one embodiment such information is stored for messages that are not passed on to message poster e.g. messages that fail one or more message posting rules . Message store may be used to track refused messages those not passed to message poster and monitor message activity of requester . In one embodiment the message store may also include requestor restriction lists. The restriction lists may restrict a particular requester from posting messages to destinations having administrative privileges. Alternatively the restriction lists may prevent a requester from posting messages to any destination .

Once a message is passed to message poster message poster posts the message to a message queue of destination . A message processor of the destination then processes the message. Before the message is processed destination may examine the provided message parameters to ensure that the message has valid values. In one embodiment a message processor of the destination is a winproc window procedure of a Microsoft Windows operating system process.

Referring to method includes intercepting a request to post a message to a message queue of a destination process block . The request may be intercepted from a requestor process and in one embodiment is intercepted from a method invoked on a window object associated with a requestor process. The message may have been generated by an event of the requester process or by other events in an operating system e.g. an event caused by a key press of a keyboard or a click of a mouse . In one embodiment requestor information is received along with the message.

At block message content and requestor information are evaluated. Evaluating the message content and requestor information may include applying one or more message posting rules criteria to the message content and requestor information. At block a security context e.g. whether destination has administrative privileges of the destination is evaluated. Evaluating the security context of the destination may include applying one or more additional message posting rules. In one embodiment the message content requestor information and security context of the destination are evaluated concurrently. Therefore in some embodiments block and block can be combined or performed in parallel.

At block processing logic determines whether to allow the message to be posted. This determination is made based on the application of the message posting rules to the message content requestor information and or security context of the destination as described in blocks and . In one embodiment if all message posting rules are satisfied the message will be posted. In another embodiment if some of the message posting rules are satisfied the message will be posted. If the message is to be posted the method proceeds to block and the message is posted to a message queue of the destination. If the message is not to be posted the message proceeds to block .

At block processing logic determines whether termination criteria have been satisfied. Examples of termination criteria include an attempt to post an undocumented message an attempt to post a message with impermissible invalid or impossible parameters or an attempt to post a message in an inappropriate context. If some or all termination criteria are satisfied the method proceeds to block and the message requestor is terminated. If no termination criteria are satisfied or not enough termination criteria are satisfied the method proceeds to block and the requester is notified that the message could not be posted. Alternatively if the message is not to be posted the method may end without sending any notification to the requestor.

Referring to method includes intercepting a request to post a message to a message queue of a destination process block . At block the message is checked to determine whether the requestor is the same as the destination. This may occur when a process posts messages to itself and may be determined without examining message contents e.g. process parameters . If the message is being sent to the same process that generated it the method proceeds to block . This allows all processes to post messages to themselves regardless of the message content. If the message is not being sent to the same process that generated it the method proceeds to block .

At block processing logic determines whether the destination has administrative privileges e.g. ability to read write data to start stop or suspend a process as any user etc . Messages generally direct the execution of code in a context of the destination. Therefore a message may direct a destination having administrative privileges to execute code with administrative privileges though the code would not otherwise be executed with administrative privileges. In contrast messages sent to destinations that do not have administrative privileges cannot be granted administrative privileges. Therefore the message will not be able to damage critical system components crash system or subvert security of an operating environment in which the destination is running if the message is not directed to a destination with administrative privileges. If the destination does not have administrative privileges the method proceeds to block . If the destination does have administrative privileges the method proceeds to block .

At block processing logic determines whether the message is outside of a documented range. A list of expected values may be maintained. Messages that do not include a value that is in the list may be assumed to be undesirable or suspicious. Accordingly if the message does not include values within the documented range the method continues to block . If the message does include values within the documented range the method proceeds to block .

At block processing logic determines whether a context of the destination matches the message. For example if the message is a paint message e.g. to display a fish and the destination does not have any visible windows then the context of the destination may not match the message. If the context of the destination does not match the message the method proceeds to block . If the context of the destination does match the message the method proceeds to block . Alternatively if it cannot be determined whether the context of the destination matches the message the method may proceed to block .

At block processing logic determines whether the message includes inappropriate invalid or impossible values. Inappropriate values are values that may not be properly executed by the destination examples of which include invalid pointers pointers to areas of memory that the requester doesn t have permission to access incorrect buffer lengths or offsets etc. Such inappropriate values may cause the destination to crash or cause other harmful effects. If the message includes inappropriate values the method proceeds to block . If the message does not include inappropriate values the method proceeds to block .

At block the message is posted to a message queue of the destination. In one embodiment the message is passed to a message poster that posts the message to the message queue of the destination. At block the requestor is notified that the message could not be posted. Alternatively the message may simply not be posted without notifying the requestor. The method then ends.

Method has been described with a specific hierarchy of message posting rules. However other arrangements of message posting rules may also be used. For example block and block may apply in reverse order to what is shown. Alternatively one or more of the rules illustrated in blocks and may not be used. Additional rules not illustrated herein may also be applied. For example a rule may be applied that will not allow requestors that do not typically interact with a network to post network related messages.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

The machine accessible storage medium may also be used to store data structure sets that define user identifying states and user preferences that define user profiles. Data structure sets and user profiles may also be stored in other sections of computer system such as static memory .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

