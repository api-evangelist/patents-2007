---

title: Type and property definition support for software
abstract: Aspects of the subject matter described herein relate to type and property definition support for software. In aspects, new types can be added to an application model after the software has been created without changing the software. After software is created and embodied in computer code, a new type definition may be received by a user type service. The user type service may then place the new type definition in a data store in which other types native to the software are located. The software may then use the new type definitions and properties associated therewith in queries and in user interfaces provided by the software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321853&OS=08321853&RS=08321853
owner: Microsoft Corporation
number: 08321853
owner_city: Redmond
owner_country: US
publication_date: 20070511
---
When designing a software product software developers typically determine the types of data structures that the software will utilize. These data structures may correspond to screens of user data that may be available in the software product. For example an e mail software product may include data structures that correspond to contacts calendars tasks and so forth. The data structures for the contacts may correspond to certain contact information that the software developers have determined are important to have in the product and may not include other information that is determined to not be important.

When the software is shipped the data types the software can work with may be hard coded in the software and not changeable. To make the software work with new data types a new version of the software that is designed to work with the new data types may be released. This provides very little flexibility for companies to change the data types that a software product may utilize.

Briefly aspects of the subject matter described herein relate to type and property definition support for software. In aspects new types can be added to an application model after the software has been created without changing the software. After software is created and embodied in computer code a new type definition may be received by a user type service. The user type service may then place the new type definition in a data store in which other types native to the software are located. The software may then use the new type definitions and properties associated therewith in queries and in user interfaces provided by the software in conjunction with existing types.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects should be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned previously when shipped most software has a fixed set of data types that the software understands. This may be very limiting to companies value added resellers and end users who may wish to add additional types and or properties to an existing product. Aspects of the subject matter described herein are adapted to address this and other needs.

After shipping a software product it may be desired to extend the contact type for information that may be used in a home contact type . For example a user may desire to add a relationship property to the contact type to obtain the home contact type .

Similarly after shipping a business entity may wish to extend the contact type with properties useful in a business context. For example the business may desire to add organization and priority properties to the contact type to obtain a business contact type .

The instances and are objects that include properties defined by the contact types and respectively. Note that the instances and have additional properties not included in the instance .

In extending the contact type a business or end user may use its own terms e.g. names to describe the new properties. The business may also add additional business logic to for example validate or take advantage of the new properties.

In an embodiment after extending the contact type the end user or business may have the additional data fields corresponding to the new properties of instances of objects defined by the new types displayed on screens that allow a user to update or modify data in the data fields. Furthermore the end user or business may create queries that use the new data properties.

A query may be stored in a query object. A query may specify certain criteria that may be used to locate data. For example a user could create a query to return e mail messages that have not been read business e mail that has been received in the last seven days and so forth. As another example a user could create a query that returns photos that have not been viewed that include images of the user s family. It will be readily understood that the examples above are not exhaustive and that many other queries could be created with various criteria without departing from the spirit or scope of aspects of the subject matter described herein.

A query may be expressed in terms of conditions on properties. For example the priority property of the business contact data structure may be used in a query to find e mails from business contacts having a high priority in the priority property field.

The new properties that are defined in a new type may be simple or complex. Simple properties may include scalar values such as strings numbers dates and so forth. Complex properties may relate to other data structures and or may include a combination of simple properties.

For example a complex property may describe relationship information about two objects. For example a photo image may be stored in a data store. The photo may have been taken by a person represented by a contact object. Furthermore the photo may also include people whom are represented by contact objects. A complex property may indicate a relationship between two objects e.g. a contact and a photo and may specify information about the relationship e.g. the person represented by this contact took this photo or the person represented by this contact is in this photo .

As another example a complex property may describe relationships between home contacts. For example the complex property may indicate that a contact is a child sibling mother or father of another contact. With this relationship information queries such as who are all the children or siblings of this contact or who is the father or mother of this contact may be satisfied.

A native type is a type that is understood by a version of the software product when the version of the software product is created. A non native type is a type that is created after the software product is created. A non native type may also be understood by the software product via the techniques described herein.

In each of the UserType the UserProperty the UserQuery and the UserView describe one or more of the Item and how to set and retrieve data therefrom. The UserType is associated with one or more UserProperties the UserView is associated with zero or more UserProperties and the UserQuery is associated with one or more Conditions .

An Item may include any object that data on a computer readable medium is capable of representing. Some exemplary items include files folders contacts images database objects application data lists sets of data ordered or unordered and the like.

The UserType may describe a superset or subset of the native properties for an Item. An Item such as a contact may include native properties including first name last name and e mail address. A UserType may indicate that all or a subset of the native properties of the contact be included in a new type e.g. business contact and may also indicate new properties e.g. organization and priority to include in the new type.

The UserProperty is a property that is either a composite meaning a calculated value of several native properties or a direct reflection of a property which was present on a native type. A direct reflection of a property that was present on a native type is a property that may be obtained via a relationship between the new type and the native type. For example referring to the Name property of the home contact type is a direct reflection of the Name property of the contact type . The value of the Name property in an instance of an object of the home contact type may be obtained by using a query. In one embodiment this may be performed using a structured query language SQL statement as described in more detail below.

A UserQuery comprises a definition that allows a user to express queries over data in terms of UserTypes and UserProperties . The UserQuery may be composed of one or more Conditions .

The Conditions specify one or more criteria on properties that are to be met before an Item or UserType is returned via a query. The conditions may include various operators including greater than less than equal to not equal to greater than or equal to less than or equal to like not like string comparison operators date comparison operators set operators and the like.

A UserView comprises a type which can be used to represent a logical view over a given UserType. A logical view may describe a subset of the actual properties described by a given type. The UserView may specify a sorting order grouping width of viewing element whether the view is of an element or a collection and so forth.

An object defined by the UserQuery may be associated with one or more objects defined by the UserViews . For example a user may desire to present one set of fields when viewing the results of one query and to present another set of fields when viewing the results of another query. To allow this multiple objects defined by the UserViews may be associated with a single object defined by the UserQuery . For example in a query on e mails one UserView object may specify that the information presented by the query include who the e mail came from the day the e mail was sent and the priority of the e mail. Another UserView object associated with the query may specify that the information presented by the query include who the e mail is from. The UserQuery may indicate that query objects i.e. instances of objects defined by the UserQuery return objects defined by the UserType .

In addition to its other characteristics UserType may include an indication of how to obtain properties e.g. UserProperties from the underlying storage system. In one embodiment the UserQuery may include one or more SQL statements that indicate how to obtain properties from a SQL database. Executing a SQL statement may return all rows or IDs of the rows of the UserType associated with the SQL statement. In another embodiment the UserQuery may indicate a file from which to obtain properties.

Each UserProperty may indicate how to obtain a property when given other data e.g. a row returned by executing a SQL statement above . For example the UserProperty may indicate that the property is calculated based on values in the row or may indicate another SQL statement that uses a value of the row e.g. a key to obtain a value in the same or another table.

In one embodiment each of the services may comprise one or more user or kernel mode processes or threads thereof.

The user view definition service may use a user view type definition e.g. UserView of to create find remove update and otherwise manipulate user view objects. The user view definition service may provide an application programming interface API that exposes the user view definition service s capabilities to other processes e.g. an application program .

The user type service may also use a user view type definition e.g. UserView of and or a user type definition e.g. UserType of to create remove find and otherwise manipulate user types. The user type service may also provide an API that exposes the user type service s capabilities to other processes. To extend the types that a software package is capable of utilizing an end user first party developer i.e. a developer or company that created the software third party developer or the like may create a new type definition and provide the new type definition to the user type service .

The query service may use a query object e.g. defined by UserQuery to query native and user data types according to conditions included in the query object. The query service may display the results according to a user view definition associated with the query object. The query service may also provide an API that exposes the query service s capabilities to other processes.

The user property service may be used to set and obtain properties or related properties of a user property object. In addition the user property service may be used to add delete or change properties for a given user type. The user property service may provide an API that exposes the user property service s capabilities to other processes.

The data store may store the objects type definitions and other data as needed. The data store may comprise a file system database volatile memory such as RAM some combination thereof or other data store and may be distributed across multiple devices. The data store may be external or internal to the device .

The communications mechanism allows the device to communicate with other devices to service queries and or store and retrieve data. The communications mechanism may be a network interface or adapter modem or any other means for establishing communications as described in conjunction with .

It will be recognized that other variations of the device shown in may be implemented without departing from the spirit or scope of aspects of the subject matter described herein. Furthermore components described in conjunction with may be combined and or broken into other components separated in other embodiments. In addition it will be recognized that more fewer or other components may exist on the device without departing from the spirit or scope of aspects of the subject matter described herein.

Turning to at block the actions begin. At block software is created. For example an e mail software product may be created by a set of developers.

At block the software is shipped. Shipped indicates that the software is available for use. In one embodiment shipped includes placing the software on a Web site for download. In another embodiment shipped may include placing the software on a server that is accessible to employees of a company. In yet another embodiment shipped may include placing the software on non volatile computer readable media and physically shipping the media to another location.

At block a definition of a new type is received. This may be done by registering the type with a user type service. For example referring to a user type service receives a definition of a new type from an end user. This definition may be received after the software is already coded. As described above the software may be coded to recognize new types that are created after the software is coded.

At block support for the new type is added without recoding the software. In one embodiment supporting a new type may simply involve extending an application model used by the software to include the new type. An application model includes a set of objects types and methods that the application supports. To support a new type the type definition may be placed in a data store together with other data regarding the application model.

At block business logic associated with the new type may be received. As described previously business logic may for example validate or take advantage of properties in the new type. In one embodiment business logic may correspond to an arbitrary sequence of steps that are taken in conjunction with validating or otherwise acting on data that is intended to update a property. This business logic may also be stored in a data store and may be accessed by the shipped software without recoding the software.

In another embodiment the actions associated with block may be skipped. A user may desire to have an additional property without having any additional business logic associated with the additional property. In this case there is no need to obtain additional business logic.

At block access to the property in the new type is provided. This may be done as described previously through a user interface for example.

Turning to the actions that occur in conjunction with blocks correspond to actions that occur in conjunction with blocks of .

At block a definition of a query that includes the new type is received. For example referring to a query service receives a query definition regarding a new property that was received by the user property service .

At block the definition of the query is stored. For example referring to the query service stores the definition of the query in the data store .

At block the query is executed to obtain data associated with the new type. This may involve evaluating one or more conditions as described previously.

At block the obtained data is displayed according to a view associated with the query. As described previously a view may indicate that a query should return a subset of the properties of a new type. The view may also indicate formatting parameters by which data corresponding to the properties are to be formatted. A query may include data from native types as well as from the new type without departing from the spirit or scope of aspects of the subject matter described herein.

As can be seen from the foregoing detailed description aspects have been described related to type and property definition support for software. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

