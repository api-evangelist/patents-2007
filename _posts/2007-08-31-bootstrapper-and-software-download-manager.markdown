---

title: Bootstrapper and software download manager
abstract: The present invention provides a bootstrapper and download manager for handling the download and installation of one or more software products to a computer. The invention determines system requirements and whether any prerequisite software is required by a software product to be downloaded. Any necessary prerequisite software is installed on the computer and if more than one software product has a shared prerequisite, then the invention recognizes that and prevents downloading multiple ones of the shared prerequisites. Also, in the event of an interruption or error during download, the invention can resume downloading or installation based on the download successfully stored on the local machine without requiring the download all over again. This saves considerable time during the download and install process and enhances user productivity and experience. A download manager provides a user interface to efficiently select from multiple software products for download and negotiate issues such as multiple and different product licenses.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938735&OS=08938735&RS=08938735
owner: Thomson Reuters Global Resources
number: 08938735
owner_city: 
owner_country: CH
publication_date: 20070831
---
The field of the invention relates generally to computer science and the loading or downloading of software including operating systems applications and other units of code into the memory of a computer for execution on the computer. More particularly the present invention relates to a download manager and bootstrapper to select for download one or more software applications or units to confirm software application prerequisites and to improve and make more efficient the installation of software products.

Computers processors and software executing on such devices are increasingly incorporated into more and more components of everyday life and especially with high level code processors and supporting components and operating systems are increasingly versatile. Moreover the speed with which revisions and new versions of software code are published or otherwise made available has resulted in a growing occurrence of users downloading software such as applications over the Internet or other network to update functionality or install fixes that address errors in operation. As part of this process the downloaded software is installed on the target machine. Complications arise when installation errors occur e.g. communication links are severed or other mishaps occur prior to completion of installation. This is increasingly true as networks incorporate or move altogether to wireless communication.

Enterprise wide software distribution or deployment may involve a large number of downloads and installs including updates and service packs and presents particular challenges and involves considerable administrative resources. Remote installation e.g. MSI and EXE software is increasingly popular as a way to more productively manage system wide needs across a large network such as a Windows based network. Client Server architecture for instance facilitates installation and allows access across a network via a browser. Generally the term bootstrapper refers to a software application that is invoked to manage the installation of another software application and its required prerequisite software components. Basic bootstrappers typicaily perform a few checks and then launch a single software application installer e.g. MSI Microsoft Installer file extension installations. Advanced bootstrappers sometimes called chainers have greater capabilities and do more than merely run a single software application installer. An example of a complex bootstrapper is the Microsoft ClickOnce bootstrapper that is included with Microsoft Virtual Studio 2005 and used in deploying Microsoft .NET and other applications. MSBuild is a Microsoft build engine that provides an XML based project file format used to create and edit extensible build solutions. MSBuild may be used to generate a product specific bootstrapper manifests e.g. ClickOnce bootstrapper. MSBuild generates a product specific manifest that is embedded into the bootstrapper binary executable. The manifest is then read by the bootstrapper when it is running.

A need exists for an improved installation technique that will facilitate multiple product installations while minimizing downtime rebooting and other detrimental side effects experienced by the user. In addition when the multiple products to be downloaded have different installation experiences a need exists for a technique to manage coordinate and simplify to the user the overall download and install process and to provide a more reliable resilient installation experience. With the growing number of software applications available to users there is a growing need to streamline the process of downloading desired software. Compounding this problem is code that is often written to run in conjunction with other underlying or prerequisite code. Due to this the process of downloading software may require multiple downloads.

Advanced applications often require multiple installation steps prerequisites and application installation package or packages. Examples of such an application solution or suite are eTools ePractice Aids and SMART ePractice Aids provided by Thomson Tax Accounting. In the process of downloading a solution or multiple set of solutions the managing component analyzes target system information to determine required prerequisites. Often users must halt running instances of existing applications to facilitate download and installation processes. Optionally users may be informed of the need for installation of prerequisites. In addition the installation process may involve dynamically organizing the installation sequence.

One of the problems with existing techniques is that the installation experience across multiple products is often not consistent to the user and is further complicated when involving and viewing multiple license agreements. Different user interfaces result in different user experiences and a complicated download install process. As an example one of the issues with the Microsoft ClickOnce bootstrapper is that if the installation fails for any reason any prerequisites that had not been installed are automatically downloaded again. This can be very frustrating to a user and especially when the user has to experience a second third etc. download of 50 MBytes of software for example again just to try the installation again. There is little control over the ClickOnce bootstrapper and other installation bootstrappers e.g. suppressing reboots returning status codes indicating success failure reboot etc. and keeping the bootstrapper running until all prerequisites and application are installed.

The present invention provides an improved download management function and a bootstrapper capable of efficiently accomplishing software downloads and installation. The invention in various embodiments provides one or more of the following benefits streamlined selection of multiple software product downloads identifying software prerequisites confirming system requirements and existing installed software components identifying shared prerequisites across multiple software product downloads and avoiding unnecessary redundant downloads of software components during installation.

The installation process often involves managing multiple license agreements and providing control over progress indication control of reboot and control of success fail attempts. The present invention handles download and installation which may be for example via CD ROM World Wide Web Internet or other network based installation. The bootstrapper manages what gets installed and in what order. The bootstrapper analyzes the target system for prerequisites requirements and includes APIs Application Programming Interfaces for access from outside applications. Web based product installation is compatible with known platforms such as MSBuild which is used not only to generate product specific bootstrapper manifests but also to automate this process and other processes such as compiling source code and building the installations. Solutions such as Thomson Tax Accounting s eTools make use of these framework tools to automate build from source code.

To address the problem of automatic re download after interrupted or failed installation the present invention first checks to see if the downloaded files are on the machine before re downloading them. As used herein interrupted shall refer to any interruption including failed operations canceled installations and failed download due to a failed connection. In this manner the invention saves time by avoiding unnecessary re downloads and provides a more enjoyable and productive user experience. Normally necessary files are downloaded prior to installation and are downloaded to a shared location. If a download fails then the download restarts with the last file that failed. If an installation fails but download was successfully completed then none of the files have to be downloaded again prior to running the installation again. The bootstrapper of the present invention looks to the location it has assigned for the download to see if the necessary files are present and ready for installation.

One benefit of the present invention is that it provides a more consistent user experience. Another benefit is that it provides a more reliable and resilient installation experience. Another benefit is that it provides for multiple product installations across various and different platforms frameworks and API and toolsets e.g. Microsoft .NET 2.0 Visual Studio 2005 ClickOnce bootstrapper. The invention provides a consistent user interface across multi product download install.

A further benefit of the present invention is that it provides recoverable and resumable downloads in the event of interrupted download or installation. This may greatly reduce the install time associated with loading software such as via CD ROM or over a network. As used herein unless otherwise indicated network is intended to cover a communication connection of devices such as computers PDAs mobile phones and other processing devices and shall include for example Local Area Network LAN Wide Area Network WAN World Wide Web or the Internet. Networks may be wired wireless or a combination of wired and wireless networks. An added benefit is that the invention addresses the piece meal download installation process that presently detracts from the user experience. The present invention provides coordinated control over the download and install process from beginning to end. The invention may be used to support administrative installations to assist in software deployment.

An additional benefit of the present invention is an administrative install capability in which product and prerequisite installations are configured by an administrator for deployment of the product and prerequisite throughout the organization. The administrative installation assists a network administrator by pre configuring an installation prior to deployment so the installation settings are specified for each individual processing device such as a personal computer or mobile telecommunications device.

Although many benefits and features are described as advantages offered by the present invention only a subset of such benefits and features may be used in any given implementation. It should be understood that it is not necessary to utilize all such benefits and features to practice the invention.

In one embodiment the present invention provides a method of installing software comprising commencing installing software on a processing device upon an interruption in the installing step determining whether the software is stored in a memory of the processing device and if the software is stored in the memory of the processing device recommencing installing the software without causing a further download of the software. The method may further comprise presenting for selection a plurality of software products for downloading and installing on the processing device wherein the software comprises selections from the plurality of software products. The method may further comprise determining a first set of prerequisite software associated with a first software product and a second set of prerequisite software associated with a second software product and determining a set of shared prerequisite software comprising prerequisite software common to the first and second sets of prerequisite software. The method may further comprise downloading the shared prerequisite software whereby duplicate downloading of shared prerequisite software is avoided. The method may further comprise prior to commencing installation downloading the software determining that not all of the software was successfully downloaded and prior to recommencing installation re downloading software that was not successfully downloaded while avoiding re downloading at least some of the software that was successfully downloaded.

In another embodiment the invention provides a method for downloading software presenting a plurality of software products available for download downloading and installing at least two software products selected from the plurality of software products determining a set of prerequisite software products associated with the at least two software products for downloading determining a set of shared prerequisite software products common to at least some of the at least two software products and downloading the set of shared prerequisite software products whereby duplicate downloading of shared prerequisite software products is avoided.

The system may further comprise the set of shared prerequisite software products comprising at least one prerequisite software product. The method may further comprise downloading and installing the at least two software products. The method may further comprise after an interruption in installing the at least two software products determining that a portion of the at least two software products is stored in memory and recommencing the installation step without causing a further download of the stored portion of the at least two software products. The method may further comprise downloading a missing portion of the at least two software products whereby the stored portion and the missing portion combine to provide a complete download of the at least two software products sufficient for installation.

In yet another embodiment the invention provides a client device connected to a software source the client device comprising a processor for executing software a memory connected to the processor and adapted to receive and store software for execution by the processor and a bootstrapper adapted to manage the download and installation of software from the software source the bootstrapper comprising a user interface enabling selection of software to be received by and installed on the client device executable code adapted to determine whether selected software is stored in the memory whereby unnecessary downloading of software during installation is avoided.

The device may further comprise the software source is a central server and the client device receives software from the central server via a communication network. The software source may comprise one of a CD ROM a USB flash drive and a memory stick. The memory may comprise a temporary memory for receiving software downloads and a persistent memory for storing installed software. The bootstrapper executable code may determine that a portion of selected software is stored in the temporary memory and the bootstrapper may cause a downloading of unstored portions of the selected software to complete the download for installation of the selected software. The client device may comprise one of a computer a PDA a mobile phone. The client device may be further adapted to configure folders at a specified location at which the software is installed on the client device. The software may be stored in a persistent memory of the client device.

In yet another embodiment the invention provides a method for downloading software the method comprising determining whether at least one prerequisite software associated with a software product to be downloaded is installed on a processing device if the prerequisite software is not installed on the processing device then determining whether the prerequisite software is stored on the processing device if the prerequisite software is not stored on the processing device then downloading and installing the prerequisite software on the processing device and if the prerequisite software is stored on the processing device then installing the stored prerequisite software.

In yet another embodiment the invention provides a bootstrapper for managing the download of software products the bootstrapper comprises a user interface enabling selection of a software product to be installed on a processing device associated with the bootstrapper and executable code adapted to determine whether the software product is stored in a memory of the processing device but is not installed on the processing device.

The present invention will now be described in more detail with reference to exemplary embodiments as shown in the accompanying drawings. While the present invention is described herein with reference to the exemplary embodiments it should be understood that the present invention is not limited to such exemplary embodiments. Those possessing ordinary skill in the art and having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other applications for use of the invention which are fully contemplated herein as within the scope of the present invention as disclosed and claimed herein and with respect to which the present invention could be of significant utility.

With reference to an exemplary set of components typical to a software download and installation process is illustrated generally at as including a target machine one or more prerequisites database applications and tools . The present invention provides a bootstrapper and download manager including a user interface to handle software download and installation onto the target machine . The download and installation process often involves managing multiple license agreements and providing control over progress indication control of reboot control of success fail attempts and more AIP Administrative Installation Point options. AIP is a result of performing an administrative installation. A network administrator then deploys the application and prerequisites for this AIP. The installation process is often via CD ROM Web Internet or other network based installations. The bootstrapper manages what gets installed and in what order and may use such known tools as XML manifest. The bootstrapper analyzes the target system for prerequisites requirements and includes APIs Application Programming Interfaces for access from outside applications. The bootstrapper makes use of the download manager for Web based product installation and is compatible with known platforms such as MSBuild as part of the .NET Framework that allows automation of compiling source code. Solutions such as eTools make use of these framework tools to automate build from source code. MSBuild may be used to generate the manifest that contains data prerequisites and built into bootstrapper executable.

The download manager manages downloads of application components files prerequisites etc. For instance the download manager uses Microsoft BITS Background Intelligent Transfer Service for transferring files from server to target machine and provides download progress information. In one manner the download manager asynchronously transfers files in the foreground or background preserves the responsiveness of other network applications and automatically resumes file transfers after network disconnects and computer restarts.

To avoid the problem of automatic re download after failed installation the bootstrapper first checks to see if the downloaded files are on the machine before re downloading them. This avoids unnecessary re downloads and provides a more enjoyable and productive user experience. Files are downloaded to a shared location. If a download fails the download will restart with the last file that failed. If an installation fails or is otherwise interrupted then none of the files have to be downloaded again prior to running the installation again. In this manner the invention provides recoverable and resumable downloads in the event of interrupted download or installation. This has the effect of greatly reducing the install time associated with loading software such as via CD ROM or over a network. The bootstrapper and download manager may be configured to manage multiple product installations across various and different platforms frameworks and API and toolsets e.g. Microsoft .NET 2.0 Visual Studio 2005 ClickOnce bootstrapper. This avoids the piece meal download installation process that presently detracts from the user experience. The invention provides coordinated control over the download and install process from beginning to end and may be used to support administrative installations to assist in software deployment.

Examples of installations handled by the bootstrapper and download manager of the present invention include over the Internet or other computer network. illustrates one exemplary software and download installation referenced generally by . A target machine is to receive the software download. At step the user selects one or more software products they wish to install onto machine or for that matter it may be some other target machine or group of machines. In one embodiment the bootstrapper only installs to the machine on which the installation manager is running. However during administrative installation the installation files may be copied and configured by the administrator to the AIP directory specified by the administrator. With the AIP directory on the network then the files are copied to the network. An administrative installation does not necessarily install the application and prerequisites to the machine s as it may just configure the installations to ease deployment throughout an organization. The bootstrapper is used to install products that use the bootstrapper . The Custom Installation Manager calls the bootstrapper to install the application and the prerequisites. Product installations that do not use the bootstrapper are managed by the Custom Installation Manager . At step bootstrapper then analyzes the target machine to determine system requirements prerequisites and other desired information. At step the bootstrapper dynamically organizes the installation process. At step the bootstrapper performs and manages the installation of the software onto the machine .

Now with reference to one exemplary software and download installation referenced generally by from the Internet is illustrated. A target machine is to receive the software download. At step the user selects one or more software products they wish to install onto machine or for that matter it may be some other target machine or group of machines. The bootstrapper is used to install products that use the bootstrapper . The Custom Installation Manager calls the bootstrapper to install the application and the prerequisites. Product installations that do not use the bootstrapper are managed by the Custom Installation Manager . At step bootstrapper then analyzes the target machine to determine system requirements prerequisites and other desired information. At step the bootstrapper requests the download manager to download one or more selected applications or other software products including prerequisite products such as selected from step . At step the requested and or prerequisite software is downloaded to a temporary location on the machine or storage available to the machine . Once downloaded at step the bootstrapper is informed that the download is complete and dynamically organizes the installation process. At step the bootstrapper performs and manages the installation of the software onto the machine .

As described the process may employ a custom installation manager which may invoke the bootstrapper. The customer may select from a set of available software products based on existing licenses or arrangements made at the time of the selection and prior to download. In one embodiment the custom installation manager presents the user with a set of software products available for download and the customer user selects the software products to be downloaded and perhaps purchased. The download manager shows the progress of the download of the selected products which may also require a download because the product installation files may not already have been downloaded and the product not already installed. Particulars may depend upon a contract the user or the user s company or employer has with a supplier of software products. Known resources available to facilitate these processes include InstallShield see http www.macrovision.com products Wise http www.wisesolutions.com and Microsoft MSI http msdn2.microsoft.com en us library 2kt85ked VS.80 .aspx.

In addition a multi product installer that is versatile and useful in a variety of scenarios including CD ROM Internet and other network based embodiments may be used and may call upon and use the download manager and bootstrapper. To facilitate description of the inventive techniques and not by way of limitation the following description of the invention is in part in the context of Microsoft .NET 2.0 Visual Studio 2005 and associated known APIs toolsets e.g. ClickOnce bootstrapper. The invention is also described in the context of Thomson eTools E Practice Aids and SMART e Practice Aids SPRE products. It should be understood that the invention is not limited to such environments and has broad applicability. The invention may be used to manage download and install of a variety of different product and is versatile to handle vastly different installation experiences. For example some products require a single MSI installer while other products require the installation of prerequisites such as MDAC Microsoft Data Access Components Windows Installer .NET and SQL Express. The bootstrapper may not be used in the event of single MSI installations but it could. The multi product selector may be used to manage the installation of single MSI installations without the use of the bootstrapper. The single MSI installation may be downloaded using the download manager.

With reference to an exemplary overview of the components comprising an exemplary multi product installer and bootstrapper application is shown. The components include BootstrapperLibrary DLL Download Manager DLL BootstrapperUI DLL InstallChecks DLL and Bootstrapper Resource DLL . The Bootstrapper Resource DLL contains the Bootstrapper manifest such as an XML manifest. The components were designed to be dynamically linked DLL Dynamic Link Library . In this example existing VB6 application may be used to facilitate installation of multiple products from the Internet and all components are DLLs.

In one embodiment the bootstrapper may be adapted from the Microsoft ClickOnce bootstrapper that is included with Visual Studio 2005. In this manner the bootstrapper may be configured to consume existing and future bootstrapper packages that conform to existing package schema without modification. See http msdn2.microsoft.com en us library ms229223 vs.80 .aspx for existing ClickOnce Product and Package schema. In this manner the design can extend the known schema with optional elements to support additional features that the existing schema does not support. In addition to the schema changes the bootstrapper embodiment may be configured to support existing elements in slightly different manners and with additional functionality.

In this exemplary bootstrapper embodiment Table 1 presents schema additions to the existing ClickOnce Product and Package 

In this exemplary bootstrapper embodiment one change to the handling of schema items in the existing ClickOnce Product and Package is EstimatedInstallSeconds attribute. This is an attribute of the Command element and is used as an estimated length in seconds that the default progress should display. If the installation took longer than the estimate then the progress bar would start over and a message displayed below the progress bar indicating that the installation is taking longer than expected. Many installations especially MSI installations show a progress bar. The bootstrapper embodiment thus far described changes how this attribute is handled. If the value of this attribute is 0 zero the default progress bar is not displayed. In this case the appropriate command line arguments should be used in the Arguments attribute to display the installations progress bar.

In this exemplary bootstrapper embodiment additional bootstrapper functionality to the existing ClickOnce Product and Package schema may include the following 1 add support for administrative installations 2 add a single license agreement dialog that allows the user to view and accept the license agreements for all the prerequisites in one dialog 3 support for UI modes silent basic reduced and full and 4 add built in properties e.g. VersionWord and VersionExcel that store the current version of an OS operating system a software application e.g. Word and Excel installed on the PC.

In this exemplary bootstrapper embodiment existing features in ClickOnce Bootstrapper include Verifying Files. Once the required files have been downloaded the Windows Trust Provider Service function WinVerifyTrust is called to ensure that the file is safe to install. For example if a downloaded file does not have a digital signature then the file may be verified using a hash value that is computed when the bootstrapper manifest is generated. WinVerifyTrust searches the file for a signature block also known as a digital signature . The signature block contains information about the author of the file a public key and an encrypted digest of the file s contents. If it finds a signature WinVerifyTrust validates the certificate. The validation process uses the concept of a trust hierarchy each certificate is inspected for a parent certificate until it reaches the root certificate. WinVerifyTrust looks for the root certificate in the system s list of trusted root certificates. If WinVerifyTrust finds the root certificate it inspects each certificate in turn to make sure the certificate is trusted by its parent until the original file certificate is tested. If the certificate is invalid for any reason a message displays indicating a concern about the contents of the file. However the user always has the option to install the file anyway. If the certificate is valid the trust verification service decrypts the digest with the public key and regenerates the digest on the downloaded file. If the two digests don t match the file has been tampered with. Again a warning message displays for the user. The service also displays a warning if it doesn t find any certificate at all. Even if the certificate is valid the user or system administrator may elect to display messages before installing files on a system. The Windows Trust Verification Service actually defines two types of certificates one for commercial developers and one for individual developers. The main differences are in the types of documentation developers must provide to qualify for the certificate and the types of security provided for the developers private keys. Users can display warning messages for files from all commercial developers all individual developers commercial developers not previously encountered individual developers not previously encountered and so on. When the warning message displays the certificate holder may be added to the trust hierarchy so future files from the same source install without warnings. The warning message may display the name of the software the identity of the publisher and the issuing certificate authority so the user can make an informed decision about installing files.

In this exemplary bootstrapper embodiment bootstrapper components include the following. InstallChecksHelper a component that contains common code such as getting the version of the OS Word Excel performing install checks and version comparisons. This component may be a LIB for statically linking with the bootstrapper application and a DLL for dynamically calling from the multi product installer or other applications. Bootstrapper UI is a component that contains the multi item license agreement dialog the dialog to view a single license agreement and default progress bars. This component may be a LIB for statically linking with the bootstrapper application and a DLL for dynamically calling from the multi product installer or other applications. Bootstrapper Library is a component that contains common bootstrapper functionality. This component may be a LIB for statically linking with the bootstrapper application and a DLL for dynamically calling from the multi product installer or other applications. Bootstrapper Application is an EXE component that may statically link the Bootstrapper Library Bootstrapper UI InstallChecksHelper and Download Manager. This component may be used for stand alone application installations e.g. installing from CD ROM.

Download Manager maybe a LIB for statically linking with the bootstrapper application and a DLL for dynamically calling from the multi product installer or other applications. The Download Manager uses the Microsoft Background Intelligent Transfer Service BITS for the physical download of the files. It also provides two UI for displaying the progress of the downloads. The first is a basic UI that shows a single overall progress bar for all the files being downloaded. The second UI is a detailed UI that shows the download progress for each file and an overall progress bar for all the downloads. There is also a silent mode that does not display a UI at all.

The node contains a link to the Prerequisite Package Information. Products that do not have prerequisites will not have this node or this node will be empty. Optionally a hash value may be included and used to verify the download of the prereq package. The bootstrapper downloads all Product Prerequisite Information for selected products with prerequisites. In the embodiment of the Web Multi Product or Multi Select Installer Application WMPIA calls the download manager to download the prerequisite information package for each selected product with prerequisites. The prerequisite information package is a resource DLL but it may be a compressed ZIP file containing the XML prerequisite manifests for each prerequisite required by the product. The WMPIA passes the source the prerequisite package path retrieved in step and the destination path for each product to the download manager. The download manager downloads the prerequisite packages and returns a status for each downloaded prerequisite package. In one manner a hash value is used to verify the file and is passed to the download manager. The download manager receives Source Path Destination Path and Hash optional or public key as described above for each prerequisite package and passes out the status for the download of each prerequisite package.

The package files may be unzipped in a number of different ways. Data is passed between WMPIA and the download manager using an array of structures. For example an array of PRODUCT DOWNLOAD or an array of FILE DOWNLOAD if downloading a set of individual files that do not have a direct relationship to a product. See Table 3.

In the embodiment of the bootstrapper processes prerequisite information for all products with prerequisites. For instance the WMPIA calls the bootstrapper DLL to obtain a list of all the prerequisites to be downloaded and installed. The bootstrapper DLL checks the system requirements for each prerequisite and returns a status indicating whether the system meets the requirements for each of the prerequisites. The WMPIA passes the path to the folder containing the prerequisite manifests or the path to the compressed prerequisite package information file. The bootstrapper DLL returns a list of files to be downloaded including the full path to the download location status indicating whether the system meets the requirements for each prerequisite and a hash or public key to verify the prerequisite installation files once they are downloaded. The bootstrapper DLL receives the path to the folder containing prerequisite manifests or the path to the compressed prerequisite package info file. The bootstrapper DLL outputs the list of prerequisite files to be downloaded along with their path the path to the EULA End User License Agreement may be downloaded with the prerequisite package information status indicating whether the system meets requirements for each prerequisite and an optional hash or public key.

In one example data may be passed between WMPIA and the bootstrapper DLL using the array of structures set forth in Table 4.

In the embodiment of the bootstrapper can allow a user to view license agreements for selected products and prerequisites. For instance the WMPIA displays the license agreement screen. The license agreement screen displays a list of all products or product categories that have unique license agreements. Products with prerequisites will also list the prerequisites that have license agreements. The EULA for the prerequisites will be downloaded as part of the compressed prerequisite package information and paths to the EULA will be returned as part of the process described above. From this screen the user may selectively view each license agreement and accept all license agreements.

In the embodiment of the multi product installer calls the download manager to download all selected products and prerequisites. For instance the WMPIA calls the download manager to download all of the selected products and their prerequisites. The WMPIA passes the source path the destination path and the hash or public key for each product to the download manager. The download manager downloads the files and returns a status for each downloaded product. The download manager receives Source Path Destination Path and Hash optional for each file in each product. The download manager returns the status for the download of each product. The bootstrapper may then pass data between WMPIA and the download manager using an array of structures to successfully downloaded products. The WMPIA then installs all of the selected products that were successfully downloaded and their prerequisites.

With reference to a screen shot illustrates an initial screen presenting a user with an option PPC s e Tools under Tools By Type. When presented with the PPC e Tools page the user may select the Install My e Tools button . Upon selecting button the user is presented with the Installation Instructions page which includes a PPC Product Installer link .

The present invention is not to be limited in scope by the specific embodiments described herein It is fully contemplated that other various embodiments of and modifications to the present invention in addition to those described herein will become apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the following appended claims. Further although the present invention has been described herein in the context of particular embodiments and implementations and applications and in particular environments those of ordinary skill in the art will appreciate that its usefulness is not limited thereto and that the present invention can be beneficially applied in any number of ways and environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present invention as disclosed herein.

