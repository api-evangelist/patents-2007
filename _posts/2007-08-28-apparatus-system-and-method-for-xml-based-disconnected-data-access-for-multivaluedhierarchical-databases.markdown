---

title: Apparatus, system, and method for XML based disconnected data access for multivalued/hierarchical databases
abstract: An apparatus, system, and method are disclosed for providing a client with disconnected data access to a non-relational database. A command module requests non-relational XML data from a non-relational database using an XML mapping in response to a non-relational data request. A fill module receives the non-relational XML data from the non-relational database and populates one or more data access sets with the non-relational XML data. A communications module transmits the one or more data access sets to an integration broker in communication with the integration adapter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386500&OS=08386500&RS=08386500
owner: Rocket Software, Inc.
number: 08386500
owner_city: Newton
owner_country: US
publication_date: 20070828
---
This application is related to U.S. patent application Ser. No. 11 846 473 entitled APPARATUS SYSTEM AND METHOD FOR XML BASED DISCONNECTED DATA ACCESS FOR MULTIVALUED HIERARCHICAL DATABASES and filed on Aug. 28 2007 for Jianfeng Mao which is incorporated by reference herein in its entirety.

This invention relates to disconnected database access and more particularly relates to XML based disconnected database access to multivalued hierarchical databases.

As network use and network sizes increase disconnected database access is becoming increasingly important. When using disconnected access a disconnected client remains disconnected from a data source except during data retrieval from the data source and data writes to the data source. Between data retrieval and data writes the disconnected client may access edit manipulate and update data from the data source in a local cache. Disconnected data access offers scalability and performance benefits over connected access by allowing a higher number of users access to database data simultaneously while decreasing the load on the network and on the database system. Current methods for providing disconnected data access to databases are based on Structured Query Language SQL commands.

These SQL based methods are well suited for common relational databases but are often forced upon less common non relational databases. Non relational databases such as multivalued hierarchical databases often implement SQL or some subset of SQL for compatibility purposes but have other native interfaces or command languages. In order to process an SQL command non relational databases often require normalization or flattening. Databases like multivalued hierarchical databases often violate the first law of normalization by allowing by an element of a database table to contain multiple separate values. Normalization or flattening of a database to satisfy the laws of normalization is inefficient and resource intensive especially if it must occur often. Other non relational databases may not support SQL or even a subset of SQL.

SQL based disconnected access also uses a separate SQL command for each change that a disconnected user makes to the database. Executing a series of SQL commands in a direct sequence is also resource intensive especially for non relational database systems. Because of the limitations of using SQL based disconnected access with non relational databases disconnected access to non relational databases is inefficient and does not currently have the same benefits of disconnected access to relational databases.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method that provide efficient disconnected access to non relational database systems. Beneficially such an apparatus system and method would use a native interface such as XML to access a non relational database system and would use a single network transaction for either a data retrieval from the non relational database system or a data write to the non relational database system.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available disconnected access systems. Accordingly the present invention has been developed to provide an apparatus system and method for providing a client with disconnected data access to a non relational database that overcome many or all of the above discussed shortcomings in the art.

An integration adapter to provide a client with disconnected data access to a non relational database is provided with a plurality of modules configured to functionally execute the necessary steps of providing disconnected data access. These modules in the described embodiments include a command module a fill module a communications module an edit module an update module a conflict module and an Extensible Markup Language XML mapping definition tool.

The command module in one embodiment is configured to request non relational XML data from a non relational database using an XML mapping. In a further embodiment the command module is configured to request the non relational XML data in response to a non relational data request. In a further embodiment the non relational database is configured to store non relational data in a format substantially similar to an XML format. In one embodiment the non relational database comprises a hierarchical database and in a further embodiment the non relational database comprises a multivalued database. In another embodiment the command module is further configured to request the non relational XML data from the non relational database in a single network transaction. In a further embodiment the command module is further configured to request the non relational XML data in response to user input.

In one embodiment the XML mapping is configured to map a data source schema of the non relational database to an XML schema. In another embodiment the XML mapping comprises a non relational database default mapping. In a further embodiment the XML mapping comprises a user defined custom mapping. In one embodiment the XML mapping is stored in the non relational database and in another embodiment the XML mapping is stored in a data file accessible by the non relational database. In a further embodiment the XML mapping is stored in one or more data access sets.

In another embodiment the fill module is configured to receive the non relational XML data from the non relational database and to populate one or more data access sets with the non relational XML data. In one embodiment the one or more data access sets each comprise an ADO.NET DataSet and in another embodiment the one or more data access sets each comprise a Service Data Objects Data Graph.

In one embodiment the communications module is configured to transmit the one or more data access sets to an integration broker in communication with the integration adapter. In another embodiment the one or more data access sets are configured to store a change history comprising the non relational XML data and the one or more changes to the non relational XML data.

In a further embodiment the edit module is configured to receive one or more changes to the non relational XML data from at least one of the one or more data access sets. In one embodiment the one or more changes are made by a user. In a further embodiment the user comprises a remote network user. In one embodiment at least one of the one or more data access sets is configured to send the one or more changes to the edit module in response to user input.

The update module in one embodiment is configured to send the one or more changes in the non relational XML data to the non relational database using the XML mapping. The integration adapter of claim wherein the update module is further configured to send the one or more changes to the non relational database in a single network transaction.

In another embodiment the conflict module is configured to prompt a user with one or more data update options in response to one or more conflicting changes to data in the non relational database. In one embodiment the XML mapping definition tool is configured to assist a user in defining the XML mapping.

A system of the present invention is also presented to provide a client with disconnected data access to a non relational database. The system may be embodied by an integration broker a client and a non relational database adapter. In particular the non relational database adapter in one embodiment includes the modules described above in relation with the integration adapter.

A computer program product of the present invention is also presented for providing a client with disconnected data access to a non relational database. The computer program product in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described integration adapter and system.

A method of the present invention is also presented for deploying computing infrastructure. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described integration adapter and system.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a signal bearing medium may take any form capable of generating a signal causing a signal to be generated or causing execution of a program of machine readable instructions on a digital processing apparatus. A signal bearing medium may be embodied by a transmission line a compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

In one embodiment the integration broker is coupled to the client and the integration adapter facilitating communication between the client and the integration adapter . Other environments clients integration adapters databases or EISs may also be coupled to the integration broker . The integration broker may comprise a server such as a web server an application server or the like. In another embodiment the integration broker may comprise a data access service DAS or the like. The integration broker may translate reformat transform re encode or otherwise alter data between a format usable by the client and a format usable by the integration adapter . Alternatively the integration broker may relay data between the client and the integration adapter without any alterations. In one embodiment the integration broker comprises a server from the WebSphere family of products by International Business Machines Corporation IBM of Armonk N.Y.

The client is an entity in communication with the integration broker . The client may comprise a business application a web browser an EIS a database another integration adapter a development environment a business application or another type of module that is configured to communicate with the integration broker . The client may be resident on the same machine or system as the integration broker or may be in communication with the integration broker over a network such as a local area network LAN or a wide area network WAN . The network may be a corporate intranet the internet or the like. In one embodiment the client is an entity that is suited for disconnected access to a non relational database or EIS such as the non relational EIS . For example the client may be one of many clients that access the non relational EIS and disconnected access may decrease the number of database connections to the non relational EIS or the client may be connected to the integration broker over a slow or expensive connection that makes disconnected access more efficient or economical. In one embodiment the client is in contact with the integration broker during network transactions such as data requests or update requests but is substantially disconnected between network transactions.

In one embodiment the client comprises a disconnected access module . The disconnected access module may be configured to store or otherwise communicate with one or more data access sets. The disconnected access module may provide the user access to the data in the one or more data access sets. The disconnected access module may provide an interface for the user to perform disconnected access actions such as filling the one or more data access sets with data from the non relational EIS editing the data and updating the original data in the non relational EIS . The interface may be a graphical user interface GUI a command line or script interface an application programming interface API or another interface that allows the user to perform disconnected access actions. The disconnected access module may be configured to communicate with the integration broker to access the non relational EIS through the integration adapter such that the disconnected access module can provide the user with disconnected access to the non relational EIS . Alternatively the disconnected access module may communicate with the integration broker through the client .

The integration adapter is also an entity in communication with the integration broker . The integration adapter provides a common interface for other systems clients modules and the like to access the non relational EIS . In one embodiment the integration adapter comprises a disconnected access provider . One example of the disconnected access provider is provided and described in further detail with reference to .

In general the disconnected access provider performs the steps of providing a client with disconnected data access to the non relational EIS . The disconnected access provider may receive a fill request such as a non relational data request from the integration broker request data from the non relational EIS receive the data from the non relational EIS populate one or more data access sets with the data and return the one or more data access sets to the integration broker . In a further embodiment the disconnected access provider may receive an update request from the integration broker the update request comprising one or more changes to the data. The disconnected access provider may update the data in the non relational EIS with the one or more changes.

In one embodiment the non relational EIS comprises one or more non relational databases database systems or the like. The non relational EIS may track and manage data relevant to an enterprise including sales production finance accounting human resources and the like. Non relational database models include hierarchical multivalued network object associative concept oriented multi dimensional star schema and the like. The non relational EIS may comprise databases or database systems that fall under one or more of these or other non relational categories. Non relational database models are not mutually exclusive. In one embodiment the non relational EIS may comprise one or more non relational databases that store data in a format substantially similar to an Extensible Markup Language XML format such as a hierarchical database a multivalued database and the like. Non relational databases do not use a relational database model and often do not satisfy the laws of normalization that restrict the way that data is stored in relational databases.

Hierarchical databases are one type of non relational database. Instead of using a relational model hierarchical databases are organized into hierarchical or tree like structures. Hierarchical databases often use parent child relationships that are usually one to many relationships each parent node may have multiple children but each child node may not have multiple parents. Another type of non relational database a network database allows child nodes to have multiple parents or many to many relationships. Examples of databases using a hierarchical model include Adabas Massachusetts General Hospital Utility Multi Programming System MUMPS or M Greystone Technology MUMPS GT.M IBM Information Management System IMS Cach Metakit Multidimensional Hierarchical MDH Toolkit Unisys Data Management System II DMSII FOCUS and the like. XML may also represent data in a hierarchical format and is well suited for representing data from hierarchical databases.

Multivalued databases are another type of non relational database. Multivalued databases break the first law of normalization by allowing an element of a database table to contain multiple separate values rather than storing the values separately. Some multivalued databases also allow the values to be subdivided into sub values making it possible to store a database table as an element of another database table. As described above multivalued databases may be hierarchical in nature or may include aspects of other database models. Multivalued databases are often referred to as non first normal form NF2 databases nested table databases or post relational databases. Examples of multivalued databases include the Pick Operating System IBM U2 Universe Unidata OpenQM Reality various Online Analytical Processing OLAP databases Microsoft Analysis Services Extended Spread Sheet Database ESSbase MonetDB PI Open and the like. XML is also well suited for representing data from multivalued databases.

In one embodiment the non relational EIS comprises one or more non relational databases and or database systems as described above. In another embodiment the non relational EIS is a multivalued hierarchical database as described above that violates the first law of normalization. In a further embodiment the non relational EIS is configured to import and or export data in an XML format. Because of the hierarchical nature of XML many non relational databases are configured to efficiently import and export data in an XML format while traditional commands languages and the like such as Structured Query Language SQL may be inefficient unsupported or require normalization or flattening of the non relational data. In a further embodiment the non relational EIS is configured to accept an XML mapping associated with a request for XML data and to use the XML mapping to map the requested XML data to an XML schema.

In one embodiment the data storage is in communication with one or more modules in the system such as the integration adapter and or the non relational EIS . The data storage may provide an electronic data repository for the system . The data storage may comprise one or more magnetic or optical disk drives read only memory ROM random access memory RAM and the like. In one embodiment the system may use the data storage to store or manipulate data such as one or more XML mappings data access sets meta data system settings data files and the like. In a further embodiment the data storage is accessible to the integration adapter and the non relational EIS such that data specified by one of the integration adapter and the non relational EIS is accessible by the other.

In one embodiment the disconnected access provider comprises an XML mapping definition tool that is configured to assist a user in defining an XML mapping. One example of an XML mapping is provided and described in further detail with reference to . In general an XML mapping is a file data structure or the like that maps a data source schema of a non relational database to an XML schema. In one embodiment the XML mapping definition tool is configured to allow a user to select a default XML mapping or to define a custom XML mapping. The XML mapping definition tool may use a GUI a command line or script interface an API another interface to communicate with the user. In another embodiment the XML mapping definition tool may receive input from a user through an integration broker or the like. In one embodiment the XML mapping definition tool may be used to define an XML mapping at a time prior to a runtime of the other modules in the disconnected access provider such that an XML mapping is already defined at runtime.

The default XML mapping that the XML mapping definition tool uses may be predefined by a user defined by a non relational EIS or database defined by the XML mapping definition tool defined by the disconnected access provider or the like. In one embodiment the non relational EIS or database provides a default XML mapping that uses existing table names field names and the like from one or more existing non relational databases such that the XML schema of the default XML mapping is substantially similar to a data source schema of at least a portion of the non relational EIS or database. In one embodiment if a non relational EIS or database does not have a default XML mapping the XML mapping definition tool may access the non relational EIS or database to discover the data source schema and to build a default XML mapping. In one embodiment the XML mapping definition tool may provide multiple default mapping definitions for the user to select from. In one embodiment the XML mapping definition tool is part of the non relational EIS.

In one embodiment the XML mapping definition tool allows the user to define a custom XML mapping. The user may wish to only use a subset of the data source schema to use custom names or identifiers or to otherwise alter or customize how the data source schema is mapped to an XML schema. The XML mapping definition tool may graphically present the data source schema to the user such that the user may select a portion of the data source schema to map may provide a text editor such that the user may enter an XML mapping or may otherwise assist the user in creating an XML mapping. The XML mapping definition tool may store the XML mapping in data storage that is accessible by both the disconnected access provider and the non relational EIS or database in the metadata of a data access set in the non relational EIS or database or in other data storage.

In one embodiment the disconnected access provider comprises a command module . The command module is configured to receive one or more requests for non relational data stored in a non relational EIS or database. In a further embodiment the one or more requests are for non relational XML data. The one or more requests may comprise an XML mapping a reference to an XML mapping a pointer to an XML mapping or the like. In one embodiment a request that does not comprise an XML mapping or the like comprises an implicit request for the command module to use a default XML mapping. The one or more requests may come from a client module or the like that is configured for disconnected access. The one or more requests may come directly from the client module or the like or may come through an integration broker or other intermediary.

In one embodiment the command module requests non relational data from a non relational EIS or database in response to a non relational data request. The command module may request the non relational data using an XML mapping. The XML mapping may comprise a default XML mapping or a custom XML mapping and may be explicitly or implicitly defined in the non relational data request. For example the command module may request the non relational data using a command supported by the non relational EIS or database such as an XML query an XML extended query or the like. In one embodiment the command module is configured to request the non relational data in a single command network transaction or the like. For example a command similar to LIST STUDENT ALL TOXML may return non relational XML data from a database or table identified by STUDENT. The command does not explicitly specify an XML mapping so the command module may format the requested XML data according to a default XML mapping. In another example a command similar to DB.TOXML STUDENT.XML STUDENT.MAP may return non relational XML data in a file STUDENT.XML. Because the second command specifies an XML mapping the command module may format the requested XML data according to the XML mapping STUDENT.MAP. Because such requests comprise a single command they can be executed in a single network transaction and are well suited for disconnected access situations.

In one embodiment the disconnected access provider comprises a fill module . The fill module may be configured to receive non relational XML data from a non relational EIS or database. The fill module may receive the non relational XML data in response to a non relational data request from the command module . The non relational XML data may comprise a data file a data structure a pointer or reference to a data file or data structure or the like. The non relational XML data may be formatted according to an XML schema defined in a XML mapping such as a default or custom XML mapping. One example of XML data is provided and described in further detail with reference to .

In one embodiment the fill module populates one or more data access sets with the non relational XML data. One example of a data access set is provided and described in further detail with reference to . The one or more data access sets may comprise data providers such as Microsoft ADO.NET DataSets Service Data Objects SDO data graphs or the like. The data access sets may comprise an in memory cache of data retrieved from a data source such as a non relational EIS or database. In one embodiment the data access sets may store data as business objects such as ADO.NET DataTable objects SDO DataObjects and the like. The data access sets may be configured to read and write data schemas and the like in an XML format. In one embodiment the data access sets are configured to allow data changes and to track and store the changes in a change history or the like. The data access sets may import non relational XML data track one or more changes to the non relational XML data and export the one or more changes. In one embodiment the command module and or the fill module comprise an implementation of a Fill method in a Microsoft ADO.NET IDataAdapter.

In one embodiment the disconnected access provider comprises a communications module . The communications module transmits one or more data access sets from the fill module to an integration broker or the like. The communications module may transmit the one or more data access sets or pointers references or the like to the one or more data access sets. In one embodiment the communications module transmits the one or more data access sets pointers references or the like to the integration broker such that other users clients modules and the like can access the data access sets through the integration broker. In one embodiment the integration broker transmits the data access sets to another user client module or the like.

In one embodiment the disconnected access provider comprises an edit module . The edit module is configured to receive one or more changes to non relational XML data from at least one data access set. In a further embodiment the edit module may receive the one or more changes to the non relational XML data and the unchanged non relational XML data. In one embodiment the one or more changes are made by a user. The one or more changes may comprise new data updated data deleted data and the like. In one embodiment the one or more changes are in an XML format. In one embodiment the edit module receives the one or more changes in response to user input such as an update command or the like.

In one embodiment the disconnected access provider comprises an update module . The update module sends the one or more data changes from the edit module to the non relational EIS or database. In one embodiment the update module may send an XML mapping or a reference or pointer to an XML mapping to the non relational EIS or database with the one or more data changes. The non relational EIS or database may update the data stored in the non relational EIS or database using the one or more data changes and the XML mapping. In one embodiment the edit module and or the update module may comprise an implementation of an Update method in a Microsoft ADO.NET IDataAdapter.

In one embodiment more than one user client module and the like are configured for simultaneous disconnected access to the non relational EIS or database and the disconnected access provider comprises a conflict module . The conflict module may be configured to prompt the user with one or more update options in response to one or more conflicting changes to data in the non relational EIS or database. The conflict module may use a log a history a lock file original data stored in a data access set or the like to determine when a conflicting change has been made to the data in the non relational EIS or database. The one or more update options may comprise overwrite cancel update copy to new record undo change delete record and the like. The conflict module may present the user with the update options once and apply the user s selection to multiple conflicting changes or the conflict module may prompt the user for a selection for each conflicting change. In a further embodiment the conflict module is configured to follow a predefined conflict policy selected by the user.

In one embodiment each of the data objects may comprise meta data an XML mapping original data and or data changes . The data objects may be business objects or other data structures. In one embodiment the data objects are ADO.NET DataTable objects and may be related to each other with ADO.NET DataRelation objects. In another embodiment the data objects are SDO data objects and may be organized in a graph. The data objects may be arranged hierarchically and may include sub data objects and the like.

Each of the data objects may comprise meta data . The meta data may be data defining related to and or identifying the data objects . In one embodiment the meta data may comprise an XML mapping . One example of an XML mapping that may be substantially similar to the XML mapping is provided and described in further detail with reference to . The XML mapping may map a data schema of a data source to an XML schema. The XML mapping may be a full XML mapping or a pointer or reference to an XML mapping. In another embodiment the XML mapping is not stored in the data objects but is stored in a database separate data storage an integration adapter or elsewhere.

The data objects may comprise original data and data changes or may otherwise represent both current and original data such that the data objects and the data access set can make current data original data data changes and the like available. The data changes may comprise the changed or updated data or the data changes may comprise a change history or the like such that the current changed or updated data can be constructed. In another embodiment the data changes comprise the current data including changes or updates and the original data comprises an undo history or the like such that the original data can be constructed. Although varying configurations are possible the data objects may store the original data and the data changes such that current data original data and data changes are implicitly or explicitly known and may be exported.

The XML data may be a response to a data request sent to a non relational EIS or database. The XML data may be a data file a data object or the like. In one embodiment the XML data is a data file that is identified by a name . In the illustrated example the name is STUDENT.XML. In one embodiment the XML data comprises configuration data . The configuration data may comprise names options version or protocol definitions and the like. In one embodiment the XML data comprises non relational XML data . The non relational XML data is formatted based on the mapping data in the XML mapping .

The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

If the command module determines that it has not received a non relational data request the edit module determines whether it has received changes in the non relational XML data from at least one of the data access sets . If the edit module determines that it has not received changes in the non relational XML data the method returns to the data request determination step . If the edit module determines that it has received changes in the non relational XML data the conflict module determines whether one or more of the changes conflict with previous changes. If the conflict module does not detect conflicting changes the update module sends the changes in the non relational XML data to the non relational EIS or database and the method returns to the data request determination step . If the conflict module detects one or more conflicting changes then the conflict module prompts the user with one or more update options. The conflict module receives a selected update option from the user . The conflict module executes the update option which may comprise canceling the update sending the changes to the non relational EIS or database deleting a record copying a record or the like. The method returns to the data request determination step .

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

