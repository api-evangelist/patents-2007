---

title: Generating a word-processing document from database content
abstract: Documents are automatically generated from data within a database. The look and feel of the document is defined externally from the data in the database such that a consistent look and feel is applied to the retrieved data. Templates are defined that specify the structure of the document including its look and feel for the documents created by using data from the database. When a document is requested to be generated for viewing and/or editing, the appropriate data from the database is retrieved and placed within the document according to the defined look and feel that is contained within the templates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07720885&OS=07720885&RS=07720885
owner: Microsoft Corporation
number: 07720885
owner_city: Redmond
owner_country: US
publication_date: 20070404
---
U.S. patent application Ser. No. 11 784 165 filed Apr. 4 2007 entitled REPOPULATING A DATABASE WITH DOCUMENT CONTENT and Ser. No. 11 784 163 filed Apr. 4 2007 entitled SYNCHRONIZING EXTERNAL DOCUMENTATION WITH CODE DEVELOPMENT assigned to the assignee of the present application are related to the present application.

Many times data that is stored within a database system is better presented in the context of a word processing document for ease of readability by the intended audience. For example data about an Application Programming Interface API may be stored within a database as items in a table each method property and object in the API but the documentation for the API is better presented as a word processing document. Similarly product data may be stored within a database but the product descriptions are better viewed within a word processing document. Creating word processing documents comprised primarily from data within a database however is challenging.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Word processing documents are automatically generated using a subset of data from a database. The document s settings are defined externally from the data in the database such that a consistent look and feel may be applied to each of the documents that are generated using the data from the database. For instance templates may be defined to produce a consistent look and feel for the documents created by using data from the database. When a document is requested to be viewed and or edited the appropriate data from the database is retrieved and placed within the document according to the defined document settings. The data within the database does not need to include all of the metadata required to produce the document having the desired look and feel.

Referring now to the drawings in which like numerals represent like elements various embodiments will be described. In particular and the corresponding discussion are intended to provide a brief general description of a suitable computing environment in which embodiments may be implemented.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Distributed computing environments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments will be described. The computer architecture shown in may be configured as a desktop or mobile computer and includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application program and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive the computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . The network connection may be wireless and or wired. The network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen having a user interface that is configured to receive selections from a user for determining sections of a document to generate.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS VISTA operating system from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store database . Database may be configured to store many different types of data. For example the data may relate to elements of an API records relating to a product and the like. Generally database contains any type of data which are used to generate a document. While database is shown on computer database may be stored within in any data store such as on a data store on network .

The document generator is operative to automatically generate document using data from database . For example a user may select one or more sections of a document s to be created from database utilizing user interface . Database is configured to store multiple disparate regions of rich content that can contain rich word processing content pictures etc. without requiring each piece of content within the database to define all of the necessary document metadata required to generate a document. The look and feel of the document is defined externally from the data in the database such that a consistent look and feel may be applied to the retrieved data. For instance one or more document templates may be defined to produce a consistent look and feel for the documents generated. According to one embodiment there is a template type that defines the look and feel of the document and there is a template type for translating a database record into the document.

When a document is requested to be viewed and or edited the appropriate data from the database is automatically retrieved and placed within the document according to the defined look and feel.

As discussed document template defines the look and feel of document and is used to define other document settings for the document content. The template may be used to include settings such as fonts page layout header footer information special formatting styles and the like. In this way the document settings do not need to be included within the data of the database . Templates allow consistency between documents that are generated by document generator . Any method of storing document settings however may be used to define the structure of document . For example a list may be maintained within mass storage device that contains the document settings.

Although documentation generator is shown as a separate application it may be included directly within an application program or at some other location. The operation of documentation generator will be described in more detail below.

Client application may be used to manage the document settings including the structure and formatting of the document i.e. look and feel on a global level without affecting any of the pieces of the data stored within database . For example client application may use and create one or more document templates to define the structure of the document . The templates may define the styles numbering and the like that are used when generating the document. The template s also may be used to define the location in which the constituent parts of the assembled document appear within the overall document. Document generator is also configured to generate portions of a document such that multiple authors may work on the document at the same time without conflicting.

According to one embodiment document includes static content and dynamic content . Static content is content that does not change and cannot be edited. Static content may be retrieved from database and or may be content which is predefined within template or at some other location. Dynamic content is content that may change is edited by the recipient of the document and is content that is retrieved from database . The location for dynamic content may be defined within a template as a content placeholder for a specific piece of information that is obtained from a specific row in the database. The document generator is used to populate the dynamic content by copying the data into the document using template .

A user interface allows a user such as a documenter to select any section s or subsection s of the database that they would like generated based on a document hierarchy structure that has been defined within template s . The user interface may also be used to specify the editing permissions for the document. For example a user may only desire to read the document in which case the document may be opened as a read only document. In this case a user that requests editing permissions for the same document would be allowed to edit the document.

In response to the selection request for the section s of the document document generator receives the selections from the user interface and generates the desired section s of the document for the user. In order to generate the document the user interface selections received from the user are translated into a database query against the database e.g. a SQL SELECT statement for the appropriate sections and subsections of the documents. According to one embodiment a copy of the document template is created to have the set of styles and formatting used for the document. Then for each item in the query the template for the section is used to copy over the static content and dynamic content. According to one embodiment the static content is first obtained which provides the document generator with the information used to obtain the dynamic content. The document template for the section includes the definition for the output of each item in the section which are copied and populated with both the static content and the dynamic content from the appropriate row within the database. Part of the dynamic content that is obtained is a fragment for the rich content item s in the section. As discussed above each of the content items does not include all the information needed to express them. According to one embodiment when these rich content items are inserted into the template they are valid against the schemas for the open document format of the word processing document since they are fragments of that greater whole. The resulting document is then assembled by document generator with one consistent look and feel and the desired subset of content and returned to the caller.

According to one embodiment when any section or subsection is retrieved in generating a document those records within database are marked such that a concurrent request for that section may be handled appropriately. For example if a section is opened for editing a subsequent section may be opened as read only such that two users are not editing the same section. An example of document generation system will now be described. The following is merely an example and is not intended to be limiting.

The following example relates to generating a document that documents an XML based syntax that is stored within a database. When developing source code such as an XML based syntax it is common to provide documentation for the source code. Generally documentation for the source code is created to be user friendly that completely and accurately describes the source code. As such a rich formatting of the documentation is typically desired. Document generator is configured to create a document such that a documenter may edit the content retrieved from database within a word processing document in a user friendly manner. In the current example the database contains at least one field such as documentation field that may be edited by a user. More or less fields may be contained within database . For example a user data field may be included that may be edited.

According to one embodiment each row of the database is uniquely identified such that the row can be identified even when an identifying characteristic such as the name of an element changes. For example in XML elements even when the typical identifying characteristics of those elements change e.g. their names content models etc. the element can remain associated with the documentation. In order to identify each row of the database each row is annotated with a unique ID. For example each row may be identified by a separate unique GUID globally unique identifier .

As discussed above the database contains data that is used to populate document . Some of the data may be used for populating static content of the document while other data may be used for populating dynamic content of the document. For example name field may be considered static content and the documentation field may be considered dynamic content. Many more fields may be contained in each row. For instance a field may contain metadata user data and the like. Another field that may be included within database is a relationship field not shown that may specify the relationship of one row to another. In the example presented a relationship field may be used to store the parent child relationships of the XML schema files such that a simple query may be used against the database to return content relating to a parent and its children when constructing document . In some embodiments it may be advantageous to configure database such that it provides an easy way to view the functionality of the code without directly accessing the code.

When a documenter desires to view and or edit documentation for the XML the documenter requests a portion of the document to be generated. According to one embodiment user interface is used to receive the selection request. In response to the request the document generator extracts the requested content from database and places the content into document according to the settings specified in document template . Documentation may take many different forms such as a single file multiple files and the like. For example content from database could be extracted and then placed into templates into documentation . Documentation could be in the form of MICROSOFT WORD files or some other document format.

According to one embodiment when a document is created document generator maintains the unique identifier that is associated with each row in the database within document such that the location of the content within the document can be traced back to the database. For example document may include a tag that specifies the identifier i.e. the GUID that identifies which row of the database the content is associated with. The tag may take many different forms. For example when the document is stored as XML the tag may be an XML tag that is placed near the retrieved content. Any method of tagging the content however may be used. The GUIDs associated with each row provide a permanent link from the row in the database to the generated document .

Referring now to an illustrative process for defining a document structure and generating a document from content within a database is described.

When reading the discussion of the routines presented herein it should be appreciated that the logical operations of various embodiments are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly the logical operations illustrated and making up the embodiments described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

After a start operation the process flows to operation where the settings of the document are obtained. According to one embodiment a client application such as a word processing application is used to create a template s to define the look and feel of the document as well as the structure of the document such that when content from the database is retrieved and presented a consistent look and feel is provided to the user. The template may specify items such as header footer information styles formatting location of dynamic content and static content and the like.

Moving to operation the template providing mapping of the database content to the document is obtained. The mapping of the database content may be determined in many different ways. For example the template may be used to define what data from the database is placed into what locations of the document. A field within each row of the database may also be used to specify the location of the data. Similarly a mapping file may be used to map the data from the database to a document location.

Transitioning to operation the selections for the section s to be generated for a document are obtained. According to one embodiment a user selects the sections of the document to view edit within a user interface. Other methods may also be used. For example a predefined list may be used. The section s may be as few as one subsection of the document or be as large as the entire document.

Moving to operation the document is generated based on the selections See and related discussion . Generally content from the database is retrieved from the database in response to the selections and then copied into the document using the created template s .

The process then flows to operation where the document is provided to the user. For example the document may be provided through a word processing application and or the file itself may be provided.

After a start operation the process flows to operation where the selections for the document are translated into queries against the database to retrieve the appropriate content. For example if the section of the document to be generated relates to product A then the database query s are created to retrieve content from the database relating to product A.

Moving to operation the corresponding template s for the requested section s is obtained. The template that is obtained is based on the content of the requested section. The template is used when copying data from the database to the document such that the document maintains a consistent look and feel and the content is placed into the correct location of the document.

Transitioning to operation the content for the document is obtained from the database. The content retrieved from the database may be editable content dynamic content and or non editable content static content . According to one embodiment one set of queries obtains the static content and another set of queries obtains the dynamic content. Any method of extracting the data from the database however may be utilized. For example a single query may be constructed to retrieve the content from the database.

Flowing to operation the document is assembled. As discussed above the templates are used when copying the data into the document.

Moving to operation the content from the database is marked such that concurrent generations of the same section of the document may be appropriately handled. For example the marking of the content may be used to indicate that the content is being edited or just viewed.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

