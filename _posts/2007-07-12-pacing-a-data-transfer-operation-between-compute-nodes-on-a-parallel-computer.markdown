---

title: Pacing a data transfer operation between compute nodes on a parallel computer
abstract: Methods, systems, and products are disclosed for pacing a data transfer between compute nodes on a parallel computer that include: transferring, by an origin compute node, a chunk of an application message to a target compute node; sending, by the origin compute node, a pacing request to a target direct memory access (‘DMA’) engine on the target compute node using a remote get DMA operation; determining, by the origin compute node, whether a pacing response to the pacing request has been received from the target DMA engine; and transferring, by the origin compute node, a next chunk of the application message if the pacing response to the pacing request has been received from the target DMA engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08018951&OS=08018951&RS=08018951
owner: International Business Machines Corporation
number: 08018951
owner_city: Armonk
owner_country: US
publication_date: 20070712
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods systems and products for pacing a data transfer between compute nodes on a parallel computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather operation.

When performing point to point message passing operations a parallel application running on a compute node typically transmits a message to another compute node using messaging software installed on each compute node. Messaging software may partition the application message into multiple chunks that the messaging software transfers one at a time from an origin compute node to a target compute node. In transferring the message chunks the messaging software may pace how often the messaging software transfers one of the chunks based on network congestion. In the current art the messaging software on the origin node paces the data transfer operation by transferring a message chunk to the target node pinging the target node for a ping response and waiting to transfer the next message chunk until the origin compute node receives the ping response. Waiting to transfer the next message chunk until the ping response is received paces the data transfer of each chunk based on network congestion. Increased network congestion results in longer delays between the transfer of each message chunk while decreased network congestion results in shorter delays between the transfer of each message chunk. The drawback to the current art however is that each time the origin node pings the target node a processing core on the target node is interrupted from other processing tasks to process the ping request from the origin compute node. Interrupting the processing core on the target node to process the ping request is often a computationally expensive operation and typically decreases target node performance. As such readers will appreciate that room for improvement exists in pacing a data transfer between compute nodes on a parallel computer.

Methods systems and products are disclosed for pacing a data transfer between compute nodes on a parallel computer that include transferring by an origin compute node a chunk of an application message to a target compute node sending by the origin compute node a pacing request to a target direct memory access DMA engine on the target compute node using a remote get DMA operation determining by the origin compute node whether a pacing response to the pacing request has been received from the target DMA engine and transferring by the origin compute node a next chunk of the application message if the pacing response to the pacing request has been received from the target DMA engine.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and computer program products for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . The parallel computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. Readers will note that the origin compute node is a compute node attempting to transmit an application message while the target compute node is a compute node intended as the recipient of the application message. The system of operates generally for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention as follows An origin compute node transfers a chunk of an application message to a target compute node. The origin compute node sends a pacing request to a target direct memory access DMA engine on the target compute node using a remote get DMA operation. A remote get DMA operation is an operation that allows a compute node to retrieve data from another compute node without involving the processor on the compute node providing the data. The origin compute node then determines whether a pacing response to the pacing request has been received from the target DMA engine. If the pacing response to the pacing request has been received from the target DMA engine the origin compute node transfers the next chunk of the application message. The system of may also operate generally for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention as follows if the pacing response to the pacing request has not been received from the target DMA engine the origin compute node waits to transfer the next chunk of the application message.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors or processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. The compute node of includes one or more processing cores as well as random access memory RAM . The processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as Universal Serial Bus USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of each processing core and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it.

As mentioned above the compute node of is configured for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. The compute node of operates generally for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention as follows transferring a chunk of an application message to a target compute node sending a pacing request to a target DMA engine on the target compute node using a remote get DMA operation determining whether a pacing response to the pacing request has been received from the target DMA engine and transferring a next chunk of the application message if the pacing response to the pacing request has been received from the target DMA engine. In addition the compute node of operates generally for pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention by waiting to transfer the next chunk of the application message if the pacing response to the pacing request has not been received from the target DMA engine.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of pacing a data transfer between compute nodes on a parallel computer in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in pacing a data transfer between compute nodes on a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of pacing a data transfer between compute nodes on a parallel computer in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for pacing a data transfer between compute nodes on a parallel computer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the origin compute node and an application installed on the target compute node . In the example of the application on the origin compute node has an application message for transmission to the application on the target compute node . Data communications between applications are effected using messaging modules installed on each of the compute nodes . Applications may communicate by invoking function of an application programming interfaces API exposed by the application messaging modules . To transmit the message to the application the application of may invoke a function of an API for messaging module that passes a buffer identifier of an application buffer containing the application message to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin compute node and messaging module installed on the target compute node .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes a transmission stack for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stack for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes an injection first in first out FIFO buffer for storing data descriptors that specify DMA transfer operations for transferring data. The exemplary DMA engine of also includes a reception FIFO buffer used to receive message packets from other DMA engines on other compute nodes. Although only illustrates a single injection FIFO buffer and a single reception FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers.

In the example of the application the messaging module the DMA engine and the communications hardware all operate to support pacing a data transfer between compute nodes on a parallel computer according to embodiments of the present invention. As mentioned above the application of may pass a buffer identifier of an application buffer containing the application message to the messaging module . Upon receiving the buffer identifier the messaging module may then partition the application message into chunks . For each chunk of the application message the messaging module creates a data descriptor . The messaging module then transfers one of the chunks of the application message to the target compute node by placing the corresponding chunk data descriptor into the injection FIFO buffer of the origin DMA engine .

In addition to creating chunk data descriptors the messaging module also creates a pacing request data descriptor and a pacing response data descriptor . The pacing request data descriptor of specifies a pacing request for transmission to the target compute node while the pacing response data descriptor of specifies a pacing response for transmission from the target compute node to the origin compute node . In the example of the pacing request data descriptor of specifies a remote get DMA operation and specifies the pacing response data descriptor as the payload for the pacing request. After transferring a chunk of the message the messaging module sends a pacing request to a target DMA engine on the target compute node using a remote get DMA operation by injecting the pacing request data descriptor in the injection FIFO buffer for transmission to the target compute node . Using a remote get DMA operation to send the pacing request to the target DMA engine allows the origin compute node to ping the target compute node without invoking a processor core of the target compute node .

Upon receiving the pacing response data descriptor as the payload of the pacing request the target DMA engine on the target compute node injects the pacing response data descriptor into its own remote get injection FIFO buffer. Upon processing the pacing response data descriptor the target DMA engine sends a pacing packet back to the origin DMA engine on the origin compute node as specified by the pacing response data descriptor . The pacing packet received by the origin compute node provides a pacing response to the pacing request sent by the origin compute node .

Because the pacing response data descriptor specifies a memory FIFO DMA operation the origin DMA engine places the pacing packet in the reception FIFO buffer for processing by a processing core on the origin compute node. Placing the pacing packet in the reception FIFO buffer provides a mechanism for the messaging module to determine whether a pacing response to the pacing request has been received from the target DMA engine because the processing core of the origin compute node can notify the messaging module that the pacing response has been received when the processing core processes the pacing packet in the reception FIFO buffer . The messaging module of may then transfer the next chunk of the application message if the pacing response to the pacing request has been received from the target DMA engine or wait to transfer the next chunk of the application message if the pacing response to the pacing request has not been received from the target DMA engine.

A memory FIFO data transfer operation is a mode of transferring data using DMA engines typically a DMA engine on an origin node and a DMA engine on a target node. In a memory FIFO data transfer operation data is transferred along with a data descriptor describing the data from one DMA engine to another DMA engine. The DMA engine receiving the data and its descriptor in turns places the descriptor in the reception FIFO and caches the data. A core processor then retrieves the data descriptor from the reception FIFO and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

For further explanation sets forth a flow chart illustrating an exemplary method for pacing a data transfer between compute nodes on a parallel computer according to the present invention. The method of includes transferring by an origin compute node a chunk of an application message to a target compute node. The origin compute node may transfer a chunk of an application message to a target compute node according to the method of by creating a data descriptor for the chunk and injecting the data descriptor for the chunk in an injection FIFO buffer of an origin DMA engine on the origin compute node. The origin DMA engine on the origin compute node may then encapsulate the chunk into packets and inject the packets onto a data communications network that connects the origin compute node to the target compute node.

The method of also includes sending by the origin compute node a pacing request to a target direct memory access DMA engine on the target compute node using a remote get DMA operation. The pacing request of represents a request message sent to a target compute node for eliciting a response message back to the origin compute node that may be used to identify a time period that begins when the request message is sent and ends when the response message is received. The time period identified by the request response message pair typically forms the basis of some action on the origin compute node. In the exemplary method of the identified time period is used to pace the data transfer of the application message from the origin compute node to the target compute node.

The pacing request of elicits a response message from the target DMA engine because the pacing request is implemented as a remote get message that includes a pacing response data descriptor . The pacing response data descriptor of includes all the information needed by the target DMA engine to generate a pacing response without invoking a target processing core on the target compute node. Because the pacing request is a remote get message the target DMA engine processes the pacing response data descriptor to generate a pacing response upon receiving the pacing request .

In the method of the origin compute node may send a pacing request to a target DMA engine on the target compute node using a remote get DMA operation according to the method of by creating a pacing request data descriptor that represents the pacing request creating a pacing response data descriptor and configuring the pacing request data descriptor to specify the pacing response data descriptor as the payload for the pacing request . The origin compute node may then send a pacing request to a target DMA engine on the target compute node using a remote get DMA operation according to the method of by injecting the pacing request data descriptor into an injection FIFO buffer for the origin DMA engine. Upon processing the pacing request data descriptor the origin DMA engine encapsulates the pacing response data descriptor into packets and transmits the packets through a data communications network to the target DMA engine.

The method of includes receiving by the target DMA engine from the origin compute node the pacing request . The target DMA engine may receive the pacing request from the origin compute node according to the method of by receiving packets that encapsulate the pacing request from a data communications network connecting the origin compute node and the target compute node.

The method of also includes sending by the target DMA engine in response to receiving the pacing request a pacing response to the origin compute node without invoking a processing core on the target compute node. The target DMA engine may send a pacing response to the origin compute node in response to receiving the pacing request according to the method of by injecting the pacing response data descriptor in an injection FIFO for the target DMA engine. The target DMA engine may inject the pacing response data descriptor in an injection FIFO buffer for the target DMA engine according to the method of by unencapsulating the packet response data descriptor from the packets received by the target DMA engine from the origin compute node and storing the packet response data descriptor in the injection FIFO buffer for the target DMA engine.

In the example of the pacing response data descriptor in the pacing request specifies a pacing packet header for a memory FIFO data transfer from the target compute node to the origin compute node. The pacing response data descriptor of designates that the pacing response is to be sent using a memory FIFO data transfer operation using a transfer operation identifier field . Implementing a pacing response with a memory FIFO transfer ensures that the origin processing core on the origin compute node will be notified when the origin compute node receives the pacing response . The target DMA engine may send a pacing response to the origin compute node in response to receiving the pacing request according to the method of by processing the pacing response data descriptor including sending to the origin compute node a pacing packet having the pacing packet header specified by the pacing response data descriptor in the pacing request .

The method of includes determining by the origin compute node whether a pacing response to the pacing request has been received from the target DMA engine. The origin compute node may determine whether a pacing response to the pacing request has been received from the target DMA engine according to the method of by receiving by the origin DMA engine on the origin compute node from the target DMA engine in a reception FIFO for the origin DMA engine a pacing packet having the pacing packet header specified by the pacing response data descriptor in the pacing request and executing by an origin processing core on the origin compute node a pacing packet handler specified in the pacing packet header. An interrupt that is triggered when the pacing packet is stored in the injection FIFO buffer may be used to notify the processing core on the origin compute node that a pacing packet is available for packet handling. The pacing packet header may specify a packing packet handler using a pacing packet handler identifier field . The value of the pacing packet handler identifier field designates a particular packet handler on the origin compute node capable of notifying messaging software that the pacing response to the pacing request has been received from the target DMA engine. In the method of if the origin DMA engine receives a pacing packet from the target DMA engine and the processing core on the origin compute node executes the packet handler specified in the pacing packet then the pacing response to the pacing request has been received from the target DMA engine. The pacing response to the pacing request has not been received from the target DMA engine however if the origin DMA engine has not received a pacing packet from the target DMA engine.

The method of includes transferring by the origin compute node a next chunk of the application message if the pacing response to the pacing request has been received from the target DMA engine. The origin compute node may transfer the next chunk of the application message according to the method of by creating a data descriptor for the next chunk and injecting the data descriptor for the next chunk in the injection FIFO buffer of an origin DMA engine on the origin compute node. The origin DMA engine on the origin compute node may then encapsulate the next chunk into packets and inject the packets onto a data communications network that connects the origin compute node to the target compute node.

The method of also includes waiting by the origin compute node to transfer the next chunk of the application message if the pacing response to the pacing request has not been received from the target DMA engine. The origin compute node may wait to transfer the next chunk of the application message according to the method of by waiting to receive the pacing packet from the target DMA engine having the pacing packet header specified in the pacing response data descriptor that was included in the pacing request .

For further explanation sets forth a call sequence diagram illustrating an exemplary call sequence for pacing a data transfer between compute nodes on a parallel computer according to the present invention. In the exemplary call sequence diagram of the origin compute node transfers a first chunk of an application message to a target compute node . A processing core on the origin compute node initiates the transfer by sending a Request to Send RTS message to the target compute node . The RTS message is a control message indicating that the origin compute node has an application message to transfer to the target compute node . In addition the RTS message describes the application message to the target compute node such as for example by providing the total size of the message.

In the exemplary call sequence diagram of the target DMA engine of the target compute node receives the RTS message . The processing core of the target compute node processes the RTS message by allocating storage on the target compute node to store the application message and setting up a DMA counter for tracking when the message transfer is complete. The target compute node then sends a Clear to Send CTS message back to the origin compute node to indicate that the target compute node is ready to receive the application message. The CTS message provides the origin compute node with storage information that specifies where to store the application message on the target compute node .

In the exemplary call sequence diagram of the origin DMA engine receives the CTS message from the target compute node . The origin processing core processes the CTS message and partitions the application message into three chunks for transfer to the target compute node . Readers will note that partitioning the application message into three chunks is for explanation and not for limitation. The origin compute may partition an application message into any number of chunks as will occur to those of skill in the art. The processing core then injects a direct put data descriptor for the first chunk into an injection FIFO buffer for the origin DMA engine . The origin DMA engine packetizes the first chunk and transmits the packets to the target DMA engine . As the target DMA engine receives the first chunk the target DMA engine decrements the DMA counter used to track when the data transfer is complete.

After transferring the first chunk of the message the processing core on the origin compute node sends a pacing request to a target DMA engine on the target compute node using a remote get DMA operation. The processing core sends a pacing request to the target DMA engine by creating a pacing request data descriptor and a pacing response data descriptor. The processing core then injects the pacing request data descriptor into the injection FIFO buffer for the origin DMA engine . The origin DMA engine then in turn creates the remote get pacing request and transmits the pacing request to the target DMA engine with the pacing response data descriptor as the payload to the pacing request .

In the exemplary call sequence diagram of the target DMA engine receives the pacing request from the origin compute node . In response to receiving the pacing request the target DMA engine sends a pacing response to the origin compute node without invoking a processing core on the target compute node . The target DMA engine sends the pacing response to the origin compute node by injecting the pacing response data descriptor specified by the pacing request in the injection FIFO buffer for the target DMA engine and processing the pacing response data descriptor. Upon processing the pacing response data descriptor the target DMA engine may generate a pacing packet for transmission to the origin compute node . The pacing packet serves as the pacing response in the exemplary call sequence diagram of .

In the exemplary call sequence diagram of the origin compute node determines whether a pacing response to the pacing request has been received from the target DMA engine . The origin compute node may determine whether a pacing response to the pacing request has been received from the target DMA engine by receiving a pacing packet from the target DMA engine and executing a pacing packet handler specified in the pacing packet header of the pacing packet received from the target DMA engine . If the origin DMA engine receives a pacing packet from the target DMA engine and the processing core executes a pacing packet handler specified in the pacing packet header of the pacing packet then the pacing response to the pacing request has been received from the target DMA engine . The pacing response to the pacing request has not been received from the target DMA engine however if the origin DMA engine does not receive a pacing packet from the target DMA engine .

In the exemplary call sequence diagram of the origin compute node transfers the second chunk of the application message to the target DMA engine if the pacing response to the pacing request has been received from the target DMA engine . The origin compute node may transfer the next chunk of the application message to the target DMA engine by injecting a data descriptor for the second chunk into the injection FIFO buffer for the origin DMA engine . As the target DMA engine receives the second chunk the target DMA engine decrements the DMA counter used to track when the message transfer is complete.

After transferring the second chunk of the message the processing core on the origin compute node sends a pacing request to a target DMA engine on the target compute node using a remote get DMA operation. The processing core sends a pacing request to the target DMA engine by creating a pacing request data descriptor and a pacing response data descriptor. The processing core then injects the pacing request data descriptor into the injection FIFO buffer for the origin DMA engine . The origin DMA engine then in turn creates the remote get pacing request and transmits the pacing request to the target DMA engine with the pacing response data descriptor as the payload to the pacing request .

In the exemplary call sequence diagram of the target DMA engine receives the pacing request from the origin compute node . In response to receiving the pacing request the target DMA engine sends a pacing response to the origin compute node without invoking a processing core on the target compute node . The target DMA engine sends the pacing response to the origin compute node by injecting the pacing response data descriptor specified by the pacing request in the injection FIFO buffer for the target DMA engine and processing the pacing response data descriptor. Upon processing the pacing response data descriptor the target DMA engine may generate a pacing packet for transmission to the origin compute node . The pacing packet serves as the pacing response in the exemplary call sequence diagram of .

After sending the pacing request the origin compute node determines whether a pacing response to the pacing request has been received from the target DMA engine . The origin compute node may determine whether a pacing response to the pacing request has been received from the target DMA engine by receiving a pacing packet from the target DMA engine and executing a pacing packet handler specified in the pacing packet header of the pacing packet received from the target DMA engine . If the origin DMA engine receives a pacing packet from the target DMA engine and the processing core executes a pacing packet handler specified in the pacing packet header of the pacing packet then the pacing response to the pacing request has been received from the target DMA engine . The pacing response to the pacing request has not been received from the target DMA engine however if the origin DMA engine does not receive a pacing packet from the target DMA engine .

In the exemplary call sequence diagram of the origin compute node transfers the third chunk of the application message to the target DMA engine if the pacing response to the pacing request has been received from the target DMA engine . The origin compute node may transfer the third chunk of the application message to the target DMA engine by injecting a data descriptor for the third chunk into the injection FIFO buffer for the origin DMA engine . As the target DMA engine receives the third chunk the target DMA engine decrements the DMA counter used to track when the message transfer is complete. Upon decrementing the counter to zero the target DMA engine notifies the processing core on the target compute node that the data transfer is complete using a callback function. Similarly the origin DMA engine decrements a DMA counter used to track when the message transfer is complete as each message chunk is transferred to the target DMA engine . Upon decrementing the counter to zero the origin DMA engine notifies the processing core on the origin compute node that the data transfer is complete using a callback function.

Readers will note from the exemplary call sequence diagram of that the time period between sending a pacing request and receiving a pacing response depends on network traffic congestion. Increased network congestion results in longer periods of time between sending a pacing request and receiving a pacing response thereby decreasing the rate at which the origin compute node transfers chunks of an application message to a target compute node. Decreased network congestion results in shorter periods of time between sending a pacing request and receiving a pacing response thereby increasing the rate at which the origin compute node transfers chunks of an application message to a target compute node.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for pacing a data transfer between compute nodes on a parallel computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

