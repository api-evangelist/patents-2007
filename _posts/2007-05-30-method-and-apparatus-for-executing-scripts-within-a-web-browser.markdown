---

title: Method and apparatus for executing scripts within a web browser
abstract: One embodiment of the present invention provides a system that extends a scripting language native to a web browser to facilitate executing scripts within a web browser. During operation, the system receives a first command from a root script to initialize a first worker script within a web browser. In response to the first command, the system: creates a first operating-system thread, wherein the first operating-system thread is associated with a first message queue; starts a first worker script-engine using the first operating-system thread; receives a first message at the first message queue to execute the first worker script; and in response to the first message, executes the first worker script within the first worker script-engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065659&OS=08065659&RS=08065659
owner: Google Inc.
number: 08065659
owner_city: Mountain View
owner_country: US
publication_date: 20070530
---
The present invention relates to web browsers. More specifically the present invention relates to a method and an apparatus for executing scripts within a web browser.

As web applications become increasingly complex scripting systems are often used to handle some of the more complex tasks. However scripting systems are presently defined as single threaded systems with sequential event models. This means that one event handler must return before the next event handler will execute.

This single threaded model creates problems for complex web applications. For example during the execution of a time consuming operation such as a heavy computational operation or a large input output operation the time consuming operation will block all subsequent operations on the page. In some cases this blocking can lead a user to believe that his or her browser has locked up. Furthermore in some web browsers the time consuming operation will also block every other page which is open in a tab or window in the same browser process.

In order to alleviate this problem some scripting systems allow an application to manually split large operations into smaller units. This allows an associated script engine to yield to a central manager after each of the smaller units. However splitting large operations into smaller units is tedious and difficult and requires additional bookkeeping which can cause a significant performance degradation.

Hence what is needed is a method and an apparatus for executing time consuming operations within a browser without the problems listed above.

One embodiment of the present invention provides a system that extends a scripting language native to a web browser to facilitate executing scripts within a web browser. During operation the system receives a first command from a root script to initialize a first worker script within a web browser. In response to the first command the system creates a first operating system thread wherein the first operating system thread is associated with a first message queue starts a first worker script engine using the first operating system thread receives a first message at the first message queue to execute the first worker script and in response to the first message executes the first worker script within the first worker script engine.

In some embodiments of the present invention the system receives a second command from the root script to initialize a second worker script within the web browser. In response to the second command the system creates a second operating system thread wherein the second operating system thread is associated with a second message queue starts a second worker script engine using the second operating system thread receives a second message at the second message queue to execute the second worker script and in response to the second message executes the second worker script within the second worker script engine. Note that the first thread and the second thread are executed in parallel.

In some embodiments of the present invention the system receives the root script within the web browser. Next the system creates a primary operating system thread wherein the primary operating system thread is associated with a primary message queue. Then the system starts a primary script engine using the primary operating system thread. Finally the system executes the root script within the primary script engine. The root script then creates the first command the second command the first message and the second message.

In some embodiments of the present invention the system receives a first status message from the first worker script at the primary message queue. The system also receives a second status message from the second worker script at the primary message queue.

In some embodiments of the present invention the system receives a third command to initialize a third worker script within the web browser. In response to the third command the system creates a third operating system thread wherein the third operating system thread is associated with a third message queue starts a third worker script engine using the third operating system thread receives a third message at the third message queue to execute the third worker script and in response to the third message executes the third worker script within the third worker script engine. Note that the first worker script creates the third command and the third message.

In some embodiments of the present invention a worker script can send messages to and receive messages from any other worker script. For example the first worker script may send a message to the second worker script instructing the second worker script to perform a task. Likewise the second worker script may send a message to the first worker script requesting that the first worker script perform a task.

In some embodiments of the present invention the system creates the first operating system thread by creating a first identifier for the first operating system thread and returning the first identifier to the root script. The system also creates the second operating system thread by creating a second identifier for the second operating system thread and returning the second identifier to the root script. In some embodiments of the present invention the root script controls the creation of the first operating system thread and the second operating system thread.

In some embodiments of the present invention the first command includes a first Uniform Resource Locator URL that specifies the location of the first worker script and the second command includes a second URL that specifies the location of the second worker script. During operation the system executes the first worker script by retrieving the first worker script from a location specified by the first URL. The system also executes the second worker script by retrieving the second worker script from a location specified by the second URL.

In some embodiments of the present invention the system receives a third command to initialize a second instance of the first worker script within the web browser. In response to the third command the system creates a third operating system thread wherein the third operating system thread is associated with a third message queue starts a third worker script engine using the third operating system thread receives a third message at the third message queue to execute the second instance of the first worker script and in response to the third message executes the second instance of the first worker script within the third worker script engine. Note that the first worker script creates the third command and the third message.

In some embodiments of the present invention initializing worker scripts involves blocking the root script until the worker scripts have completed initialization.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the claims.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. This includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

One embodiment of the present invention provides a system that extends a scripting language native to a web browser to facilitate executing scripts in parallel within a web browser. During operation the system receives a first command from a root script to initialize a first worker script within a web browser. In response to the first command the system creates a first operating system thread wherein the first operating system thread is associated with a first message queue starts a first worker script engine using the first operating system thread receives a first message at the first message queue to execute the first worker script and in response to the first message executes the first worker script within the first worker script engine.

In some embodiments of the present invention the system receives a second command from the root script to initialize a second worker script within the web browser. In response to the second command the system creates a second operating system thread wherein the second operating system thread is associated with a second message queue starts a second worker script engine using the second operating system thread receives a second message at the second message queue to execute the second worker script and in response to the second message executes the second worker script within the second worker script engine. Note that the first thread and the second thread are executed in parallel.

In some embodiments of the present invention the system receives the root script within the web browser. Next the system creates a primary operating system thread wherein the primary operating system thread is associated with a primary message queue. Then the system starts a primary script engine using the primary operating system thread. Finally the system executes the root script within the primary script engine. The root script creates the first command the second command the first message and the second message.

In some embodiments of the present invention the system receives a first status message from the first worker script at the primary message queue. The system also receives a second status message from the second worker script at the primary message queue.

In some embodiments of the present invention the system receives a third command to initialize a third worker script within the web browser. In response to the third command the system creates a third operating system thread wherein the third operating system thread is associated with a third message queue starts a third worker script engine using the third operating system thread receives a third message at the third message queue to execute the third worker script and in response to the third message executes the third worker script within the third worker script engine. Note that the first worker script creates the third command and the third message.

In some embodiments of the present invention a worker script can send messages to and receive messages from any other worker script. For example the first worker script may send a message to the second worker script instructing the second worker script to perform a task. Likewise the second worker script may send a message to the first worker script requesting that the first worker script perform a task.

In some embodiments of the present invention the system creates the first operating system thread by creating a first identifier for the first operating system thread and returning the first identifier to the root script. The system also creates the second operating system thread by creating a second identifier for the second operating system thread and returning the second identifier to the root script. In some embodiments of the present invention the root script controls the creation of the first operating system thread and the second operating system thread.

In some embodiments of the present invention the first command includes a first Uniform Resource Locator URL that specifies the location of the first worker script and the second command includes a second URL that specifies the location of the second worker script. During operation the system executes the first worker script by retrieving the first worker script from a location specified by the first URL. The system also executes the second worker script by retrieving the second worker script from a location specified by the second URL.

In some embodiments of the present invention the system receives a third command to initialize a second instance of the first worker script within the web browser. In response to the third command the system creates a third operating system thread wherein the third operating system thread is associated with a third message queue starts a third worker script engine using the third operating system thread receives a third message at the third message queue to execute the second instance of the first worker script and in response to the third message executes the second instance of the first worker script within the third worker script engine. Note that the first worker script creates the third command and the third message.

In some embodiments of the present invention initializing worker scripts involves blocking the root script until the worker scripts have completed initialization. In these embodiments when creating a worker script the root script waits synchronously until the worker script is fully initialized. Once the worker script is fully initialized both the worker script and the root script execute in parallel.

Clients can include any node on a network including computational capability and including a mechanism for communicating across the network.

Similarly servers can generally include any node on a network including a mechanism for servicing requests from a client for computational and or data storage resources.

Users and can include an individual a group of individuals an organization a group of organizations a computing system a group of computing systems or any other entity that can interact with computing environment .

Network can include any type of wired or wireless communication channel capable of coupling together computing nodes. This includes but is not limited to a local area network a wide area network or a combination of networks. In one embodiment of the present invention network includes the Internet. In some embodiments of the present invention network includes phone and cellular phone networks.

Database can include any type of system for storing data in non volatile storage. This includes but is not limited to systems based upon magnetic optical or magneto optical storage devices as well as storage devices based on flash memory and or battery backed up memory. Note that database can be coupled to a server such as server to a client or directly through a network.

Devices can include any type of electronic device that can be coupled to a client such as client . This includes but is not limited to cell phones Personal Digital Assistants PDAs smart phones personal music players such as MP3 players gaming systems digital cameras portable storage media or any other device that can be coupled to the client. Note that in some embodiments of the present invention devices can be coupled directly to network and can function in the same manner as clients .

Browser is loaded on client . In one embodiment of the present invention browser can include any program that is capable of displaying web pages that include scripts. Note that browser can be loaded on any computational device such as clients servers and devices .

Tab includes script engines . Each of these script engines executes in a separate operating system thread. Script engines include scripts respectively. In some embodiments of the present invention scripts are all loaded from the same web page being displayed in tab . Similarly tab includes script engine which includes script .

During operation the system receives a command to initialize a web page that includes a script in browser operation . In response to the command the system creates a worker pool operation with the following command 

Note that a worker pool comprises a collection of workers wherein each worker is an operating system thread that comprises a script engine and an associated script to execute. Also note that the code that creates the worker pool is implicitly a worker in that pool so that a web page s normal JavaScript code gets a worker ID and can receive messages just like any other worker in the worker pool can.

In response to the command the system also exposes an Application Programming Interface API for the worker pool to the script in the web page operation . For example presents an API for a worker pool in accordance with an embodiment of the present invention.

During execution of the JavaScript application in the web page the system calls createWorker full script to create workers as needed operation . In response to createWorker full script the system creates a new operating system thread and a message queue for this thread operation . Note that if this is the first createWorker call in the worker pool the system also creates a message queue for the root JavaScript code. 

Once the thread is created the thread starts a new single threaded JavaScript engine and initializes it with full script from the createWorker call operation . Once initialization is complete the thread signals the creating JavaScript code to continue executing in parallel operation . The thread then waits for messages to enter its queue. In some embodiments of the present invention full script is a Uniform Resource Locator URL that points to a location that includes the script to be executed.

Note that the system also associates the creating JavaScript code with the created JavaScript code operation and returns a unique ID so the creating code can communicate with the created code operation . Any JavaScript code can invoke createWorker including JavaScript code that was invoked in a previous createWorker call. The system may also insert the object google.scour.workerPool into the created code s global namespace so the created code can communicate with the worker pool.

When any member of the worker pool calls sendMessage message toWorker the system finds the message queue associated with toWorker and places message in the destination queue operation . Upon receiving this message the worker calls the onmessage JavaScript function set by the destination worker operation . Finally when the onmessage function returns the destination worker processes the next message in the destination worker s queue operation .

By utilizing the worker pool embodiments of the present invention can execute individual scripts or pieces of scripts in separate script engines in separate threads. Because of the worker pool the scripting language can include single threaded scripting languages and each script engine executes in a single threaded manner.

The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

