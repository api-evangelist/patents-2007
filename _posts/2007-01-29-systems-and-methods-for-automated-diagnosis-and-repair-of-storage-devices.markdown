---

title: Systems and methods for automated diagnosis and repair of storage devices
abstract: A peripheral electronic device includes a health check application configured to execute automatically upon connection of the peripheral device to a data source, such as a personal computer. The health check application can diagnose problems and if necessary, repair the problems with the peripheral device, the data source, or both. Examples of problems include corrupted data and indications of software, firmware, and hardware failures or impending failures. In some instances, the health check application can provide a warning of an impending failure. The health check application, after initially executing, can be triggered in various ways to scan again for problems. In addition to finding and repairing problems, the health check application can also attend to maintenance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08195444&OS=08195444&RS=08195444
owner: Storage Appliance Corporation
number: 08195444
owner_city: Richmond Hill
owner_country: CA
publication_date: 20070129
---
This application is a Continuation in Part of U.S. Non Provisional patent application Ser. No. 11 506 386 filed on Aug. 18 2006 and entitled Data Backup Devices and Methods for Backing up Data now U.S. Pat. No. 7 818 160 which is a divisional application of U.S. Non Provisional patent application Ser. No. 11 492 380 filed on Jul. 24 2006 and entitled Emulation Component for Data Backup Applications now U.S. Pat. No. 7 813 913 which claims the benefit of U.S. Provisional Patent Application No. 60 725 225 filed on Oct. 12 2005 and entitled A Method Apparatus and a System for Removable Media Device Emulation on an External Storage Device via an Emulation Component for the Purpose of an Electronic Data Backup Appliance U.S. Provisional Patent Application No. 60 814 687 filed on Jun. 19 2006 and entitled Portable Electronic Data Backup Appliance Based on Integrated Circuit IC Memory and U.S. Provisional Patent Application No. 60 817 540 filed on Jun. 30 2006 and entitled Portable Data Backup Appliance for Utilizing a Recordable Media Burner Device this application also claims the benefit of U.S. Provisional Patent Application No. 60 762 823 filed on Jan. 30 2006 and entitled A Method and a Process for the Automated Self Diagnosis and Repair of an Electronic Data Backup Appliance. Each of the aforementioned applications is incorporated herein by reference.

The present invention relates generally to the field of digital data management and more particularly to systems for data backup applications.

Digital content represented by digital data files of various file types is rapidly replacing other forms of content. Documents presentations photos movies and music for example are increasingly produced and stored digitally. A problem for many individuals and organizations is that digital content typically stored on a computer hard drive can be poorly organized and needs to be archived to be protected against accidental loss. For example digital photo files on a personal computer PC are likely to be found in numerous folders photos transferred from a digital camera are stored in one set of folders photos received as e mail attachments are stored in other folders and photos downloaded from websites are stored in still other folders.

One approach to archiving digital content is to periodically backup all of the data files on the computer preserving the existing organizational structure. While this technique is effective to preserve digital content against accidental loss the technique has several shortcomings. For one the resulting copy is no better organized than the original so misplaced or disorganized content remains misplaced or disorganized. Also backing up all data files requires substantial memory capacity to copy numerous files that are otherwise already preserved elsewhere. Application specific files for example originally loaded onto the computer from a compact disc CD are already archived on the CD and therefore do not need to be backed up.

The necessary storage capacity for a complete backup can be obtained with writable data storage media such as hard disc drives HDDs however these require device installation and software set up when first connected to a system. In order to complete these steps a user may have to provide information about the existing system which the user may not readily know. Also the user may have to make decisions regarding the configuration of the device and the backup software. The number of steps involved with installation and set up as well as the complexity of some of the steps dissuades many users from bothering with backup applications. The expense of a writable data storage media with enough capacity to perform a complete backup can also dissuade users from performing complete backups. Furthermore some users having bought and installed the necessary storage capacity are dissuaded from performing frequent backups due to the length of time the system is tied up while performing a complete backup.

Alternately a user can manually select a set of files from a directory and copy the selected files to a storage device. While this alternative may allow usage of a smaller memory device that does not require installation and set up steps manually selecting files is time consuming. Also manually selecting files creates the possibility of an accidental omission of some files.

Another issue with some existing data backup solutions is the reliability of the storage device on which the backed up files have been saved. If data files are backed up onto a HDD for example and the HDD later fails the backed up files may be unrecoverable.

What is needed therefore is the ability to selectively backup digital content in a manner that is inexpensive convenient and that provides enhanced storage device reliability by identifying and resolving or avoiding problems.

An exemplary data backup system comprises a communication interface a first storage device and an emulation component. The first storage device includes a writable data storage medium comprising first and second logical storage areas and in some embodiments the first logical storage area stores a data backup application. The emulation component is in communication between the first storage device and the communication interface. The emulation component comprises logic configured to represent the first logical storage area as an auto launch device and additional logic configured to represent the second logical storage area as a second storage device including a writable data storage medium. It will be appreciated that the logic of the emulation component can be implemented through software hardware firmware or a combination thereof.

The emulation component of the exemplary data backup system can also comprise in some embodiments logic configured to receive auto launch device commands from the communication interface translate the auto launch device commands to first storage device commands and send the first storage device commands to the first logical storage area and additional logic configured to receive first storage device responses from the first logical storage area translate the first storage device responses into auto launch device responses and send the auto launch device responses to the communication interface. The emulation component can further comprise logic configured to receive second storage device commands from the communication interface and send the second storage device commands to the second logical storage area and additional logic configured to receive second storage device responses from the second logical storage area and send the second storage device responses to the communication interface.

In some embodiments the first storage device comprises a HDD and in some of these embodiments the first and second logical storage areas comprise first and second partitions of the HDD. In other embodiments the first storage device comprises solid state memory or an optical device. Suitable solid state memories include any solid state memory that can be written at least once including a Secure Digital SD memory card a Compact Flash CF memory card or a memory stick. Suitable optical devices include CD and Digital Video Disc DVD drives. Exemplary writable data storage media for these drives include Compact Disc Recordable CD R and Compact Disc ReWritable CD RW media and Digital Video Disc Recordable DVD R and DVD R and Digital Video Disc ReWritable DVD RW and DVD RW media respectively.

An exemplary method for backing up data stored on a data source comprises returning a response to an inquiry from the data source. The response identifies a first storage device of a first device type as instead being of a second device type. Here the second device type belongs to a class of device types that upon connection to the data source will trigger an operating system of the data source to automatically execute a backup application stored on the first storage device. The exemplary method further comprises providing the backup application to the data source to selectively copy data stored on the data source. Providing the backup application includes receiving auto launch device commands from the data source translating the auto launch device commands into first storage device commands and sending the first storage device commands to the storage device. Providing the backup application also includes receiving first storage device responses from the first storage device translating the first storage device responses into auto launch device responses and sending the auto launch device responses to the data source.

In some embodiments the method for backing up data stored on the data source also comprises selectively copying data files to a second storage device and in some embodiments the first storage device comprises the second storage device. In other embodiments selectively copying data files includes sending copied files to a web based storage facility. Selectively copying data files can include searching one or more storage devices associated with the data source for data files that meet a predefined criterion for example that the data files have not previously been copied to a data backup system or that the data files have a file type associated with a type of content. Selectively copying data files can also include creating a directory structure on the second storage device to indicate the location of a copied file on the data source. Selectively copying data files can further include determining whether a data source has been previously paired with a data backup system. Selectively copying data files can be initiated in some embodiments by a user command or by connecting a removable storage device to a communication port of a data backup system.

Another exemplary system of the invention comprises a communication interface a first storage device including a writable data storage medium comprising first and second logical storage areas and an emulation component in communication between the first storage device and the communication interface. The first logical storage area of the writable data storage medium includes computer readable instructions of a health check application. The emulation component comprises logic configured to represent the first logical storage area as an auto launch device and logic configured to represent the second logical storage area as a second storage device including a writable data storage medium. In some embodiments the first logical storage area further includes computer readable instructions of a backup application. The system can also comprise a controller chip in communication between the first storage device and the communication interface. The controller chip can comprise firmware including additional computer readable instructions of the health check application. In some embodiments the emulation component resides on the controller chip.

Another exemplary system of the invention comprises a communication interface a first storage including computer readable instructions of a health check application and an emulation component in communication between the storage device and the communication interface. Here the emulation component is configured to represent the storage device as an auto launch device receive auto launch device commands from a data source addressed to the auto launch device translate the auto launch device commands to storage device commands and send the storage device commands to the storage device and receive storage device responses from the storage device translate the storage device responses into auto launch device responses and send the auto launch device responses to the data source.

Another exemplary system of the invention comprises a communication interface a storage device a printed circuit board comprising a component in communication between the storage device and the communication interface and including computer readable instructions of a health check application and an emulation component in communication between the storage device and the communication interface. The emulation component is configured to represent the storage device as an auto launch device receive auto launch device commands from a data source addressed to the auto launch device translate the auto launch device commands to storage device commands and send the storage device commands to the storage device and receive storage device responses from the storage device translate the storage device responses into auto launch device responses and send the auto launch device responses to the data source. In some embodiments the storage device comprises additional computer readable instructions of the health check application.

Another exemplary method of the invention comprises automatically launching a health check application to run on a data source by connecting the data source to a system comprising a data storage device including computer readable instructions of the health check application gathering information about the system and processing the information. In various embodiments gathering information about the system includes obtaining from a log database historical information about the system obtaining a manufacturer specification obtaining real time values or obtaining user settings. Processing the information can comprise applying diagnostic rules comparing a real time value against a manufacturer specification or determining the utility to perform the service on the system. In the latter instance the service can comprise a repair or maintenance. The method can also comprise in some embodiments initiating a scan and storing a log file to a log database displaying a warning on a display device of the data source or gathering and processing information about the data source and running a utility to perform a service on the data source.

A data backup system is provided for personal as well as commercial applications. The data backup system of the present invention allows files to be selectively copied from a data source such as a personal computer to a storage device according to some criteria such as file type. For example the system can be configured to backup audio files having recognized music file extensions such as .mp3 and way or image files having recognized image file extensions such as .jpg .pct and .tif. The data backup system according to some embodiments stores a backup application that automatically launches when the data backup system is connected to the data source. The backup application can be configured to require little or no user input to perform the backup process.

The data backup system can take a number of different forms. One example is an appliance that includes both the backup application and sufficient storage capacity for copied files. Another example is a device that includes the backup application and an interface for connecting sufficient storage capacity in the form of a storage device such as an external HDD or flash memory device. In both examples the system includes an emulation component. The emulation component makes the portion of the data backup system that contains the backup application appear to the data source as if it were of a particular device type. More specifically the backup application portion of the data backup system is represented as being one of a class of storage devices referred to herein as auto launch devices. Emulating an auto launch device allows the data backup system to take advantage of automatic execution capabilities of certain operating systems so that the backup application will automatically be executed when the device is connected to a data source running the operating system.

As shown in the backup system comprises a communication interface an emulation component and a storage device that includes a first logical storage area and second logical storage area . The communication interface allows the data source to communicate with the emulation component of the backup system according to a communication protocol. The communication interface can be for example USB FireWire or a wireless interface such as infrared Bluetooth or WiFi.

It will be appreciated that the backup system can include a plurality of communication interfaces of the same or of different types to accommodate multiple and or different data sources . Depending on the type of communication interface the communication interface can include a communication port through which the connection to the data source is made. For instance a USB communication interface can include a USB communication port and a FireWire communication interface can include a FireWire communication port. Alternatively the communication interface can include a wireless antennae or an infrared transmitter receiver unit for sending and receiving infrared signals.

The storage device comprises a writable data storage medium and can be for example a HDD that has been partitioned into at least two logical storage areas. In this instance each logical storage area is a partition of the HDD. Suitable HDDs for the storage device include 1.0 inch 1.8 inch 2.5 inch and 3.5 inch hard drives having capacities of 20 to 60 gigabytes GB or more. Other suitable storage devices that include rewritable media are solid state memory devices such as SD memory cards and CF memory cards. The storage device can also be an optical device such as a CD drive or a DVD drive where the writable data storage medium within such an optical storage device can be either a write once medium such as a Compact Disc Recordable CD R DVD Recordable DVD R or DVD R or a rewritable medium such as a Compact Disc Rewritable CD RW or DVD Rewritable DVD RW or DVD RW .

The storage device can also be implemented by two different devices one dedicated to each of the two logical storage areas . For example the first logical storage area can be implemented by a CD drive with any CD media while the second logical storage area is implemented by a HDD. In a further example the first logical storage area can be implemented by a solid state memory while the second logical storage area is implemented by an optical device with a writable data storage medium. In this further example the two different devices could be contained within a common housing. It will be understood that the device types form factors and capacities provided herein are merely exemplary and not intended to be limiting.

In some embodiments the backup system further comprises a memory device interface that allows the first and second logical storage areas and to communicate with the emulation component . In these embodiments the memory device interface is of a type that is appropriate to the type of storage device . For instance an Integrated Drive Electronics IDE interface can be used with an IDE HDD storage device and a Small Computer System Interface SCSI interface can be used with a SCSI HDD storage device . Alternately the memory device interface can be a SD memory card host interface where the storage device is a SD memory card. The interface can also be a wireless interface such as infrared WiFi and Bluetooth. The memory device interface can be implemented in the backup system by an integrated circuit IC chip or through the use of discrete components. The memory device interface is integrated into the memory device in some embodiments. It will be appreciated that in the embodiments noted above that employ multiple storage devices the backup system can include multiple memory device interfaces as appropriate.

The first logical storage area represents a logical area of the memory device that is meant to be inaccessible to the user and safe from accidental erasure. The first logical storage area can contain for example a backup application system files drivers and other setup and configuration software. The first logical storage area is represented to the data source by the emulation component as being an auto launch device. As used herein auto launch devices are those devices that will trigger the automatic execution functionalities of certain operating systems such as the AutoRun function of the Microsoft Windows operating system. Examples of device types that will trigger AutoRun of Windows include CD and DVD drives when a CD or DVD medium is contained therein. In these examples the Windows AutoRun functionality is triggered either when the CD DVD is placed in the CD DVD drive already connected to the data source or when the CD DVD drive already containing the CD DVD medium is connected to the data source .

The second logical storage area represents a logical area of the memory device that is dedicated to storing backed up data. Accordingly the emulation component represents the second logical storage area to the data source as being a device type that includes a writable data storage medium. The second logical storage area can be represented as a HDD CF or a SD memory card for example. In some embodiments the second logical storage area can be represented as the same type of device as the storage device . In other embodiments the second logical storage area can be represented to be a different device type than the storage device .

The emulation component provides certain functions to the backup system and can be implemented through logic such as software firmware hardware or any combination of these. It will be understood that within an embodiment different functions of the emulation component can be implemented with different forms of logic. Thus while one function of the emulation component is implemented through firmware for example another function can be implemented through software.

In one embodiment the emulation component includes an IC. For example the emulation component can be implemented using software firmware hardware or some combination thereof incorporated in a USB controller chipset. In some USB specific embodiments the emulation component implements some or all of a number of layered industry standards. Examples of such standards include USB Specification Revision 2.0 USB Mass Storage Class Bulk Only Transport Revision 1.0 SCSI Primary Commands 3 SPC 3 SCSI Block Commands 2 SBC 2 Multimedia Commands 4 MMC 4 and AT Attachment with Packet Interface 6 ATA ATAPI 6 . It should be noted that in some embodiments the emulation component may only support subsets of the commands of these industry standards.

Functions provided by the emulation component can include representing the first logical storage area as an auto launch device and representing the second logical storage area as a device including a writable data storage medium. Accordingly the data source will recognize the data backup system as two attached devices when connected to the backup system . It should be noted however that in some embodiments the contents of these two devices are not accessible to the user of the data source but are accessible by the backup application which is configured with appropriate application programming interface API calls. This serves to protect the contents of both the first and second logical storage areas from accidental modification or erasure. To access the backed up data from the second logical storage area in some embodiments the data backup system restores the data to the data source or copies the data to yet another device. In other embodiments the virtual device that represents the second logical storage area is accessible to the user while the virtual device that represents the first logical storage area is not accessible. In these embodiments the user is allowed direct access to the contents of the second logical storage area but not the first logical storage area .

Another function that can be provided by the emulation component is translating commands and responses between formats such as between the command sets for a HDD and a CD drive. In this way when the data source sends a command to the backup system addressed to the auto launch device as the first logical storage area is represented to be the emulation component translates the command from an auto launch device format to the appropriate format for the storage device before sending the command to the first logical storage area . Similarly responses from the first logical storage area in the format of the storage device are translated into the auto launch device format and sent to the data source so the response appears to have come from an auto launch device.

It should be noted that translation between CD drive and HDD formats is but one example and in some embodiments the emulation component can implement one or more analogous format translations. As used herein a storage device command refers to a command in an appropriate format for the specific storage device and a storage device response refers to a response in the same format. As a specific example an auto launch device command refers to a command in an appropriate format for a specific auto launch device and an auto launch device response refers to a response in the same format.

Still another function that can be provided by the emulation component is to pass commands and responses between the data source and the second logical storage area . When the commands received by the emulation component are already in the proper format for the storage device the emulation component does not have to translate commands or responses. Here the emulation component receives commands from the data source addressed to the device that includes the writable data storage medium and passes the commands to the second logical storage area . In a similar fashion responses are relayed back to the data source without translation. It will be appreciated that the emulation component can be configured to represent the second logical storage area as being of a different type of device than the memory device . In these embodiments the emulation component is configured to translate between the formats of the memory device and the device type of the representation of the second logical storage area .

The data backup system can also comprise a removable storage device interface to allow a removable storage device including a writable data storage medium to be attached externally to the data backup system by way of a communication port . The removable storage device interface provides communication between the emulation component and the removable storage device . In some embodiments the removable storage device interface is configured to support a removable device with an integrated medium such as a flash memory device or a HDD. In other embodiments the removable device can be one that accepts removable media such as a CD drive.

It will be appreciated that the removable storage device interface is optional as the copied files do not necessarily have to be stored to a memory device that is associated with the data backup system . Alternately the backup application can direct copied files to be stored to an existing internal or external drive of the data source or to a networked drive. In still another option the backup application can send copied files over an Internet connection to be stored at a web based storage facility.

It should be noted that the backup systems can include a display or other visual indicator such as a light emitting diode LED to show files being copied for instance though some embodiments do not include the display to lower the cost and increase the durability of the backup systems . The backup systems can run off of a battery an external power source e.g. an AC power outlet or off of power supplied by the data source . In some embodiments the connection is a cable that is part of the backup system . The backup systems can also be configured as a cradle designed to receive the removable storage device or the data source where the data source is a consumer electronic device such as a digital camera.

Providing the data backup system can include providing data backup system or data backup system for example. In those embodiments in which the data backup system is used providing the data backup system can include for example connecting a removable storage device to the communication port . Where the removable storage device is for example a SD or CF memory card connecting the removable storage device to the communication port can include inserting the memory card into the communication port . Alternately where the removable storage device is a HDD connecting the removable storage device to the communication port can include coupling the communication port to the removable storage device with a connection such as a cable or a wireless link.

With reference to data backup systems connecting the data backup system to the data source can include coupling the communication interface to the data source with the connection . Connecting the data backup system to the data source also includes the data source recognizing the data backup system as two new devices. For example some operating systems periodically query unused ports for newly attached hardware. An exemplary process by which the data backup system can be recognized by the data source as being two attached devices is described below with respect to .

Connecting the data backup system to the data source automatically launches a backup application. Operating systems that include an automatic execution function such as the AutoRun capability of the Windows operating system can execute applications that are resident on an auto launch device. Here the automatic execution function of the data source s operating system recognizes the backup application as an application to be launched and automatically launches the backup application to run on the data source.

Connecting the data backup system to the data source can also comprise translating commands and responses between device formats as communications are passed between the data source and the data backup system as discussed above with respect to the functionality of the emulation component . Thus for example CD read commands sent to the backup system are translated to HDD read commands before being sent to the first logical storage area .

Selectively copying the data files from the data source can include running the backup application on the data source where the backup application is configured to search one or more storage devices associated with the data source. The backup application can in some embodiments search directories of internal storage devices external storage devices and network drives that are accessible to the data source. The backup application selectively copies files to a storage device including a writable data storage medium such as the second logical storage area or the removable storage device .

The backup application selects files that meet at least one criterion such as file type e.g. .jpg or type of content e.g. audio files . The backup application can also find files that meet at least one of several criteria. Other examples of types of content include e mails business application data e.g. Accpac and Simply Accounting files digital video files ebook files contacts files calendar files text files tasks files settings files bookmark files and password files. Another criterion in some embodiments is whether a file has been previously backed up. Yet another criterion can be a particular date or a range of dates. The backup application in some embodiments finds files that meet the criteria by searching e mail attachments and files embedded within other files such as compressed files within a zip file. The backup application can find files that are stored directly on the data source or additionally on associated peripheral devices and networks.

The backup application can in some embodiments create a file path or directory structure on the writable data storage medium of the data backup system to indicate the location where a copied file was located on the data source. In other embodiments the backup application creates a new directory structure based on chronological order alphabetical order file size or some other criteria. Another alternative is for the backup application to create a monolithic file that includes all of the backed up files. Yet another alternative is for the backup application to store on the writable data storage medium the backed up files in a common directory i.e. a flat structure and to create an index e.g. an XML index that stores the information on file locations. In these embodiments when the backed up files are restored the index is used to re create the directory structure on the data source.

It will be appreciated that according to the method user involvement can be reduced to simply making a physical connection between a data backup system and a data source. While user involvement can be reduced to one or more simple operations it will be appreciated that options can be provided to the user through a graphical user interface GUI provided by the backup application on a display device of the data source. In this way the user if desired can customize the backup process by specifying search criteria such as a type of content or a file type to be copied. Additionally the user can limit the scope of the backup process by drive directory folder file type file size or date time stamp or the user can deselect a type of content or a specific file drive directory or folder such as a temporary folder or an Internet Explorer directory.

As noted selectively copying the data files from the data source can include running the backup application on the data source. In addition to the above functions of the backup application the backup application can also be configured to perform the following functions as part of selectively copying the data files. For example the backup application can wait a predetermined length of time and then repeat the backup process so long as the backup system remains connected to the data source . The backup application can also perform a self diagnostic routine at predetermined intervals. The backup application can also be configured to wait for a predetermined period of time before performing an automatic backup to provide the user an opportunity to customize the backup process. Additionally the backup application can be configured to selectively copy the data files only upon a user command rather than automatically. The user command can be entered through the GUI on the data source or can be provided by a button or switch on the data backup system. Alternately the backup application can be configured to selectively copy the data files whenever a removable storage device is connected to the communication port .

Copying the data files in some embodiments includes determining whether the data source has been previously paired with the data backup system e.g. the data source was previously backed up with the data backup system . This can include for example searching for a marker that was previously left on the data source or comparing a marker saved on the data backup system with an identifier of the data source such as a volume label. The marker allows the backup application to recognize the data source. In some embodiments the backup application determines a course of action based on whether the data source has been previously paired with the data backup system and if so whether the data backup system already stores data associated with the data source. For instance the course of action can be an automatic backup of the data source either full or incremental a restoration of backed up data to the data source or a query to the user to make a selection between these or other alternatives.

Enumerating the data backup system is performed to identify the newly attached hardware in this case the data backup system and how the hardware is configured for communication. Enumerating comprises the data source assigning a unique device number and querying the data backup system for a device descriptor. The emulation component responds by providing a device descriptor to the data source. Enumerating further comprises the data source setting an address for the data backup system. Once the address has been set the data backup system obtains communication frames assigned to the address. Enumerating can also comprise the data source requesting and receiving detailed device information from the data backup system specifically the emulation component such as class subclass and protocol.

Enumerating also comprises the data source starting an appropriate USB mass storage class driver and the USB mass storage class driver requesting the number of LUNs from the data backup system with a GET MAX LOGICAL UNIT NUMBER command. Enumerating also comprises the data backup system and more specifically the emulation component responding to the GET MAX LOGICAL UNIT NUMBER command by communicating two LUNs to the data source.

Representing the two LUNs through initialization comprises the emulation component receiving a number of SCSI commands directed to each LUN from the data source. The emulation component handles each LUN independently. The emulation component responds to those SCSI commands that it recognizes and generates a standard error condition in response to SCSI commands that are not recognized. Each SCSI command and any errors that are generated are typically handled before the next SCSI command is issued to either LUN. It will be understood that the sequence of SCSI commands sent to the LUN representing a storage device including a writable data storage medium can be different from those sent to the LUN representing an auto launch device. Additionally SCSI commands or a sequence of SCSI commands may be repeated multiple times by the data source and sequences of SCSI commands directed to the two LUNs can be interlaced.

For both LUNs the sequence of SCSI commands starts with the USB mass storage class driver issuing an INQUIRY command to identify the device type. The emulation component returns a response to represent a storage device such as second logical storage area as a storage device that can include a writable data storage medium. A response of 0x00 for example indicates that the storage device is a HDD. Similarly the emulation component returns a response to represent a storage device such as first logical storage area as an auto launch device. A response of 0x05 for instance indicates that the auto launch device is a CD drive. The storage device that can include a writable data storage medium can additionally be marked as either removable or non removable while the auto launch device can be marked as removable. After this point the sequence of SCSI commands for the two LUNs diverge. It will be appreciated that the order of SCSI commands in the sequences described below are exemplary and the order of the SCSI commands will vary with different data sources. Also in some instances one or more of the SCSI commands provided below are omitted and or other SCSI commands are included.

An exemplary sequence of SCSI commands directed to the storage device that includes the writable data storage medium continues with a READ FORMAT CAPACITIES request that the data source uses to determine whether the writable data storage medium is unformatted. Ordinarily the medium of the storage device being represented is already formatted and the emulation component responds accordingly. Otherwise the data source will attempt to format the medium of the storage device. Next the data source issues a READ CAPACITY request to identify the capacity of the writable data storage medium and its block size and the emulation component returns this information as well. A READ 10 command is issued to read the first block on the writable data storage medium. The first block has a logical block addressing LBA value of zero LBA 0 and contains the Master Boot Record MBR which itself contains the partition table for the writable data storage medium. The emulation component responds with the contents of the requested block.

A MODE SENSE 6 command is then used to extract the capabilities of the storage device including the writable data storage medium such as whether the storage device contains a disk cache. The emulation component replies as appropriate to the capabilities of the storage device being represented. Another READ 10 command is issued to recover the first block of the file system that contains the root directory. The first block of the file system can be located at LBA 0x3F for example but can vary depending on the particular type of file system being represented. The emulation component returns the first block of the file system. Finally the data source can issue a TEST UNIT READY request before reading the full contents of the root directory etc. Here the emulation component responds affirmatively so that the data source will regard the storage device that includes the writable data storage medium as operational. The data source thereafter issues more read write requests as necessary.

An exemplary sequence of SCSI commands directed to the auto launch device continues with a GET CONFIGURATION request to obtain information about the capabilities of the auto launch device and its ability to read or write different types of optical media e.g. CD R CD RW DVD R DVD R DVD RW DVD RW etc. The emulation component responds with capabilities that are appropriate for the auto launch device being represented to the data source. This can be followed by a READ CAPACITY request to discover if there is a medium present in the auto launch device. The emulation component is configured to respond by failing the initial attempt. In response the data source will issue a REQUEST SENSE command to access the extended error information. In the reply the emulation component sets the Sense Key to UNIT ATTENTION and sets the Additional Sense Code to POWER ON. The data source will then repeat the READ CAPACITY request and the emulation component will respond with a capacity such as the size of the first logical storage area .

To learn what types of status change events the read only media device supports the data source issues an initial GET EVENT STATUS NOTIFICATION request and the emulation component responds with a set of coded status fields. The data source can then repeat the GET EVENT STATUS NOTIFICATION request with a field set to a status entry to be checked. If the operational status field is enabled for example the emulation component will respond with an operational change event and a status code representing a feature change. This response can trigger the data source to issue further GET CONFIGURATION request s to discover which feature if any has changed.

The data source can also issue a MODE SENSE 10 request for Page Code 0x2A known as the MM Capabilities and Mechanical Status Page. The emulation component will respond with information that is typical for a simple auto launch device that includes read only support for CD R and CD RW media. This echoes the information that is returned in response to the GET CONFIGURATION request.

At this point the data source can issue a TEST UNIT READY command. This triggers two sequences of request response events in the emulation component that can support the automatic execution functionality of different operating systems. The commands in the two sequences can be interlaced and the events will remain pending until the emulation component has passed through all of the expected states. As outlined below both sequences are typical for an operating system such as Windows XP. The sequences below do not account for the number of times that a request or a sequence of requests can be repeated. Also the particular sequence of events can vary depending on the type and version of the operating system executing on the data source. Additional or substitute commands can also be issued.

The first sequence comprises a series of TEST UNIT READY commands from the data source to the auto launch device. The emulation component is configured to fail the first request. The data source then sends a REQUEST SENSE command to obtain the extended error information and the emulation component sets the sense key to NOT READY with an additional sense code of MEDIUM NOT PRESENT. The data source then repeats the TEST UNIT READY command which the emulation component again fails. The data source again sends a REQUEST SENSE command and the emulation component responds with a sense key set to UNIT ATTENTION and an additional sense code of MEDIUM MAY HAVE CHANGED. All subsequent TEST UNIT READY commands are typically responded to without error.

The second sequence comprises a series of GET EVENT STATUS NOTIFICATION requests from the data source to the auto launch device. Following the first TEST UNIT READY command that triggers the first sequence the data source issues a GET EVENT STATUS NOTIFICATION request with the operational change field enabled. The emulation component responds with an operational change event and a status code representing a feature change. On the following GET EVENT STATUS NOTIFICATION request the media status field is enabled. The emulation component responds with a media event a status code representing new media and a flag set to indicate that the media is present. On all subsequent GET EVENT STATUS NOTIFICATION requests where the media status field is enabled the emulation component responds with a media event and with the media present flag set but the status code will not indicate new media. In the case where a GET EVENT STATUS. NOTIFICATION request is issued and the expected status field is not enabled the emulation component responds as appropriate for the current state of that event.

At the end of either or both of these sequences the data source can send a READ TOC PMA ATIP request to read the Table Of Contents TOC from the medium of the auto launch device. The TOC includes information on the number of tracks on the medium and the start position of each. The emulation component responds with entries for a default configuration namely a single data track that starts immediately after the lead in area. The default TOC declares that the first block of data on the medium starts at address zero. The position of a last track is fixed in the emulation component and represents the space allocated to the data on the auto launch device such as the backup application.

When the data source makes a read request of the auto launch device the emulation component automatically translates the logical address into a corresponding physical address of the storage device e.g. first logical storage area that is being represented as the auto launch device. In addition where the block sizes of the storage device e.g. a HDD partition that is being represented as the auto launch device e.g. a CD drive are different the emulation component also translates the required amount of auto launch device data into the appropriate number of blocks on the storage device.

After the method has been completed the data source recognizes one LUN as an auto launch device and another LUN as a storage device including a writable data storage medium and is properly configured to communicate independently with each. Thereafter selectively copying the data files from the data source can commence. As described above this can include the operating system of the data source automatically launching a backup application from the LUN being represented as the auto launch device and writing selected data from the data source to the LUN being represented as the storage device including a writable data storage medium.

As provided above with respect to the first logical storage area of the backup system can comprise in addition to or in lieu of the backup application various system files drivers and other setup and configuration software. One such additional application that can be included in the first logical storage area is a health check application. Like the backup application the health check application can be launched automatically upon connection of the backup system to the data source .

The health check application in various embodiments runs diagnostics on the backup system the data source or both. These diagnostics can evaluate software firmware and or hardware in some embodiments. In addition to running diagnostics the health check application can also perform other functions such as installing updates and running maintenance and repair utilities tools and services. The health check application can alternatively be implemented in either a software layer a firmware layer the basic input output system BIOS or a combination thereof.

With respect to the backup system the health check application is desirable to provide increased data integrity. Specifically the health check application can warn a user of an impending problem in time to copy the data files stored on the backup system to other storage. The health check application can also in some embodiments repair certain problems with the backup system in order to extend the useful lifetime of the backup system . It will be appreciated that the data source can similarly benefit from the automatic features of the health check application. While the embodiments described herein pertain particularly to HDDs the useful lifetimes of other storage devices and the data integrity of data stored thereon can likewise be extended through the use of analogous diagnostic maintenance and repair utilities.

In some embodiments the health check application comprises a number of sub components and in further embodiments the sub components are distributed across different components. For example sub components of the health check application can reside on the data source the controller chip and the first logical storage area of the hard disk . As noted previously the health check application can be implemented in either a software layer a firmware layer the BIOS or a combination thereof. Thus sub components including a log database described below a GUI and diagnostic maintenance and repair utilities can reside on the data source while other sub components reside in firmware of the PCB .

The methods described below with respect to can utilize various utilities. These utilities can be implemented through software firmware hardware or combinations thereof. Various utilities reside on the data source or the backup system and more specifically as executable code stored in the first logical storage area or in the CPU or the controller chip . Alternatively the methods can utilize various utilities made available across a network to which the data source is connected. Exemplary networks include the Internet intranets and local area networks LANs . In some embodiments of the methods two or more utilities can be run in parallel. Before describing the methods referred to by a number of utilities are first described.

An example of a utility that can be used by the health check application is a sector swap utility. This utility can automatically hide bad sectors of a hard disk and relocate any data stored therein to other sectors. In some examples of this utility a number of reserve sectors are maintained in a reserve zone to replace bad sectors. A map of relocated sectors can be stored in the firmware of the HDD storage device and loaded to a controller Read Only Memory ROM when the HDD storage device is powered up. Other utilities that can be used by the health check application include the Windows disk utilities such as Disk Cleanup and Disk Defragmenter.

Still another example of a utility that can be used by the health check application is a Self Monitoring Analysis and Reporting Technology SMART utility. The SMART utility takes advantage of the understanding that most HDD faults occur from a progressive degradation of mechanical and electrical components. Accordingly the SMART utility monitors certain operational parameters that are known to correlate to failures. Should such a parameter drift outside of an acceptable range or exceed a threshold suggesting a likelihood of a pending catastrophic failure the SMART utility can trigger other utilities and or provide an informational message to the user to immediately safeguard the data before the catastrophic failure occurs. Other actions that can ensue include changing the user display disallowing further data files to be backed up to the backup device and or shutting down the backup device .

Still other utilities monitor certain environmental conditions of the HDD storage device such as acceleration and temperature. The impact sensor in the HDD storage device can respond to a sudden change in acceleration in some examples by rapidly parking the magnetic heads before damage to the hard disk can occur. A typical impact sensor comprises a piezoelectric sensor that produces an electrical voltage spike when subjected to a mechanical shock. Filtering of the output of the impact sensor can help limit the response to only those impacts that would likely cause damage to the hard disk . Similarly the temperature sensor can be employed to shut down the HDD storage device if the temperature within the HDD storage device becomes too hot or too cold or changes too abruptly.

Turning to examples of methods shows a flow chart representation of an exemplary method for diagnosing a backup system and implementing an appropriate response thereto. It will be appreciated that although the method is described with reference to a backup system the method is equally applicable to any system that can emulate an auto launch device. The method comprises connecting a backup system to a data source automatically launching a health check application gathering information processing the information invoking a utility and determining whether additional diagnostics are required. If further diagnostics are required the method returns to gathering information.

Connecting the backup system to the data source has been previously described with respect to connecting the data backup system to the data source . Connecting the backup system to the data source automatically launches the health check application by taking advantage of an automatic execution function of the operating system of the data source as described herein with respect to automatically launching a backup application. Alternatively the health check application can be launched at other times such as in response to a triggering event like the detection of a fault during a backup a user request an elapsed length of time exceeding a threshold capacity of a storage device of the backup system and so forth. With reference to executable code for the health check application can reside on the first logical storage area . When launched the health check application runs on the data source and communicates with the controller chip . The health check application can run before or after the backup application performs a backup or can run concurrently with the backup application in some embodiments.

Gathering information provides the health check application running on the data source with diagnostic information from one or more sources as shown in . One exemplary source of information is one or more log files of historical information that can be maintained within a log database that is stored for example on the data source. Log files and log databases are discussed further below. Another exemplary source of information that can be gathered by the health check application are manufacturer specifications . Manufacturer specifications can include ranges and thresholds established by the manufacturer of the HDD such as the normal operating temperature range.

External notifications real time values e.g. the temperature as measured by the temperature sensor and user settings represent further sources of information that can be gathered by the health check application. User settings refer to parameters that can be altered by a user for instance through a GUI provided by the health check application on a display device of the data source. Such parameters can include the types of health checks to be applied to the backup system the frequency with which the checks are performed and the depth of the checks. In some embodiments the health check application includes default values for these parameters. In one embodiment the parameters are grouped together to comprise user settings of low medium and high with medium as the default setting. By selecting between the user settings the user may make a trade off between security and time efficiency with a setting of high offering the greatest security at the expense of being the most time consuming with a setting of low offering the fastest backup at the expense of reduced security.

Processing the gathered information comprises the health check application applying diagnostic rules such as comparing real time values against manufacturer specifications . By processing the gathered information a problem with the backup system may be determined. As noted above a problem can be any of a broad range of issues with examples including an operating temperature within the backup system that is too high the existence of a bad sector out of date software or firmware an indication of an impending catastrophic failure and so forth. Even in the absence of a problem the application of the diagnostic rules may determine that a maintenance utility should be employed.

Processing the gathered information can comprise a complete self diagnostic health check of the components of the backup system including the PCB the controller chip the hard disk for problems that could lead to hardware or firmware failures. Processing the gathered information also can examine any data stored on the hard disk for evidence of corruption.

In some instances in response to identifying a problem the health check application presents the user with a notification concerning the nature of the problem and suggested solutions. Based on the user s input the health check application can invoke a utility to address the problem. In other instances the health check application invokes a utility automatically. Where the identified problem is out of date software or firmware the health check application can obtain and install an update for the software or firmware. Similarly in the absence of a problem the health check application can either suggest a maintenance utility or invoke such a utility automatically. Where no problem is found and no need for maintenance or other action is determined by processing the gathered information invoking a utility is skipped.

Next the health check application determines whether additional diagnostics are required. If further diagnostics are required the method returns to gathering information otherwise the method ends. Additional diagnostics can be required for example after a repair or maintenance utility has been invoked in order to determine whether the utility was effective. If not or if only partially effective the same utility can be invoked again or another utility can be invoked . In some embodiments further diagnostics are required based on elapsed time since the last iteration of the method . In these embodiments the method does not end but idles at determining whether additional diagnostics are required until a sufficient period of time has elapsed. The method can also idle while waiting for another trigger such as the beginning or the end of a data backup a request from the user to initiate a health check or a threshold capacity of the hard disk has been exceeded such as 80 of capacity.

As noted the health check application can create and maintain a log file of historical information. The historical information can pertain to both hardware and software related parameters and can be automatically collected from a variety of sources. Examples of such sources include the backup application firmware and software updates data integrity checks hard disk scan and repair utilities and the SMART utility. User warnings and user actions taken in response can also be recorded in the log file .

Preferably each time a monitored value changes the new value is recorded in the log file . Stored values can comprise for example information about the backup system usage including the last time the backup application was run the amount of data stored on the backup system the frequency with which the backup application has been run and details pertaining to the previous backup session full or incremental successful or not etc. . Other stored values can include values determined by the SMART utility results of previous health checks previous warnings previous repair history including corrective actions taken by the user the degree of fragmentation of the hard disk the total number of backed up files and their average file size and user settings . Still further values comprise the histories of firmware and software updates a list of utilities available to be invoked by the health check application and the presence of an internet connection for downloading or updating firmware the health check application or the utilities that can be invoked .

The log database provides log files of historical information. The log database can be a relational database or file based in various implementations. The log database in some embodiments comprises a plurality of sub components and in further embodiments the sub components reside in different locations such as some on the data source and others on the backup system . As one example the log database can comprise a file based log on the hard disk configured to provide information to a relational database log residing on the data source .

Based on the gathered and processed information the health check application next initiates a light weight scan that is appropriate for the hard disk of the backup system to test the fitness and integrity of the hard disk as well as any data stored thereon. The light weight scan checks the hard disk for any apparent issues that could cause the hard disk to fail and for possible corrupted stored data. The selection of the particular utility to perform the light weight scan will depend on the particular rules implemented by the health check application and the particular utilities that are available to the health check application. The results of the light weight scan are collected in a log file and stored in the log database .

If the light weight scan detects a problem then the health check application initiates a detailed scan that is appropriate for the hard disk otherwise the method terminates at this point. Another log file is created with the detailed scan results and also stored in the log database and if a problem is still detected a repair utility that is appropriate for the hard disk and the type of detected problem is selected and run resulting in another log file . Otherwise the method terminates at this point.

If the problem is still detected either another utility can be selected and run or the user can be warned with an appropriate warning displayed on a display device of the data source. The warning on the display device can indicate a level of severity of the problem. If the problem is not detected the method can terminate. Warning the user can also comprise in some embodiments creating an audible alarm from either of the data source or backup system. Additionally warning the user can comprise sending an e mail alert or a network message. Successive warnings to the user can become more drastic. In some instances warning the user can comprise preventing a backup from starting halting a backup in progress or powering down the backup system.

Optionally if the problem is still detected the health check application can also return to gathering and processing information to try again. In either event another log file is created and stored to the log database . If the selected utility is able to repair the problem and no problem is detected a log file is again created with the details pertaining to the utility and the repair and stored to the log database and the method can terminate. Although not shown in in some embodiments if the repair is successful rather than terminating the method returns to gathering and processing information to verify that no further problems exist.

It will be understood that if either of the light weight or detailed scans do not result in a problem being detected although the method can terminate in the alternative the health check application can instead run one or more maintenance utilities such as Disk Cleanup and Disk Defragmenter before ending. Again with each utility that is run a log file can be created and stored to the log database . The decision to run a maintenance utility can be based on various factors such as the length of time since the last maintenance utility was run.

Additionally it will be understood that initiating the light weight scan is optional in some embodiments. For example the health check application can be configured to bypass the light weight scan in favor of the detailed scan if no log file exists as would be the case for instance the first time the health check application is executed. In another example if the user setting is high for the degree of security the light weight scan will be bypassed in favor of the detailed scan in some embodiments. Similarly the health check application can opt to bypass both the light weight and detailed scans if there is enough information available from either of the real time information or the historical information available in the log database to suggest that a repair utility should be engaged immediately. This situation is described with reference to .

As suggested above in some instances gathering and processing information will indicate a repair should be performed thus a repair utility that is appropriate for the hard disk and the indicated problem is selected and run . As above a log file is created and stored to the log database . If the repair utility is not successful and the problem is still detected either another utility can be selected and run or the user can be warned with an appropriate warning displayed on a display device of the data source. Optionally the health check application can also return to gathering and processing information to try again. In either event another log file is created and stored to the log database . If the selected utility is able to repair the problem and no problem is detected a log file is again created and the method can terminate. Although not shown in in some embodiments if the repair is successful the method returns to gathering and processing information to verify that no further problems exist.

In some instances real time information that is gathered and processed will indicate the necessity to bypass the repair utility and progress directly to warning the user. For example a normal operating temperature range for the HDD storage device is 5 C. to 40 C. and the SMART utility reports a consistent temperature of 42 C. over a certain period of time. As in method warning the user can further comprise powering down the backup system to allow the backup system to cool.

In the foregoing specification the invention is described with reference to specific embodiments thereof but those skilled in the art will recognize that the invention is not limited thereto. Various features and aspects of the above described invention may be used individually or jointly. Further the invention can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive. It will be recognized that the terms comprising including and having as used herein are specifically intended to be read as open ended terms of art.

