---

title: Format negotiation for media remoting scenarios
abstract: Format negotiation for media remoting involves at least one media data format. In an example embodiment, a media format negotiation for playing media data is begun between a server and a client. The media data format is transferred from the server to the client. A notification that indicates if an attempt at the client to construct a media topology responsive to the media data format was a success or a failure is transferred from the client to the server. Whether and/or how the media data is to be transferred from the server to the client may be impacted by the notification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234385&OS=08234385&RS=08234385
owner: Microsoft Corporation
number: 08234385
owner_city: Redmond
owner_country: US
publication_date: 20070516
---
Media data may be played locally on a processing device with a local media player. Typically a processing device retrieves media data for a local media player. The local media player performs a series of operations on the media data to transform it. The transformed media data is then presented by the processing device via a display screen and or speaker.

The transformed media data is usually much larger in size than the media data when it is initially retrieved. In other words the transformed media data usually occupies relatively more memory for storage and consumes a relatively greater bandwidth during transmission. This larger size can therefore cause difficulties when media data is played in a remoting scenario in which less than all of the playing activities are conducted at a single location.

Format negotiation for media remoting involves at least one media data format. In an example embodiment a media format negotiation for playing media data is begun between a server and a client. The media data format is transferred from the server to the client. A notification that indicates if an attempt at the client to construct a media topology responsive to the media data format was a success or a failure is transferred from the client to the server. Whether and or how the media data is to be transferred from the server to the client may be impacted by the notification.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

Media playback in a local scenario usually involves a media player creating a media topology. The topology includes source nodes that provide media data intermediate nodes that transform the data and or apply various effects and sink nodes that render the data. These different nodes in a media topology are typically driven by a clock that controls the timing of data flow. A high level overview of an example approach to media playback in a local scenario is described below with particular reference to .

Source node reads media data e.g. from a file a network etc. and forwards the media data to intermediate node s of the media topology chain of media playback topology . Intermediate node s perform various operations on the media data to transform it. These operations may include decoding re sampling and so forth. A final intermediate node forwards the transformed media data to sink node . Sink node renders the media data on an appropriate device . An appropriate device includes a window for video or a speaker for audio or both for multimedia media data.

The media playback approach described above with reference to is adequate for media playback in local scenarios. However from time to time media playback in a remoting scenario is requested. Terminal server based remoting scenarios by way of example only provide for a desktop remoting experience in which a thin client can connect remotely over a network to another computer e.g. the terminal server to attain a remote desktop experience. In such a terminal server scenario the applications run on the server and they provide the desktop experience by remoting their output e.g. graphics with respect to their visual output to the client device over a network.

If media data is played on the server in a session with a terminal server based remoting scenario various performance problems typically result. Such performance problems usually result from sending fast changing bitmaps over network links e.g. using a remote desktop protocol RDP etc. and from the loss of synchronization between the video and the audio for multimedia media data. More specifically the fast moving video frames result in an extraordinary amount of bitmap data that has to be transferred to the client. This results in a very high bandwidth and server CPU usage. Additionally the audio and video tend to become unsynchronized because the timing information is often lost when sending video frames through rendered bitmaps e.g. using a graphics device interface GDI etc. .

One approach to addressing these problems is to send encoded audio video data directly to the client and to decode render the data on the client. As a result timing information and thus audio and video synchronization can be maintained. Such an audio video remoting approach is affected however by the ability of the client to decode the provided audio video data. Also with certain server configurations the server session operates more smoothly when the server learns beforehand if the client has available to it decoders that can support the requested audio video data. For instance some terminal server configurations involve separate topology creation phases and media playback phases that inhibit backtracking.

A procedure for determining if the client has available decoders that can support the requested audio video data is often termed format negotiation. Learning if a client can handle the audio video data beforehand can enable a server in certain configurations to fallback on bitmap based remoting or to disable the playback at the client device in a remoting scenario by constructing an appropriate media playback topology at the server at an appropriate time.

Example embodiments address one or more issues of media format negotiation between a server and a client. In a described implementation a server performs a media format negotiation with a client during or at least prior to the completion of the server media topology construction phase e.g. before playback actually starts . The result of the media format negotiation is a relatively definitive response from the client that indicates if the client is able to decode media data received from the server in an identified media data format e.g. a particular video and or audio format . Also the negotiation need not depend on any direct enumeration to the server of the formats supported by the client hence reliability may be increased. If the identified media data formats are not supported by the client then the server may fallback on the bitmap based remote playback or may disable remote playback for the client in a remoting scenario.

In an example embodiment server includes or otherwise has access to media data such as media data that is being stored S . Media data may be multimedia media data. In operation server engages in media related communications with client . Examples of media communications include but are not limited to media data format negotiations media data transfers and so forth. Upon receiving media data client presents e.g. plays displays etc. the received media data on media data presentation device . Media data presentation device may be coupled to or integrated with client . Media data presentation device may be a display screen a speaker a window on a display screen multiple such devices some combination thereof and so forth.

Server may be any device that is capable of providing a media playing remoting scenario for a client . Server may be a web server a local area network LAN wide area network WAN etc. server a cable network head end a home media server a desktop computer some combination thereof and so forth. Client may be any device that is capable of receptively participating in a media playing remoting scenario. Client may be a notebook or desktop computer a mobile telephone a personal media player a set top box a television or other entertainment device a personal digital assistant PDA or highly portable computer a home media server some combination thereof and so forth.

Network s may be comprised of one or more similar or different network types. By way of example only network may be a wired network or a wireless network an internet a LAN WAN etc. a cellular network a cable telephone or digital subscriber line DSL network an Ethernet network a mesh network a Wi Fi network a WiMAX network some combination thereof and so forth. Although only one client is explicitly shown a single server may be simultaneously providing a remoting media playback experience to multiple such clients over network s .

Example environment illustrates a server side on the left and a client side on the right. An example implementation of the server side with a constructed media topology is described herein below with particular reference to . An example implementation of the client side with a constructed media topology is described herein below with particular reference to .

Server media module includes a media data format administrator . Client media module includes a media topology constructor . Server media module and client media module may be comprised of multiple other modules. Media data format negotiation may include multiple negotiation related communications such as communications A and B . Remoting media playback scenario also includes media data that is in transit T .

Server and client media modules and may be realized as processor executable instructions in hardware firmware software fixed logic circuitry some combination thereof and so forth. The module s may form part of another application such as an operating system a media player and so forth. The module s may also form a separate application may form one or more plugins for an application and so forth. Server and client may be realized as devices. Example devices are described further herein below with particular reference to .

In an example embodiment media data format negotiation includes at least two media related communications A and B . Media data format administrator ascertains at least one media data format of identified and or requested media data. The identified media data is usually requested by client . Media data format administrator sends at least one media data format A to media topology constructor . It should be understood that other media modules at the server and or the client may facilitate the transfer of communications between media data format administrator and media topology constructor .

Media topology constructor attempts to construct at client a media topology responsive to media data format A . If media topology constructor is capable of constructing a media topology to play media data in the at least one media data format then the attempt is successful. If media topology is unable to construct the media topology the attempt is failed. Media topology constructor sends a topology construction notification B indicating the result of the topology construction attempt to media data format administrator . By way of example only the indicated result of topology construction notification B may be success or failure.

If the indicated result is success server media module learns that a media topology has been successfully constructed by client media module . Consequently server media module may send media data in transit T in an unrendered form of media data format A toward client media module . If on the other hand the indicated result is failure server media module learns that a media topology was not successfully constructed by client media module . Consequently server media module may send media data in transit T in a rendered form e.g. as bitmapped images toward client media module . Alternatively a failure result may prompt media data format administrator to send another media data format A toward media topology constructor when the requested media data is available in another format. Furthermore a failure notification may alternatively precipitate a disallowance of remoting media playback with client for the requested media data.

In an example embodiment server media module of of server constructs media playback topology which may then function as a module thereof. In operation source node retrieves the identified media data e.g. from media data in storage S . The media data may be retrieved from for example a file a network and so forth. Source node forwards the retrieved media data to intermediate node s of a media topology nodal chain of media playback topology . Intermediate node s may perform various operations on the media data. Because the rendering is being performed at the client these operations may include any of those that do not transform the data. Intermediate node s e.g. a final intermediate node if multiple ones are present forwards the media data to server transmission sink node .

Server transmission sink node sends unrendered media data towards the client. It also sends events that are relevant to playing the media data such as clock state transitions towards the client. Thus server transmission sink node sends media data in transit T toward the client. Media playback topology on the client side is described below with particular reference to .

In an example embodiment client media module of of client constructs media playback topology which may then function as a module thereof. In operation client reception source node receives media data in transit T from the server e.g. directly or indirectly from server transmission sink node . Client reception source node forwards media data to intermediate nodes of a media topology nodal chain of media playback topology .

Intermediate node s perform various operations on the media data to transform the media data into renderable media data. By way of example only such operations may include decoding re sampling and so forth. Intermediate node s e.g. a final intermediate node if multiple ones are present forwards the renderable media data to sink node . Sink node renders the media data on an appropriate device e.g. media data presentation device of at client . An appropriate device includes by way of example but not limitation a display screen or window thereof for video or a speaker for audio or both for multimedia types of media data.

In an example embodiment starting at block a format negotiation begins between a server and a client for a media remoting scenario. For example a media data format negotiation may be initiated between a server media module of a server and a client media module of a client .

At block the server sends at least one media data format to the client. For example a media data format administrator of server media module may send at least one media data format A to client media module over networks . For instance one video format and one audio format may be sent. Alternatively one video or one audio format but not both may be sent. Furthermore multiple media data formats may be sent to client media module so that a media topology for each of them may attempt to be constructed either sequentially or in parallel.

At block the client receives the at least one media data format from the server. For example media topology constructor of client media module may receive media data format A from media data format administrator .

At block the client attempts to construct a media topology at the client with a success or failure resulting. For example media topology constructor may attempt to construct a media topology at client . This attempt may be a success or a failure.

At block the client sends a notification to the server indicating the result of the media topology construction attempt. For example media topology constructor may send a topology construction notification B indicating a success or a failure result to media data format administrator . If multiple media data formats are sent to media topology constructor multiple media topology constructions may be attempted until a successful result is achieved or until all received media data formats are exhausted. In this embodiment notification B may explicitly indicate the media data format for which a media topology was successfully constructed.

At block the server receives from the client the notification indicating the result of the media topology construction attempt. For example media data format administrator may receive topology construction notification B from media topology constructor .

At block the server determines if the media topology construction attempt at the client resulted in a success or a failure. For example media data format administrator may determine if topology construction notification B indicates a successful result or a failure result. If the indicated result was a success flow diagram continues at block diagram . If the indicated result was a failure flow diagram continues at block .

At block the server constructs a media topology at the server using a server transmission sink node that does not render the media data. For example server media module may add a server transmission sink node to a media topology at server . In such an example embodiment media topology is not completely constructed until a successful result is indicated in a notification received from the client. One or more other nodes e.g. source node intermediate nodes etc. may be constructed prior to receiving the notification.

At block the server sends unrendered media data to the client. For example server media module may send unrendered media data from server transmission sink node over network to a client reception source node of client media module . The unrendered media data may then be transformed at intermediate nodes and rendered at sink node on client .

At block the server repeats the method of flow diagram e.g. from block or the server implements a fallback option. For example if fewer than all available media data formats have been sent to client for a media topology construction attempt then at block a different media data format may be sent to the client. Alternatively or after the available media data formats are exhausted a fallback option may be implemented. Example fallback options include but are not limited to the server sending bitmap images to the client the server disallowing remoting media playback on the client and so forth.

As illustrated there are three server components and and two client components and . These components include a server media player a terminal server remoting plugin a format handler a terminal server client and media playback infrastructure . Server media player is a specific example of media player . Terminal server remoting plugin is a plugin for server media player to facilitate providing media playback in terminal server type remoting scenarios. Format handler is a specific example of media data format administrator .

Terminal server client is realized as a custom media player that is a specific example of duplicated media player that is capable of interacting with format handler . Media playback infrastructure is a specific example of media playback topology at the client. Terminal server client and media playback infrastructure jointly perform at least some of the functionality of media topology constructor as is described further herein below. By way of example only one or more of these components may be implemented using Media Foundation technology.

At action it is checked if server media player is running in a remote session. At action server media player instructs terminal server remoting plugin to update the partial media topology. At action terminal server remoting plugin finds source node s for the media topology. At action terminal server remoting plugin ascertains the media format s of the source of the identified audio and video media data. At action terminal server remoting plugin asks format handler to determine if the ascertained audio and video formats are supported by the requesting client.

At action of sequence diagram portion B of format handler checks a format cache to determine if the requesting client has an entry therein. If so then it may be determinable from the format cache that the requesting client does support the ascertained media formats. If not then the sequence continues at action . At action format handler asks terminal server client if the client supports the indicated audio and video formats.

At action terminal server client instructs media playback infrastructure to create a media session. At action terminal server client creates a custom media source e.g. client reception source node for a media topology. At action terminal server client constructs additional nodes to form a partial media topology. At action terminal server client instructs media playback infrastructure to resolve the media topology responsive to the indicated audio and video formats.

At action format handler informs terminal server remoting plugin that media remoting is enabled. At action terminal server remoting plugin constructs the server media topology with terminal server sink s e.g. with a server transmission sink node . At action terminal server remoting plugin returns control to server media player with terminal server media remoting enabled.

At action format handler informs terminal server remoting plugin that media remoting is not enabled. Two example fallback options A and B are illustrated. As a first fallback option at action A terminal server remoting plugin returns control to server media player with bitmap based media remoting enabled. As a second fallback option at action B terminal server remoting plugin constructs the server media topology with a null sink. Then at action B terminal server remoting plugin returns control to server media player with no media playback remoting enabled for the requesting client for the requested media data in this session.

As illustrated two devices and are capable of engaging in communications via network . Communications include by way of example but not limitation media related communications . Although two devices are specifically shown one or more than two devices may be employed depending on implementation.

Generally a device may represent any computer or processing capable device such as a server device a workstation or other general computer device a data storage repository apparatus a personal digital assistant PDA a mobile phone a gaming platform an entertainment device a router computing node a mesh or other network node a wireless access point some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media include processor executable instructions .

In a described implementation of device I O interfaces may include i a network interface for communicating across network s ii a display device interface for displaying information on a display screen iii one or more man machine interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports a network communications stack a radio and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen or monitor and so forth. Examples of iii man machine interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard a remote a mouse or other graphical pointing device etc. .

Generally processor is capable of effectuating performing and or otherwise executing processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device . Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth.

Thus realizations for format negotiation for media remoting scenarios may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media storage and transmission media e.g. wireless or wired communication channels hard coded logic media combinations thereof and so forth. Media is tangible media when it is embodied as a manufacture and or composition of matter. For example media may include an array of disks or flash memory for longer term mass storage of processor executable instructions random access memory RAM for shorter term storing of instructions that are currently being processed and or otherwise executed link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein. Such functions include but are not limited to i those functions of server media module or client media module ii those actions that are illustrated in flow diagram of and or the sequence diagrams of iii the functions of components of et seq. iv the nodes of media playback topologies and of and so forth.

The devices actions aspects features functions procedures modules data structures protocols components communications etc. of are illustrated in diagrams that are divided into multiple blocks and other elements. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks and or other elements can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses arrangements etc. for format negotiation for media remoting scenarios.

Although systems media devices methods procedures apparatuses mechanisms schemes approaches processes arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

