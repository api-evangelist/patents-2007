---

title: Providing a computing system with real-time capabilities
abstract: A computing system is provided with real-time capabilities so that the system is capable of running applications such that one or more real-time criteria are satisfied. An interrupt architecture of the computing system is disabled. The interrupt architecture generates interrupts sent to a firmware of the computing system in response to events. A different architecture is substituted within the computing system for the interrupt architecture. The different architecture is responsive to the events without violating the real-time criteria. In response to the events occurring, the different architecture causes one or more corrective actions to be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230446&OS=08230446&RS=08230446
owner: International Business Machines Corporation
number: 08230446
owner_city: Armonk
owner_country: US
publication_date: 20071128
---
The present invention relates generally to computing systems and more particularly to providing such computing systems with real time capabilities so that the computing system can run applications such that one or more real time criteria are satisfied.

In financial markets defense online gaming and other types of applications computing systems may be required to have real time capabilities. A computing system with real time capabilities means that the computing system can run applications such that one or more real time criteria are satisfied. In particular such real time criteria usually specify the maximum length of time in which an application is permitted to respond to a given request made of the application. In so called extreme or premium real time environments this length of time may be specified as 100 microseconds or less.

Many types of computing systems have interrupt architectures in which non maskable interrupts that are generated such as interrupts that are known as system management interrupts SMI s are transmitted to the firmware of the computing systems for appropriate handling. These types of interrupts can denote thermal events which indicate that a computing system is running at a greater than specified operating temperature. These types of interrupts can further denote power consumption events indicating that the computing system is consuming more than a specified amount of power as well as error events such as single bit memory errors.

These types of interrupts are typically not preemptible. That means that if such an interrupt is generated the processor of the computing system in question automatically halts whatever it is currently doing so that the firmware is able to respond to the interrupt. An interrupt architecture in which interrupts are handled in this manner typically does not present any issues for many types of applications and for many types of computing systems. However this kind of interrupt architecture can be problematic for real time computing systems in which applications have to be guaranteed that they can respond to received requests in accordance with one or more real time criteria.

For example a given real time application running on a computing system may normally be able to respond to requests in less than the maximum length of time specified by the real time criteria. However if during the processing of such a request a processor of the computing system is interrupted so that the firmware can respond to a generated interrupt the application may not be able to respond to the request in less than the maximum length of time specified by the real time criteria. This is because the time it takes for the firmware to process the interrupt delays the application from completing its response to the request.

Simply disabling the interrupt architecture of a computing system however is not a viable option. The interrupt architecture of a computing system performs needed functionality. That is thermal events power consumption events and error events are types of events that ultimately have to be processed in order for the computing system in question to perform and to be monitored properly. Thus disabling the interrupt architecture without taking other action may ensure that applications can run in real time in accordance with one or more real time criteria but may cause other problematic consequences. These consequences can include the computing system running at an operating temperature greater than specified consuming more power than specified running at reduced performance due to having to correct single bit memory errors and or data corruption due to multiple bit memory errors.

The present invention provides a computing system with real time capabilities so that the computing system can run applications such that one or more real time criteria are satisfied. A method of one embodiment of the invention disables an interrupt architecture of the computing system. The interrupt architecture generates interrupts sent to a firmware of the computing system in response to events. The method substitutes a different architecture within the computing system for the interrupt architecture of the computing system. The different architecture is responsive to the events without violating the real time criteria. As such in response to the events occurring the different architecture causes one or more corrective actions to be performed.

Still other aspects and embodiments of the invention as well as advantages provided by embodiments of the invention will become apparent by reading the detailed description that follows and by referring to the accompanying drawings.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and logical mechanical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

The method generally provides a computing system with real time capabilities so that the computing system is capable of running applications such that one or more real time criteria are satisfied. The applications may be financial markets defense online gaming or other types of application computer programs. The real time criteria may specify that the applications executed on the computing system are guaranteed to be able to respond to requests made of them in no more than a predetermined amount of time such as 100 microseconds or less in one embodiment.

The method disables an interrupt architecture of the computing system . The interrupt architecture generates interrupts that are sent to a firmware of the computing system in response to specific types of events occurring. The firmware may be a basic input output system BIOS or another type of firmware. The BIOS for instance may be considered a set of routines stored in a non volatile semiconductor memory of the computing system that provides an interface between the operating system of the computing system and the hardware of the computing system. However interrupts that are normally handled by the operating system such as input output I O device and timer interrupts are not disabled. That is these operating system handled interrupts are not interrupts that are generated within the interrupt architecture that is disabled in part of the method . Rather the interrupt architecture that is disabled in part may just be responsible for generating interrupts that are handled by the firmware of the computing system and not interrupts that are handled by the operating system.

The interrupts that when generated are sent to the firmware may be non maskable interrupts in that they cannot be masked such that they are always sent to the firmware when the interrupt architecture of the computing system is enabled. As such disabling the interrupt architecture disables these non maskable interrupts from being sent to the firmware in response to specific types of events occurring. In one embodiment these non maskable interrupts are particularly system management interrupts SMI s . An SMI is a hardware interrupt in some types of processors that are used for power management and other purposes as can be appreciated by those of ordinary skill within the art.

The events that the occurrence of which results in interrupts being generated within the interrupt architecture can include thermal events power consumption events and error events. A thermal event may specify that one or more different operating temperatures of the computing system have exceeded preset specified temperature thresholds. A power consumption event may specify that the computing system is consuming more power than a preset specified power consumption threshold. An error event may specify that a single bit memory error has occurred that is a memory error has occurred in relation to a single bit of the memory of the computing system or that another type of memory error or another type of error has occurred.

The method substitutes a different or additional architecture within the computing system for the interrupt architecture of the computing system that has been disabled . The different architecture is also responsive to the types of events that the interrupt architecture is responsive to such as thermal events power consumption events and error events. However the different architecture is responsive to these types of events without violating the real time criteria in contradistinction to the interrupt architecture of the computing system which can violate the real time criteria in responding to events as has been described in the background section.

Specific details of an exemplary different architecture of the computing system that can be substituted in part of the method are presented later in the detailed description. In response to a thermal event a power consumption event an error event or another type of event occurring the different architecture of the computing system causes one or more corrective actions to be performed . These corrective actions are intended to mollify the causes that resulted in the events being generated. Specific details of exemplary such corrective actions that can be performed in part of the method are presented later in the detailed description.

As a general example however in response to a thermal event the different architecture may cause the computing system to run cooler so that the operating temperature of the computing system is below the prespecified temperature threshold. Similarly in response to a power consumption event the different architecture may cause the computing system to consume less power so that the power consumption is below the prespecified power consumption threshold. In response to an error event the different architecture may attempt to rectify the error that resulted in the event or configure the computing system so that the error does not affect operation of the computing system.

As such the different architecture of the computing system is able to respond to events such as thermal power consumption and error events as well as other types of events that are not handled by the operating system i.e. that are sent to a firmware of the computing system for handling without violating the real time criteria and so that the computing system maintains its real time capabilities in this respect. By comparison the interrupt architecture of such a computing system is not guaranteed to be able to respond to such events without violating the real time criteria and without the computing system maintaining its real time capabilities in this respect. Therefore the different architecture of the computing system is responsive to the same types of events that the interrupt architecture is but in a way that ensures that the real time criteria are satisfied.

In one embodiment the computing system may be implemented in accordance with a blade paradigm. The computing devices in this embodiment are blade computing devices that are inserted into the shared or common chassis . Each computing device may then be assigned to an individual end user remotely located from the blade computing device or a number of users may have their own virtualized computing devices shared on the same one or more blade computing devices .

Due to their size blade computing devices may have no internal storage devices or a very limited number or size of internal storage devices such as hard disk drives. Rather they may be commonly assigned at least a portion of a storage device that is communicatively connected to all the blade computing devices which is not depicted in . For example one relatively common approach is to have a storage area network SAN that includes a number of SAN storage devices. A logical disk may be defined on one or more of these SAN storage devices for utilization by a given blade computing device . For example such a logical disk may store the operating system OS instance that controls the blade computing device in question.

The computing device includes an instance of an operating system OS that runs on the hardware of the computing device . One or more real time applications in turn run on the OS . The applications are real time applications in that they have to be able to respond to requests made of them such that one or more real time constraints are satisfied. For example as has been described above in relation to the method they may have to be able to respond to such requests in less than a prespecified length of time. Because the real time applications are running on the OS of the computing device the computing device and any computing system of which it is a part is one that has real time capabilities in this respect.

As is customary the computing device includes an interrupt architecture by which events such as thermal power consumption and error events are detected to result in the generation of interrupts such as non maskable interrupts like system management interrupts SMI s . The interrupts are relayed to firmware which may be a basic input output system BIOS . In response the firmware automatically processes the interrupts . As such the firmware interrupts any other processing by the processors . For instance if the processors are currently performing real time operations for the real time applications these operations may be delayed sufficiently to result in the applications not being able to satisfy the real time criteria.

Therefore the computing device includes a substitute architecture that can replace or operate in lieu of the interrupt architecture . The substitute architecture is the different or additional architecture that has been referred to in relation to the method of . It is noted that the interrupt architecture may be responsible for generating just interrupts that are normally handled by the firmware such that the substitute architecture replaces or operates in lieu of this particular interrupt architecture . As such interrupts that are normally handled by the operating system such as input output I O device and timer interrupts are not disabled.

That is these operating system handled interrupts are not interrupts that are generated within the interrupt architecture . Rather the interrupt architecture that is replaced by the substitute architecture may just be responsible for generating interrupts that are handled by the firmware of the computing system and not interrupts that are handled by the operating system. The substitute architecture can in one embodiment include a diagnostic utility modifications made to the OS hence the inclusion of the OS inside the substitute architecture in and or one or more interfaces and .

The architecture is responsive to the events without violating the real time criteria under which the real time applications run. In this respect then the architecture is fundamentally different than the interrupt architecture . That is the interrupt architecture can violate the real time criteria under which the real time applications run and does employ interrupts.

The diagnostic utility and or the modifications made to the OS are such that the events are monitored. For instance in it is shown that the diagnostic utility directly monitors the events but in another embodiment the OS upon modifications made thereto can directly monitor the events . The events are monitored in a preemptible manner. This means that if the real time applications require processing time on the processors to satisfy the real time criteria monitoring of the events can be preempted so that such monitoring does not prevent the applications from satisfying the real time criteria. This is contradistinction to generation of the interrupts and handling thereof by the firmware which preempt the processing of the applications by the processors .

The events may be monitored by periodically polling the baseboard management controller BMC various sensors busses fans blowers power supplies and so on as can be appreciated by those of ordinary skill within the art that result in generation of the events . For example temperature sensors within the computing device may be monitored to determine whether the current operating temperature exceeds a preset temperature threshold such that a thermal event is generated. As another example power circuitry within the computing device may be monitored to determine whether the current power consumption exceeds a preset power consumption threshold such that a power consumption event is generated. As a third example a bus within the computing device may be monitored to determine whether a flag has been set and or a counter has been incremented either of which correspond to a single memory bit error having occurred such that an error event is generated.

The diagnostic utility may again in a preemptible manner format the events detected and provide them to a driver of the OS via an appropriate interface of the OS such as an application programming interface API like the intelligent platform management interface IPMI . In this way the driver collects the events . During the monitoring and collection process as before the real time applications can preempt this monitoring and collection process at any time to ensure that the applications continue to satisfy the real time criteria. As such the monitoring and collection process may run at a lower priority than the applications do. The driver and the diagnostic utility may themselves be types of computer programs as can be appreciated by those of ordinary skill within the art.

The driver formats the events that have been collected so that the events are in a format understandable by i.e. expected by the firmware . At the appropriate time the driver informs the firmware that a given event has occurred to cause the firmware to take corrective actions and or to report that a given event has occurred. It is noted that the firmware may in one embodiment be considered part of the substitute architecture itself insofar as the firmware may be modified to take appropriate corrective actions. Exemplary corrective actions that can be taken are described later in the detailed description.

That the driver informs the firmware that a given event has occurred at the appropriate time means that the driver ensures that the firmware is informed such that it has sufficient time to perform the corrective actions without affecting the ability of the real time applications to satisfy the real time criteria. For example the processors may be running at a relatively high utilization rate. Therefore the driver may wait to inform the firmware of a given event until the utilization rate of the processors decreases so that any corrective actions taken by the firmware do not affect the ability of the applications from satisfying the real time criteria.

It is noted that the substitute architecture operates in a bottom up manner in contradistinction with the interrupt architecture which operates in a top down manner. That is in the substitute architecture the events are monitored by a relatively low level diagnostic utility for example and then are transmitted to a higher level driver of the OS and finally to the top level firmware . By comparison the interrupt architecture upon generation of an interrupt corresponding to an event immediately proceeds to the firmware which then may ask the OS and other lower level components to perform functionality.

The computing device in one embodiment may include the BMC or another type of service processor or secondary processor. The BMC can detect when the computing device has stopped responding due to for instance the OS and or the applications crashing or hanging. The BMC may further be the component that specifically collects environmental information such as temperature and power consumption information which are the subject of the events . The BMC can be the component that generates the interrupts within the interrupt architecture in one embodiment.

The BMC may further interact with components but that are part of the computing system of which the device is a part. These components may include an advanced management module AMM for instance. In this way the BMC may receive from the AMM the preset thermal threshold and the preset power consumption threshold that control whether certain events are generated. In this way as well the BMC and or the AMM may be able to externally expose outside of the computing device the thermal information and the power consumption information as well as other information regarding the computing device such as via the simple network management protocol SNMP as known within the art. That is the BMC may provide this information to the AMM .

The computing system may be operable in both a real time mode and a non real time mode. In the real time mode the interrupt architecture is disabled and the substitute architecture is instead enabled. In the real time mode the real time criteria have to be satisfied. In the non real time mode the interrupt architecture is enabled and the substitute architecture is disabled. In the non real time mode the real time criteria no longer have to be satisfied.

The OS indicates to the firmware that the computing device is to operate in the real time mode by communicating with the firmware via a real time enable interface which may be an API. In response the firmware disables the interrupt architecture and the OS itself enables the substitute architecture . Similarly the OS indicates to the firmware that the computing device is to operate in the non real time mode by communicating with the firmware via a real time disable interface which may also be an API. In response the firmware enables the interrupt architecture and the OS itself disables the substitute architecture . In one embodiment if the OS does not indicate to the firmware whether or not the computing device is to operate in the real time mode the firmware defaults to the non real time mode.

In one embodiment the interfaces and may each be or include the IPMI as known within the art. In this embodiment the IPMI is specifically used to inform the firmware and or the BMC to disable interrupts relating to throttling the frequency at which the processors operate for power consumption and or thermal purposes. Furthermore the interfaces and may be or include an SMI control register to inform the firmware to disable interrupts relating to single bit memory errors. Instead such single bit memory errors may be provided via the interface defined between the driver of the OS and the diagnostic utility .

It is noted that while the computing device is operating in the real time mode the firmware may nevertheless be able to detect that the computing device no longer has to operate in the real time mode. For example if the real time applications have hung or crashed then the computing device no longer has to operate in the real time mode. As such the firmware may require that the real time applications periodically reset a watch dog timer maintained by the firmware . If this timer is not periodically reset then it counts down to zero. When the timer reaches zero this can signify to the firmware that the real time applications are no longer operating correct. This is because the real time applications did not reset the timer as they were supposed to and the firmware thus concludes that the applications have hung or crashed. Therefore the computing device no longer has to operate in real time mode.

In embodiments of the invention therefore the interrupts are disabled and instead the OS and or the diagnostic utility feed diagnostic information such as the events back to the firmware instead of such events being transmitted to the firmware via the interrupts . The operating system and or the diagnostic utility can further be the instruments by which corrective actions are performed in addition to and or in lieu of the firmware . In one embodiment once the firmware has determined that such corrective actions are to be taken an SNMP trap may be employed via the AMM in one embodiment as understood by those of ordinary skill within the art to convey back to the OS and or the diagnostic utility the corrective actions that should be taken by the OS and or the utility .

However there may be situations where the OS is itself no longer operating properly e.g. as may be concluded when the watch dog timer described above is allowed to count down to zero such that the diagnostic utility also cannot operate properly due to it running on the OS . In such situations SNMP traps may be used so that the BMC and or the AMM announces the thermal power memory error or other types of failures to the computing system of which the computing device is a part. The computing system can then determine the appropriate corrective action that should be taken and cause this corrective action to be performed via communication with the BMC . For instance the BMC may be in communication with the AMM of the computing system that is not part of any of the computing devices of the system and from which the BMC can receive instructions as to the corrective actions that should be instituted. In one embodiment the corrective action may be performed by the operating system an application program or another type of computer program.

The interrupt architecture of the computing device is disabled . For instance non maskable system management interrupts SMI s may be disabled . Thereafter the different architecture is substituted within the computing system for the interrupt architecture where the different architecture does not violate the real time criteria in accordance with which the real time applications are to be run and does not employ the interrupts in contradistinction to the interrupt architecture . In one embodiment part can include performing part part part and or .

Thus the operating system OS may be modified and or a diagnostic utility can be provided so that the events are monitored in a preemptible manner such that the real time criteria are not violated and such that the interrupts are not generated as has been described in relation to the computing system of in the previous section of the detailed description. The interface between the driver of the OS and the diagnostic utility may be provided so that the driver collects and reduces the events in a format understandable by the firmware as has also been described in the previous section of the detailed description.

The interfaces and may be provided by which the firmware is notified that the real time mode of the computing device is to be enabled or disabled as has been described in the previous section of the detailed description. The firmware may be modified so that it is able to detect when the OS is no longer operating properly . For instance as has been described in the previous section of the detailed description a watchdog timer may be provided that if it counts down to zero it is presumed that the real time applications and or the OS have hung or crashed such that the computing device no longer has to operate in the real time mode.

When the computing device is operating in the real time mode the different architecture causes corrective actions to be performed in response to the events occurring . Examples of three such corrective actions are provided in parts and of the method in the embodiment of . First one or more of the processors of the computing device may be run at less than maximum clock frequencies . Such throttling reduces power consumption of the computing device as a whole as well as the operating temperature of the device as a whole. However reducing the clock frequencies at which the processors in question are run is achieved so that the real time criteria under which the real time applications run are not violated. If this is not possible then the clock frequencies are not reduced.

Second the computing device or another computing device within the chassis of the computing system may be shut down . Such shutdown reduces power consumption of the computing system as a whole and reduces the operating temperature of the computing system . For example the computing device may be operating at near maximization utilization of its processors to satisfy the real time constraints under which the real time applications are running. The resulting additional heat and power consumption may cause the computing system as a whole to generate too much heat or consume too much power. However another computing device within the same chassis of the computing system may be idling. This other computing device may therefore be shut down so that the power consumption and the operating temperature of the computing system as a whole are both below maximally allowed values. As such the real time criteria of the real time applications are still satisfied because the computing device on which the applications are actually running is unaffected.

Third one or more of the real time applications may be migrated from the computing device to another computing device within the same chassis or indeed to a computing device within another chassis altogether. For example the events may indicate that the computing device no longer has redundant power supply capabilities and or redundant cooling capabilities such as fans . As such the real time applications may be migrated from the computing device to another computing device so that performance of the real time applications is not affected if the computing device later fails. It is noted that the migration is performed so that the real time criteria governing execution of the real time applications are not violated. For instance the real time applications may be duplicated on another computer device and the instance of the applications running on the computing device removed after the applications have been successfully duplicated on the other device.

As another example the events may indicate that the computing device is under thermal stress and or power consumption stress such that the device has an operating temperature greater than a temperature threshold and or that it is consuming more power than a power consumption threshold. As such the real time applications may be migrated from the computing device to another computing device to rectify these problems. As before the migration is performed so that the real time criteria governing execution of the real time applications are not violated.

Embodiments of the invention that have been described provide for advantages over the prior art. In particular a computing system is provided with real time capabilities in that real time criteria governing execution of real time applications are satisfied. Such real time capabilities are provided for by disabling the interrupt architecture of the computing system and replacing this architecture with a different architecture. The different architecture still provides for monitoring and responding to thermal power consumption and error events as well as other types of events. However the different architecture provides for a bottom up process by which these events are monitored and responded to which does not employ non maskable interrupts so that processing of the real time applications vis vis the real time criteria is unaffected. By comparison employing an interrupt architecture which provides for a top down process by which the events are monitored and responded to can affect the processing of the real time applications vis vis the real time criteria causing the criteria to be violated.

It is noted that although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is thus intended to cover any adaptations or variations of embodiments of the present invention. Therefore it is manifestly intended that this invention be limited only by the claims and equivalents thereof.

