---

title: Using an event manager to effect a library function call
abstract: An event manager can be used to effect a library function call from a caller service processor application to a data processing function in a library. The library is compiled into a callee service processor application, including passing, by the caller service processor application to the event manager through the caller service processor application's API, an event representing the library function call; passing, by the event manager to the callee service processor application, the event representing the library function call; executing by the callee service processor application the library function call, including retrieving return data from the library function call; returning, by the callee service processor application to the event manager, an event representing the return data from the library function call; and returning, by the event manager to the caller service processor application, the event representing the return data from the library function call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08087036&OS=08087036&RS=08087036
owner: International Business Machines Corporation
number: 08087036
owner_city: Armonk
owner_country: US
publication_date: 20070808
---
The field of the invention is data processing or more specifically methods apparatus and products for using an event manager to effect a library function call.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

One of the areas in which progress has been made is in the utilization of services processors. A service processor is a computer processor that is installed in a host computer in addition to a main processor to provide to the host computer diagnostics initialization services configuration services run time error detection error correction and the like. A service processor typically has one or more shared libraries of data processing functions provided by various service processor components. These libraries typically use a client server interprocess communications IPC framework to make available the data processing functions within one component of a service processor to the other components. This IPC framework is effective to export a larger number of data processing functions. However one component may only need to utilize a quite small number of functions. In such a case an alternative implementation would be desirable for simplicity and compactness.

Methods apparatus and products are disclosed that use an event manager to effect a library function call from a caller service processor application to a function in a library of data processing functions that carry out particular tasks of data processing where the library is compiled into a callee service processor application. Embodiments typically function by passing by the caller service processor application to the event manager through the caller service processor application s API an event representing the library function call passing by the event manager to the callee service processor application the event representing the library function call executing by the callee service processor application the library function call including retrieving return data from the library function call returning by the callee service processor application to the event manager an event representing the return data from the library function call and returning by the event manager to the caller service processor application the event representing the return data from the library function call.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for using an event manager to effect a library function call in accordance with the present invention are described with reference to the accompanying drawings beginning with . sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in using an event manager to effect a library function call according to embodiments of the present invention. The computer of includes at least one main computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the computer . The computer of includes at least one service processor which is also connected through bus adapter to processor and to other components of the computer . In this example the service processor is also connected to components of the computer through a Joint Test Action Group JTAG connection and an inter integrated circuit I2C connection . The main processor is referred to in this specification as a main processor to distinguish it from the service processor . The main processor is the processor upon which normal data processing programs are executed server applications word processing programs web sites spreadsheets database managers and so on. The service processor is a computer within a computer the computer containing the service processor is referred to as a host. In the example of the host computer is composed of main processor RAM bus adapter expansion bus and so on.

The service processor operates independently of the main processor and includes its own RAM and other components explained in more detail below. The term service processor refers both to the service processor hardware one or more microprocessors RAM flash memory and so on as well as the software and firmware of the service processor. The service processor operates generally to provide to the host computer diagnostics initialization services configuration services run time error detection and error correction. The service processor controls the hardware of the host computer provides I O functionality for management control through a management console monitors and diagnoses the operational state of the host and so on. Examples of services provided by the service processor for the host computer typically include Power On Self Test and similar host diagnostics environmental monitoring and automated domain shutdown in the event of an out of bounds condition such as a CPU getting too hot assigning multiple paths to I O devices for increased availability monitoring and displaying host environmental statistics such as the temperatures currents and voltages present on system boards monitoring and controlling power flow to the host components such as system boards and control boards and logging notification and response for various events in the host computer.

The service processor is connected through expansion bus and I O adapter to management console . The management console is operated by an operator as a specific terminal for issuing commands to the service processor and for viewing status reports and event notifications from the service processor. Of course the service processor also may send status reports and event notifications to printers disk files or other I O destinations.

Stored in the host computer s RAM is a data processing application a module of computer program instructions for carrying out user level data processing. Examples of data processing applications include server applications word processing programs web sites spreadsheets database managers and so on. Also stored in host RAM is an operating system . Operating systems useful in host computers that support using an event manager to effect a library function call according to embodiments of the present invention include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art. The application and the host s operating system in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also such as for example in Flash memory or on a disk drive .

The computer of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the computer . Disk drive adapter connects non volatile data storage to the computer in the form of disk drive . Disk drive adapters useful in computers for using an event manager to effect a library function call according to embodiments of the present invention include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. Non volatile computer memory also may be implemented for as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example computer of includes one or more input output I O adapters . I O adapters implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example computer of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary computer of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful in computers that support using an event manager to effect a library function call according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

In the example of disposed in the service processor s RAM are a caller service processor application an event manager a callee service processor application a library of data processing functions and an operating system for the service processor. In this example the caller service processor application the event manager the callee service processor application the library of data processing functions and the operating system for the service processor are all shown disposed in the service processor s RAM . Readers will recognize however that components of such software also may be stored in non volatile memory such as for example in Flash memory on or on a disk drive .

The caller service processor application the callee service processor application and the event manager are modules of computer program instructions that execute on the service processor . The event manager is an object oriented module that provides an interface through which service processor applications can subscribe to and monitor events on the service processor as well as events occurring on the host computer. The library contains data processing functions that carry out particular tasks of data processing. The library is compiled into the callee service processor application exposing within the callee service processor application an application programming interface API of direct calls to computer software functions of the library. The direct calls have characteristic signatures and the signatures include call parameters such as for example 

Compiled into the callee service processor application the data processing functions of the library cannot be called directly from service processor applications other than the callee service processor application. The caller service processor application is therefore improved according to embodiments of the present application to include an API for one or more event handling functions having signatures of corresponding direct calls to data processing functions in the library s API. The caller service processor application s API calls however are directed to event handling functions that effect event handling only.

Given this framework as illustrated in which is explained in more detail below the service processor in the example of operates generally to use the event manager to effect a library function call from the caller service processor application to a function in the library of data processing functions in the callee service processor application by passing by the caller service processor application to the event manager through the caller service processor application s API an event representing the library function call passing by the event manager to the callee service processor application the event representing the library function call executing by the callee service processor application the library function call including retrieving return data from the library function call returning by the callee service processor application to the event manager an event representing the return data from the library function call and returning by the event manager to the caller service processor application the event representing the return data from the library function call.

For further explanation sets forth a functional block diagram illustrating an exemplary service processor useful in using an event manager to effect a library function call in accordance with the present invention including hardware and software components of the service processor. The example service processor of includes a microprocessor for executing service processor applications an operating system for the service processor as well as other service processor system level software. An example of a microprocessor that can be adapted for use in such a service processor is the IBM PowerPC 405 . The example service processor of also includes a memory controller and embedded RAM . Disposed in the service processor s RAM are a caller service processor application an event manager a callee service processor application a library of data processing functions and an operating system for the service processor. The memory controller and the RAM are shown here as separate devices but they may also be implemented as embedded devices within the microprocessor . Similarly bus adapter may be implemented as a separate device or embedded in the microprocessor . The service processor also includes a Processor Service Interface PSI which is a port for direct communications with a main processor as well as a general purpose I O port a Joint Test Action Group JTAG port an inter integrated circuit I2C port a data communications port for network connections Flash memory and non volatile RAM .

For further explanation sets forth a block diagram illustrating exemplary firmware of a service processor useful for using an event manager to effect a library function call in accordance with the present invention. Host computer firmware is included here to represent service processor access to the host firmware for purposes of Power On Self Test basic I O access event detection and management and so on. The example service processor firmware in this example also includes boot code and an embedded operating system to run on the service processor s microprocessor System Vital Product Data a Hardware Object Model that abstracts host hardware as objects an error log an event manager a mailbox for messages from a main processor delivered through a PSI on and an Intelligent Platform Management Interface IPMI module . Operating systems useful in service processors that support using an event manager to effect a library function call according to embodiments of the present invention include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art. The IPMI module implements a standard specification of interfaces to computer hardware and firmware for monitoring host health and managing a host. IPMI operates independently of the host operating system and allows service processors and system administrators to manage a host remotely even in the absence of the host operating system or even if the monitored host is not powered on. IPMI can also function when the host operating system has started and offers enhanced features when used with system management software. Some IPMI implementations can send out alerts via a direct serial connection a local area network LAN or a serial over LAN SOL connection to a remote client. System administrators can then use IPMI messaging to query host status to review hardware logs or to issue other requests from a remote management console through the same connections. The IPMI standard also defines an alerting mechanism for the service processor to send a simple network management protocol SNMP platform event trap PET .

For further explanation sets forth a functional block diagram of an exemplary service processor configured to use an event manager to effect a library function call according to embodiments of the present invention. In the example of the service processor runs a caller service processor application an event manager a callee service processor application . The caller service processor application the callee service processor application and the event manager are modules of computer program instructions that execute on the service processor . The event manager is an object oriented module that provides an interface through which service processor applications can subscribe to and monitor events on the service processor as well as events occurring on the host computer. The callee service processor application includes a library of data processing functions that carry out particular tasks of data processing. The library is compiled into the callee service processor application exposing within the callee service processor application an application programming interface API of direct calls to computer software functions of the library. The direct calls have characteristic signatures and the signatures include call parameters such as for example 

Compiled into the callee service processor application the data processing functions of the library cannot be called directly from service processor applications other than the callee service processor application . That is neither the caller service processor application nor software routines within the caller service processor application can directly call the data processing functions of the library . The caller service processor application is therefore improved according to embodiments of the present application to include an API for one or more event handling functions having signatures of corresponding direct calls to data processing functions in the library s API. The API in the caller service processor application may not include functions corresponding to all the data processing functions of the library because the caller service processor application may not need access to all of the data processing functions of the library . So the caller service processor application s API therefore may implement only a subset of the call signatures available in the API of the callee service processor application .

The caller service processor application s API calls however are directed to event handling functions that effect event handling only. Because the call signatures are the same in both APIs the fact that an event handler intervenes in a call is transparent to the caller service processor application. A calling routine in the caller service processor application effects an indirect call to a data processing function in the library by issuing exactly the same function call as would be use from inside the callee service processor application func parm parm . . . func parm parm . . . and so on. When such a call is issued in the caller service processor application however the call is directed to an event handling function that marshals call parameters into an event and passes the event to the event handler. That is the call is directed to an event handling function that uses an event handler to pass the call along in the form of an event to the callee service processor application where the call is eventually implemented as a direct call through the API to its corresponding data processing function .

Given this framework as illustrated in the service processor in the example of operates generally to use the event manager to effect a library function call from the caller service processor application to a function in the library of data processing functions in the callee service processor application by passing by the caller service processor application to the event manager through the caller service processor application s API an event representing the library function call passing by the event manager to the callee service processor application the event representing the library function call executing by the callee service processor application the library function call including retrieving return data from the library function call returning by the callee service processor application to the event manager an event representing the return data from the library function call and returning by the event manager to the caller service processor application the event representing the return data from the library function call. It is the responsibility of the event handling function to retrieve the return data from the event representing the return data and return the return data to the calling routine in the caller service processor application .

For further explanation sets forth a functional block diagram of a further exemplary service processor configured to use an event manager to effect a library function call according to embodiments of the present invention. In the example of the service processor runs a caller service processor application an event manager a callee service processor application . The caller service processor application the callee service processor application and the event manager are modules of computer program instructions that execute on the service processor . The event manager is an object oriented module that provides an interface through which service processor applications can subscribe to and monitor events on the service processor as well as events occurring on the host computer. The callee service processor application includes a library of data processing functions that carry out particular tasks of data processing. The library is compiled into the callee service processor application exposing within the callee service processor application an application programming interface API of direct calls to computer software functions of the library. The direct calls have characteristic signatures and the signatures include call parameters such as for example 

Compiled into the callee service processor application the data processing functions of the library cannot be called directly from service processor applications other than the callee service processor application . That is neither the caller service processor application nor software routines within the caller service processor application can directly call the data processing functions of the library . The caller service processor application is therefore improved according to embodiments of the present application to include an API for one or more event handling functions having signatures of corresponding direct calls to data processing functions in the library s API. The API in the caller service processor application may not include functions corresponding to all the data processing functions of the library because the caller service processor application may not need access to all of the data processing functions of the library . So the caller service processor application s API therefore may implement only a subset of the call signatures available in the API of the callee service processor application .

The caller service processor application s API calls however are directed to event handling functions that effect event handling only. Because the call signatures are the same in both APIs the fact that an event handler intervenes in a call is transparent to the caller service processor application. A calling routine in the caller service processor application effects an indirect call to a data processing function in the library by issuing exactly the same function call as would be use from inside the callee service processor application func parm parm . . . func parm parm . . . and so on. When such a call is issued in the caller service processor application however the call is directed to an event handling function that marshals call parameters into an event representing a library function call and passes the event to the event handler . That is the call is directed to an event handling function that uses an event handler to pass the call along in the form of an event to the callee service processor application where the call is eventually implemented as a direct call through the API to its corresponding data processing function .

In the example of the event manager is implemented with two event manager objects and an event server daemon with data communications sockets implementing inter process communications IPC between the daemon and the event manager objects . The event handling function instantiates an event manager object of an event manager class and calls member methods in the event manager object to pass to the event manager an event representing a library function call and to subscribe to an event representing the return data from the library function call. Similarly in the callee service processor application a separate thread of execution called in this example a library call dispatcher instantiates an event manager object and calls member methods in the event manager object to subscribe to an event representing a library function and to pass back to the event manager object an event representing return data from the library function call. The event manager objects use the IPC sockets to pass events representing library function calls and events representing return data from library function calls back and forth through the event server daemon which operates as a separate thread of execution.

Given this framework as illustrated in the service processor in the example of operates generally to use the event manager to effect a library function call from the caller service processor application to a data processing function in the library of data processing functions in the callee service processor application by passing by the caller service processor application to the event manager through the caller service processor application s API an event representing the library function call. In this example the pass to the event manager is a passing of the event representing a library function call to an event manager object by a call to a member method of the event manager object as for example 

The event manager passes to the callee service processor application the event representing the library function call. In this example passing the event to the callee service processor application is carried out by the event server daemon s sending the event representing a library function call through IPC socket to event manager object . The library call dispatcher has subscribed to the event representing a library function call with a call to a member method of the event manager object such as for example 

The callee service processor application executes the library function call including retrieving return data from the library function call by the library call dispatcher . The library call dispatcher subscribes through the event manager object in the callee service processor application to the event representing a library function call and issues a library function call to a corresponding data processing function in the library . The library call dispatcher calls the data processing function represented by the event representing a library function call. The library issues the library function call through the API exposed by the library that is compiled into the callee service processor application .

The callee service processor application returns to the event manager an event representing return data from the library function call again by the library call dispatcher . The library call dispatcher accepts the return data from the library function call constructs an event representing the return data from the library function call and passes back to the event manager object the event representing return data from the library function call. The library call dispatcher passes the event representing return data to the event manager object by a call such as for example 

The event manager returns to the caller service processor application the event representing the return data from the library function call. The event manager object returns the event representing the return data through IPC socket to the event server daemon . The event server daemon observes from the event subscriber table that event manager object has registered caller service processor application as a subscriber for this event and returns the event through IPC socket to event manager object in the caller service processor application which in turn passes the event along to the proper event handling function effectively identified by the unique event identifier represented in the event ID parameter described above. It is the responsibility of the event handling function to retrieve the return data from the event representing the return data and return the return data to the calling routine in the caller service processor application .

For further explanation sets forth a block diagram of an exemplary event manager useful for effecting a library function call according to embodiments of the present invention. The example event manager of includes a set of event identifiers that include events for power on power off runtime state and termination state all events of types that would typically be found in IPMI operations only four examples where naturally there could be dozens or hundreds of different event types. In addition however this event set has been improved according to embodiments of the present invention to include an event named Event id library call to represent library function calls and an event named Event id library call return to represent return data from library calls.

The example event manager of includes an event manager interface a specification of the member methods exposed for use by caller service processor applications callee service processor applications event handling functions library call dispatchers and the like in passing events through the event manager that is through event manager objects instantiated from an event manager class that implements the interface . The event manager interface includes a subscribe method an unsubscribe method a signal method a monitor method and a notify method . The subscribe method registers subscriptions to event in an event subscriber table notifying the event server daemon that a particular subscriber process a library call dispatcher or an event handling function has registered as a subscriber to an event an event representing a library function call or an event representing return data from a library function call. The subscriptions are represented by records in the event subscriber table each of which contains a LibraryFunctionName field that identifies a particular data processing function in a library and a subscriber ID field that identifies a process or thread of execution that has registered as a subscriber to events representing library function calls to the data processing function identified in the LibraryFunctionName field .

The unsubscribe method causes subscription records to be deleted from the event subscriber table . The signal method passes an event to an event manager that is to an event management object instantiated by a caller service processor application or a callee service processor application by an event handling function of a caller service processor application or by a library call dispatcher of a callee service processor application. The monitor method implements a blocking call that allows a registered subscriber to wait to receive an event to which the subscriber has subscribed. The notify method is used internally by the event manager upon receipt of an event to make the event available to a waiting monitor method and allow the monitor method to return an event to a subscriber.

The example event manager of also includes an event server daemon a module of computer program instructions that operates in a separate thread of execution to facilitate communications of events back and forth among caller service processor functions and callee service processor functions. The example event manager of also includes and IPC socket instances of which are used by the event server daemon to implement communications of events back and forth among caller service processor functions and callee service processor functions.

For further explanation sets forth a block diagram of exemplary library function call components useful in effecting library function calls through an event manager according to embodiments of the present invention. The example library function call components of include a library of data processing functions compiled into a callee service processor application so that all of the data processing functions of the library are available within the callee data processing application for direct access through an API from calling routines within the callee service processor application. The data processing functions have exemplary call signatures func parm parm . . . func parm parm . . . and so on. The callee service processor application in this example also includes a callee interface function which is a library call dispatcher a module of computer program instructions that executes in a separate thread and provides an interface between an event manager and the data processing functions for using the event manager to effect library function calls according to embodiments of the present invention.

The example library function call components of include in a caller service processor application event handling functions each of which has a signature of a corresponding data processing function in the library of the callee service processor application . From the point of view of the caller service processor application therefore a call to an event handling function looks exactly the same as a direct call to a corresponding data processing function func parm parm . . . func parm parm . . . and so on. There are no direct calls however from caller service processor application to data processing routines in the library of the callee service processor application because the library is compiled into the callee service processor application and is not compiled into the caller service processor application. Instead of direct calls each event handling function operates to construct an event representing a library function call to a data processing function in the library of the callee service processor application and use the event so constructed to effect an indirect call through an event manager to its corresponding data processing function that is a data processing function having the same signature in the library of the callee service processor application.

The event handling functions in this example have available to them in the caller service processor application an additional optional caller interface function named callerInterface where the low level work of actual communications with an event manager being the same for each event handling function are offloaded from the event handling functions thereby reducing duplication of code across multiple event handling functions and leaving the event handling functions themselves lean and elegant.

For further explanation sets forth a flow chart illustrating an exemplary method for using an event manager to effect a library function call according to embodiments of the present invention. The method of uses an event manager to effect a library function call from a caller service processor application to a function in a library of data processing functions that carry out particular tasks of data processing where the library is compiled into a callee service processor application. The caller service processor application the callee service processor application and the event manager are modules of computer program instructions that execute on a service processor of a computer and the library exposes within the callee service processor application an API of direct calls to computer software functions of the library. The direct calls have characteristic signatures and the signatures include call parameters. The caller service processor application includes an API for one or more event handling functions having signatures of corresponding direct calls to data processing functions in the library s API. The caller service processor application s API calls are directed to event handling functions that effect event handling only.

The method of includes passing by the caller service processor application to the event manager through the caller service processor application s API an event representing the library function call. Passing an event representing the library function call to the event manager through the caller service processor application s API can be carried out for example by an event handling function of the caller service processor application as described in more detail both above in this specification and below with reference to .

The method of also includes passing by the event manager to the callee service processor application the event representing the library function call. The method of also includes returning by the event manager to the caller service processor application the event representing the return data from the library function call. Passing the event representing the library function call by the event manager to the callee service processor application as well as returning the event representing the return data from the library function call by the event manager to the caller service processor application both can be carried out for example by use of interfaces provided through event manager objects and an event server daemon as described in more detail both above in this specification and below with reference to .

The method of also includes executing by the callee service processor application the library function call including retrieving return data from the library function call. The method of also includes returning by the callee service processor application to the event manager an event representing the return data from the library function call. Executing the library function call by the callee service processor application including retrieving return data from the library function call as well as returning an event representing the return data from the library function call by the callee service processor application to the event manager both can be carried out for example by a library call dispatcher operating as a separate thread of execution in the callee service processor application as described in more detail both above in this specification and below with reference to .

For further explanation sets forth a flow chart illustrating an exemplary method of passing by the caller service processor application through the caller service processor application s API to the event manager an event representing a library function call. The method of is in effect an example of a method of operation for an event handling function on and of a caller service processor application on and . The method of includes receiving through the caller service processor application s API a function call to an event handling function. The function call passes call data as call parameters and the called event handling function has the same signature as its corresponding direct API call to a data processing function of the library func parm parm . . . func parm parm . . . or func parm parm . . . and so on where parm parm . . . are call parameters carrying call data. The method of also includes constructing by the called event handling function with the call data from the call parameters an event representing the library function call. The event may be represented as a message for transmission through an event manager object on and an IPC socket on to an event server daemon on .

The method of also includes calling the event manager by the called event handling function passing to the event manager as a call parameter the event representing the library function call. Passing the event representing the library function call to the event manager is described in detail both above in this specification and below with reference to . The call to the event manager eventually results in receipt in the event handling function of an event representing return data from the library function call. The method of also includes receiving the event representing return data from the library function call extracting the return data from the event representing the return data and returning the return data to the calling routine of the caller service processor application.

For further explanation sets forth a flow chart illustrating a further exemplary method of passing by the caller service processor application through the caller service processor application s API to the event manager an event representing a library function call. The method of is in effect an example of a method of operation for a caller interface function on that carries out on behalf of an event handling function the low level work of actual communications with an event manager. The example of differs somewhat from the example of . In the method of it is the event handling function that receives the call data and creates an event representing a library function call. In the example of however unlike the example of it is the caller interface function that receives the call data from an event handling function and creates the event representing the library function call.

In the example of a caller interface function instantiates an event manager object. The event manager object is an object of an event manager class that implements an interface like the one illustrated and described above with regard to reference on with a subscribe method an unsubscribe method a signal method a monitor method and so on. The caller interface function then subscribes through the event manager object to an event representing return data from a library function call by for example a call such as this 

When the caller interface function receives from an event handling function of a caller service processor application call data for a library function call the caller interface function creates an event representing the library function call including as parameters the name of the library function call data for the library function s call parameters and a unique identification code for the event representing the library function call. The caller interface function then passes the event representing the library function call through the event manager object to the callee service processor application by for example a call such as 

The caller interface function then monitors the event manager to wait for an event representing return data from the library function call by for example a call such as 

For further explanation sets forth a flow chart illustrating an example method of operation for an event server daemon component of an event manager. The method of effects passing by the event manager to the callee service processor application the event representing a library function call by listening on an IPC socket for an event representing a library function call. Upon receiving from a caller service processor application an event representing a library function call the event manager determines through its event server daemon component whether a callee service processor application is a subscriber to the event representing a library function call. The event server daemon makes this determination by looking up the name of the called library function in the event subscriber table and finding or not finding a record in the table identifying a subscriber for the called library function. If a callee service processor application is a subscriber to the event representing a library function call the event server daemon sends the event representing a library function call from the event manager to the callee service processor application through an IPC socket established for this purpose.

The method of also effects passing by the event manager to the caller service processor application an event representing return data from a library function call by listening on an IPC socket for an event representing return data from a library function call. Upon receiving from a callee service processor application an event representing return data from a library function call the event manager determines through its event server daemon component whether a caller service processor application is a subscriber to the event representing return data from a library function call. The event server daemon makes this determination by looking up the name of the called library function in the event subscriber table and finding or not finding a record in the table identifying a subscriber for an event representing return data from a called library function. If a caller service processor application is a subscriber to the event representing return data from a library function call the event server daemon sends the event representing return data from a library function call from the event manager to the caller service processor application through an IPC socket established for this purpose.

For further explanation sets forth a flow chart illustrating an exemplary method of executing by a callee service processor application the represented library function call including retrieving return data from the library function and returning by the callee service processor application to the event manager an event representing the return data from the library function call. The represented library function call is the library function call that is represented by an event representing a library function call. The method of is in effect an example of a method of operation for a library call dispatcher on of a callee service processor application.

The method of includes instantiating an event manager object. A library call dispatcher instantiates an event manager object to gain access to the event management interface described above with regard to reference on . The library call dispatcher then subscribes through the event manager object to an event representing a library function call by for example a call such as 

The library call dispatcher on which remember is a component of a callee service processor application on then calls the represented library function on directly through the API on of direct calls exposed within the callee service processor application. The library call dispatcher then accepts in the callee service processor application return data on from the call to the represented library function. The library call dispatcher then constructs as a component of the callee service processor application with the return data from the call to the represented library function an event representing the return data from the library function call. The library call dispatcher operating as a component of a callee service processor application then calls the event manager passing to the event manager as a call parameter the event representing the return data from the library function call.

In view of the explanations set forth above readers will recognize that the benefits of using an event manager to effect a library function call according to embodiments of the present invention include 

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for using an event manager to effect a library function call. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or storage media for machine readable information including magnetic media optical media or other suitable media. Examples of storage media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

