---

title: Method and apparatus for generating a plurality of stencil reference values for a corresponding plurality of pixels or pixel samples
abstract: Based on a driver programmable stencil reference value command, stencil reference value logic produces a plurality of stencil reference values for a corresponding plurality of pixels or pixel samples. At least one of the plurality of stencil reference values has a different value than at least one other of the plurality of stencil reference values. The driver programmable stencil reference value command may include a reference to instruction data or instruction data itself such that the graphics processing logic produces the plurality of stencil reference values based on the instruction data. Stencil logic performs a stencil test on the produced plurality of stencil reference values with respect to or without reference to a previously produced plurality of stencil values. Stencil logic performs stencil operations based on the result of the stencil test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08243096&OS=08243096&RS=08243096
owner: Advanced Micro Devices, Inc.
number: 08243096
owner_city: Sunnyvale
owner_country: US
publication_date: 20070315
---
The invention generally relates to processing computer graphics information for display and more particularly to utilizing stencil reference values in a computer graphical system.

In the field of computer graphics commands from an application are used to render primitives of one or more graphical objects. As used herein to render primitives of one or more graphical objects refers to the process of generating pixel data or pixel sample data. The rendered data is generally buffered and displayed on a suitable display device. Modern systems often incorporate but do not require a central processing unit CPU separate and distinct from a graphics processing unit GPU . However it is recognized that other systems may use different cores of one or more processors to dynamically allocate or otherwise divide the processing load among the cores. At any given time a particular core may act as a traditional CPU or traditional GPU. Accordingly references to a CPU and a GPU herein are not intended to be limiting to any specific structure or function but are merely used to differentiate among traditional types of processing resources and or processing. Generally the CPU is responsible for sending commands to the GPU for rendering thereon. The GPU renders graphics objects and displays them on a display device more quickly than if a CPU were used to draw the same to the display. Commands from the CPU generally include a variety of state commands and their associated draw commands. For example a CPU may issue a single draw command to render and draw one or more primitives associated with a graphics object. The state commands may set a particular state or condition associated with an associated draw command.

As is known primitives may include one or more vertices e.g. three vertices . A draw command minimally consists of the location of the vertices e.g. in world space coordinates associated with the one or more primitives of the graphics object to be rendered. Associated state commands may indicate a variety of additional information relevant for the particular draw or rendering. State commands may include attribute values associated with primitive vertices and other constant data associated with the one or more primitives in the graphics object. For example when a particular draw command requires use of a stencil test one having ordinary skill in art will recognize that a single stencil reference value for all primitives in the draw command i.e. for all pixels or pixel samples in the graphics object may be passed as a state command or as part of a state command. The stencil reference value is generally an 8 bit value. Accordingly using information contained within draw and state commands the GPU performs a variety of transformations on the data and may generate display data corresponding thereto.

In prior art systems the CPU includes one or more host processors host processor that execute instructions associated with an application and a driver. The instructions may be stored in memory coupled to the host processor as modules. With respect to the host processor memory may be for example on chip off chip dedicated distributed integrated and or shared as is known in the art. The state and draw commands are generally provided by the driver executing on the host processor in response to received render commands from the application which is also executing on the host processor. As the host processor executes instructions associated with the application a plurality of application render commands to display one or more graphical objects are generally generated. The driver then translates or compiles the application render commands into commands that are understandable by the GPU. The translated commands i.e. the state and draw commands are then communicated to the GPU for processing thereon e.g. over a suitable bus .

As is known it is common to issue draw and or state commands that call for the performance of a stencil test. The stencil test is performed on a pixel or pixel sample basis within the graphics object and may or may not require the comparison of the provided stencil reference value with the respective previously stored stencil value for the respective pixel or pixel sample. Based on the Z and or stencil test as is known in the art the GPU writes or otherwise updates the memory storing the stencil values using a corresponding stencil operation. Exemplary stencil tests include greater than less than greater than or equal to less than or equal to equal to not equal to always and never . One having ordinary skill in the art will recognize that the always and never tests do not specifically require a comparison of a current stencil reference value and a stored stencil value as the test will either always pass or never pass. Common stencil operations may include for example keep increment decrement increment and clamp decrement and clamp replace zero and invert . Other stencil tests and operations may be employed. Accordingly the state commands might either reference which stencil test and or stencil operation to use or may physically pass the instructions necessary to carry out the stencil test and or stencil operation. Alternatively the GPU may be programmed or otherwise configured to run a given stencil test and or stencil operation.

Generally the GPU interacts with memory e.g. on chip off chip dedicated distributed integrated and or shared to store data necessary for the rendering and display of the final pixels and pixel samples on the screen. As appreciated the memory may often be of limited size and may be shared with other processing units e.g. the CPU . The GPU when performing a stencil operation may write the resulting stencil value to a stencil buffer i.e. memory or a portion of memory for quick access. In some systems the stencil buffer is termed a Z stencil buffer because it may also store Z data in addition to stencil values and related stencil data e.g. stencil metadata . Because of the attributes of the stencil buffer i.e. its location and accessibility it may be desirable in certain situations to write other types of data thereto for use in the rendering process. However as appreciated by those of ordinary skill in the art the stencil values may not merely be written over if needed in a subsequent stencil test. Accordingly while other data may be written to the stencil buffer the stencil values must be moved or copied to another memory location. At a later time the moved stencil values must be moved or copied back to the stencil buffer for a subsequent stencil test or other known operation.

Similarly stencil values might be needed for use in another capacity by other logic blocks in a computer graphics system. For example an application e.g. executing on a host processor may desire to view the stencil data via a command known in the art as a direct CPU access. In such cases the stencil values might need to be moved to a more convenient location for this capacity e.g. memory affiliated with the host processor and then moved back to the stencil buffer when stencil testing needs to continue.

In the cases described above the stencil values are moved from the stencil buffer using known memory access commands that directly access the stencil buffer and do not require use of the stencil block or stencil logic i.e. the portion of the GPU that actually performs the stencil test and writes stencil values to the stencil buffer or otherwise updates stencil values previously stored in the stencil buffer . The stencil block logic is described in further detail below.

Moving stencil values from the stencil buffer and writing stencil values back to the stencil buffer may prove difficult in graphical systems employing proprietary formatting schemes and or proprietary compression schemes. For example a GPUs may have a stencil block logic that employs specific proprietary tiling schemes and or compression schemes when it writes stencil values to the stencil buffer. As a result only the stencil block logic understands how to read the stencil values stored in the stencil buffer. Similarly only the stencil block logic understands how to write stencil values to the stencil buffer. Accordingly after a stencil value move a need exists in graphics systems employing proprietary formatting and or compression schemes for providing to the stencil block logic the previously moved stencil values for reformatting and or compression and storage in the stencil buffer.

Additionally and as provided above prior art draw commands were limited to passing a single stencil reference value for each draw command i.e. for all pixels or pixel samples for all primitives in the graphics object associated with the draw command. The provision of a single stencil reference value per draw command however does not provide an application designer maximum flexibility in programming. Accordingly a need exists to allow the provision of multiple stencil reference values for a draw command where each pixel or pixel sample has its own programmable stencil reference value. Thereafter stencil tests and operations may be performed on the programmable stencil reference values. Such a solution would give application designers additional flexibility in rendering graphic objects. For example an application designer could then use the programmable stencil reference values as a way of tagging certain pixels or pixel samples in a graphics objects such that the tagged pixels or pixel samples are the only portions of a particular graphics object that are processed rendered or displayed or such that the tagged pixels or pixel samples are the only portions of the graphics object that are not processed rendered or displayed.

A further need exists for allowing application designers the ability to write application level machine readable computer code e.g. source code in OpenGL D3D etc. for applications wherein the compiled computer code directs the provision of 1 previously moved stencil values e.g. as a result of limited memory resources or 2 generated programmable stencil reference values e.g. as determined by the application designer to the stencil block logic. That is a need exists for a new command available to application designers that allow for the above functionality. An additional need exists for a driver that understands the new application level commands and is capable of translating the commands into a corresponding command understandable by a GPU.

Generally the present disclosure provides a method and apparatus for the production of a plurality of stencil reference values for a corresponding plurality of pixels or pixel samples wherein at least one stencil reference value of the plurality of stencil reference values is different than another stencil reference value of the same plurality. In one embodiment this is accomplished at least in part by application logic that generates an application programmable stencil reference value command and wherein the application logic may be coupled in operation to graphics processing logic. The graphics processing logic based on the application programmable stencil reference value command is capable of producing the plurality of stencil reference values.

In another embodiment the production of the plurality of stencil reference values for the corresponding plurality of pixels or pixel samples is implemented using driver logic that may be coupled to the application logic and also to the graphics processing logic during operation. The driver logic translates the application programmable stencil reference value command into a driver programmable stencil reference value command that is understandable by the graphics processing logic. Based on the driver programmable stencil reference value the graphics processing logic produces the plurality of stencil reference values for the corresponding plurality of pixels or pixel samples.

In one embodiment the graphics processing logic includes stencil reference value generator logic that produces the plurality of stencil reference values based on the driver stencil reference value command. The graphics processing logic further includes stencil logic that is coupled to memory and is further capable of performing stencil tests on the produced plurality of stencil reference values for the corresponding plurality of pixels or pixel samples with respect to or without reference to a previously produced plurality of stencil values stored in memory.

In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It will be apparent to one of ordinary skill in the art however that these specific details need not be used to practice the present disclosure. In other instances well known structures interfaces and processes have not been shown or described in detail in order not to unnecessarily obscure the present invention.

As used herein driver logic application logic and graphics processing logic refer to logic i.e. logical blocks that perform a specified function and may be implemented in any number of recognized ways. For example driver logic application logic and graphics processing logic individually or collectively may be implemented as one or more of the following hardware components programmable or non programmable such as but not limited to digital signal processors accelerators engines application specific integrated circuits ASICs etc. or software modules containing executable instructions capable of being executed on one or more processors or combinations of hardware and software. In one embodiment graphics processing logic is a graphics processing unit having a similar structure as the CPU described above as known in the art. Graphics processing logic is described in further detail with respect to at least .

Application programmable stencil reference value command is one or more commands e.g. state and or draw commands calling for the production i.e. the act of obtaining through reading generation etc. of a plurality of stencil reference values for a corresponding plurality of pixels or pixel samples. The pixels or pixel samples or the corresponding plurality of pixels or pixel samples may be associated with one or more primitives e.g. triangles . As used herein the production of the plurality of stencil reference values refers to the process of generating fetching finding locating or otherwise obtaining stencil data whether pre existing or not. The application programmable stencil reference value command specifically calls for the production of the plurality of stencil reference values wherein at least one stencil reference value of the plurality of stencil reference values is different than at least one other stencil reference value of the same plurality of stencil reference values thus overcoming the shortcomings of the prior art.

Memory may be any suitable memory or plurality of suitable memories e.g. memory devices similar to that described below with respect to memory . In one embodiment memory and memory are one and the same. In another embodiment memory resides on the same or different integrated circuit or integrated circuit package as graphics processing logic . It should be understood that while memory and memory are each illustrated as one memory they may comprise multiple memories e.g. memory devices and should not be construed in a limiting manner.

Driver logic is coupled to application logic and is capable of translating or compiling the application programmable stencil reference value command into a driver programmable stencil reference value command so that the graphics processing logic may understand the command. Thereafter the driver logic or any suitable other logic transmits the generated driver programmable stencil reference value command and any other contemporaneous application commands e.g. state and draw commands if available to graphics processing logic for suitable processing. Although not specifically illustrated the transmission may be any suitable wired or wireless transmission from driver logic to graphics processing logic . Processing may require manipulation of data and or display on display device as known in the art. In one embodiment the driver programmable stencil reference value command is a state or draw command. In another embodiment the driver programmable stencil reference value command is part of a state or draw command. In yet another embodiment the driver programmable stencil reference value command contains a state or draw command. Accordingly as used herein the name given to the commands generated by driver e.g. state draw driver programmable stencil reference value are not intended to limit the physical size or structure of the commands generated by the driver in any manner not expressly stated herein.

The driver programmable stencil reference value command generally corresponds to the application programmable stencil reference value command to the extent that the driver programmable stencil reference value command is the compiled or translated version of the application programmable stencil reference value command thereof. The driver programmable stencil reference value command is further capable of controlling graphics processing logic to produce the plurality of stencil reference values for the corresponding plurality of pixels or pixel samples.

The driver programmable stencil reference value command may include a number of components each of which are described in further detail below 1 instruction data or any suitable reference e.g. a flag pointer etc. to instruction data stored in memory 2 vertex location data associated with one or more primitives of which the corresponding plurality of pixels or pixel samples comprise or any suitable reference e.g. a flag pointer etc. to the vertex location data 3 an export bus enable flag 4 a stencil test mode flag directly or indirectly representing a stencil test and or stencil operation to be performed on the plurality of stencil reference values. As used herein the terms flag and pointer individually constitute any suitable indicator such as but not limited to a bit series of bits and may in one embodiment indicate an address location in memory e.g. memory where data e.g. vertex location data or instruction data is stored. Accordingly it is recognized that the application programmable stencil reference value command may similarly be capable of conveying the same or similar information.

Command logic receives driver programmable stencil reference value command from e.g. driver logic of . As described above the driver programmable stencil reference value command may include 1 instruction data or any suitable reference e.g. a flag pointer etc. to instruction data stored in memory 2 vertex location data associated with one or more primitives of which the corresponding plurality of pixels or pixel samples comprises or any suitable reference e.g. a flag pointer etc. to the vertex location data 3 an export bus enable flag 4 a stencil test mode flag directly or indirectly representing a stencil test and or stencil operation to be performed on the plurality of stencil reference values. Each of these components may be written to memory e.g. control memory registers and later read out by one or more of the GPL blocks as discussed in more detail below.

In one embodiment driver programmable stencil reference value command includes additional information or attribute values necessary for a given operation. For example driver programmable stencil reference value command may not be an independent command but may as provided above be a state or draw command be part of a state or draw command or may include a state or draw command. In any event command logic may further write additional attribute data or control information e.g. flags indicators etc. to memory e.g. control memory for subsequent used by one or more GPL blocks.

Memory specifically control memory is coupled at least to scan converter logic stencil reference value generator logic and stencil logic to provide stored data to components of graphics processing logic as known in the art. The provision of the stored data may be made using any known technique. In one embodiment each GPL block regularly requests data from the control memory . For purposes of illustration only shows bus coupling control memory to the GPL blocks. Any suitable coupling e.g. one or more buses or any wireless coupling may be used. In one embodiment control memory is one or more control registers or array of control registers.

Command logic is coupled to scan converter logic also known as rasterizer logic . In one embodiment graphics pipeline logic is coupled between command logic and scan converter logic and may perform a variety of rendering transformations and or operations on vertex data graphics object data e.g. pixel or pixel sample data or attribute data related thereto. Resulting data may be passed to scan converter logic as illustrated. It is conceived and recognized that graphics pipeline logic and other additional graphics pipeline logic may be incorporated into graphics processing logic to perform established rendering techniques and other rendering procedures.

Scan converter logic generates location data e.g. in screen space coordinates for each pixel or each pixel sample of the corresponding plurality of pixels or pixel samples based on vertex location data. In one embodiment the vertex location data is the location e.g. in screen space coordinates of one or more primitives of which the plurality of pixels or pixel samples comprise. That is the vertex location data defines the primitives and indirectly its pixels or pixel samples upon which the driver programmable stencil reference value command operates. As is known in the art vertex location data or a reference thereto may be provided by one of command logic graphics pipeline logic or memory e.g. control memory . A reference to vertex location data as described above may provide information directing the scan converter logic to the stored location of the vertex location data. For example the reference to vertex location data may be one or more bits that instruct the scan converter logic to check a particular memory location for the vertex location data.

Scan converter logic may also provide additional rendering functions such as but not limited to interpolating Z depth values storage by Z stencil logic. Z stencil logic is illustrated as one embodiment of stencil logic however Z logic not specifically shown may also be separate and distinct from stencil logic . In another embodiment scan converter logic may interpolate additional attributes for pixels or pixel samples such as but not limited to color light texture etc.

Stencil reference value generator logic e.g. pixel shader logic or pixel sample shader logic is coupled to scan converter logic and receives therefrom the generated location data for each pixel or pixel sample of the corresponding plurality of pixels or pixel samples. Stencil reference value generator logic is also coupled to receive one of instruction data or a reference to instruction data from memory e.g. control memory . The reference to the instruction data like the reference to location data may provide information directing the stencil reference value generator to the stored location of the instruction data. For example the reference to instruction data may be one or more bits that instruct the stencil reference value generator to check a particular memory location for the instruction data. Correspondingly the stencil reference value generator uses the instruction data and the location data to produce the plurality of stencil reference values. In other words the stencil reference value generator logic uses the instruction data to produce the plurality of stencil reference values as a processor might execute a program.

The instruction data instructs the stencil reference value generator logic to produce the plurality of stencil reference values by reading them from memory based at least on the location data for each pixel or pixel sample of the corresponding plurality of pixels or pixel samples. Alternatively the instruction data instructs the stencil reference value generator logic to generate the plurality of stencil reference values based at least on the location data for each pixel or pixel sample of the corresponding plurality of pixels or pixel samples. In both cases the stencil reference value generator logic uses the instruction data to produce the plurality of stencil reference values similar to how executable instructions might instruct or cause a processor to perform a certain task. Thus the location data can be considered an input to the program i.e. the instruction data .

In the former case where stencil reference value generator logic reads the plurality of stencil reference values from memory stencil reference value generator logic may use any suitable technique to read pre existing stencil reference values from any suitable memory location. In one embodiment the stencil reference value generator logic reads the plurality of stencil reference values from the color buffer or the texture buffer . In another example the stencil reference value generator logic reads the plurality of stencil reference values from memory associated with one or more host processors. The plurality of stencil reference values may have been stored in the suitable memory from a previous command or commands. For example driver logic may have previously transmitted any suitable command to graphics processing logic instructing stencil logic to read the plurality of stencil reference values from the stencil buffer and to write the plurality of stencil reference values to e.g. color block along data path . In turn color block would have written the received plurality of stencil reference values to color buffer .

In one embodiment the stencil reference value generator logic reads the plurality of stencil reference values from memory by issuing a fetch instruction to fetch logic operatively coupled to memory and to the stencil reference value generator logic . In response thereto the fetch logic access the requested plurality of stencil reference values and passes them to the stencil reference value generator logic . One having ordinary skill in the art will recognize that the location data may be used to identify which stencil reference values are fetched by the fetch instruction .

In the latter case where stencil reference value generator logic generates the plurality of stencil reference values based at least on the location data the instruction data serves to instruct stencil reference value generator logic as to the manner in which the plurality of stencil reference values is to be generated. In one embodiment the instruction data is a program or series of instructions that the stencil reference value generator logic executes to generate the stencil reference values . In another embodiment the instruction data serves to initiate a known function e.g. a previously programmed function as known in the art of stencil reference value generator logic . For example stencil reference value generator logic may be designed such that in response to the instruction data a known routine is initiated to generate the plurality of stencil reference values.

Upon producing the plurality of stencil reference values stencil reference value generator logic exports the produced plurality of stencil reference values to stencil logic using any suitable coupling. In one embodiment stencil reference value generator logic exports the produced plurality of stencil reference values to stencil logic using an export bus that directly couples stencil logic to stencil reference value generator logic . In one embodiment the export bus also directly couples color logic to stencil reference value generator logic . The export bus may be also known as a color bus however it is understood that the export bus may be used to send any other data to stencil logic and or color logic during other rendering operations. For example the export bus may transmit depth or Z information or color information to the respective logic. In one embodiment the export bus supports four channels of data wherein each channel is capable of exporting a floating point vector. The plurality of stencil reference values may be exported along any suitable channel. Accordingly in one embodiment the driver programmable stencil reference value command may include an export bus enable flag such that in response to the export bus enable flag the stencil reference value generator logic transmits the plurality of stencil reference values to the stencil logic and the stencil logic recognizes the transmitted plurality of stencil reference values as such.

Upon receipt of the plurality of stencil reference values by stencil logic stencil logic may perform any suitable stencil test or stencil operation as may be known in the art. The driver programmable stencil reference value command may include a stencil test mode flag that specifies the specific stencil test and or stencil operation to be performed. Alternatively stencil logic may be preprogrammed using any suitable technique to perform a specific stencil test and or stencil operation. As illustrated stencil logic is coupled to memory specifically stencil buffer . The stencil buffer contains previously produced stencil values for the same plurality of pixels or pixel samples and may be accessed by stencil logic during the performance of a stencil test if necessary. Based on the result of the stencil test for each of the plurality of pixels or pixel samples stencil logic may then perform a suitable stencil operation and update the stencil buffer accordingly. For example stencil logic may update a stencil value in the stencil buffer or stencil logic may replace a stencil value in the stencil buffer with the currently produced stencil reference value from the plurality of stencil reference values . In one embodiment stencil logic employs one or more proprietary or customized formatting schemes e.g. tiling and or compression in writing stencil values to the stencil buffer .

The method continues in block wherein a plurality of stencil reference values are produced for a corresponding plurality of pixels or pixel samples based on the driver programmable stencil reference value command wherein at least one stencil reference value of the plurality of stencil reference values is different than at least one other stencil reference value of the plurality of stencil reference values. In one embodiment this is implemented as described above with respect to . The method may optionally include block wherein a stencil test is executed with respect to at least the produced plurality of stencil reference values based on a stencil test mode flag. For example a stencil test may be performed by stencil logic of based on a stencil test mode flag that indicates a specified stencil test to be performed. In one embodiment the stencil test may be configured to always pass and the corresponding stencil operation may result in a direct writing of the produced stencil reference value to a stencil buffer. In this embodiment the stencil operation may cause the stencil logic to directly write the stencil reference value without comparing it to any previously stored stencil value. In another embodiment the stencil test may require a comparison to a stencil value stored in stencil buffer before any stencil operation is performed. Thereafter the method ends in block . In one embodiment the stencil values stored in the stencil buffer e.g. stencil buffer may be used to produce a suitable image on display using known techniques in the art.

Accordingly a method and apparatus have been disclosed that provides great flexibility of design and operation of application logic driver logic and graphics processing logic. By allowing for the production of a plurality of stencil reference values for a corresponding plurality of pixels or pixel samples wherein at least one of the stencil reference values of the plurality is different than at least one other stencil reference value of the same plurality the above identified needs of the prior art are satisfied. That is the above method and apparatus allows for ease in moving stencil values from a stencil buffer and for easily writing back the values to the buffer when graphics processing logic employs stencil logic with proprietary formatting schemes and or proprietary compression schemes.

Additionally the provision of the plurality of stencil reference values provides an application designer more flexibility in programming. A variety of stencil tests and operations may be performed on the plurality of stencil reference values such that certain pixels or pixel samples in a graphics objects are identified for processing while others are passed over.

It should be understood that these and other advantages may be obtained by the above disclosure the invention is not limited by the specific embodiments described above. The implementation of other variations and modifications of the disclosure in its various aspects will be apparent to those of ordinary skill in the art. For example the data paths illustrated in may be used in one or more embodiments to pass additional data or information for rendering or graphics processing. Further it may be appreciated that the driver programmable stencil reference value command may not be the result of a translation from a corresponding application programmable stencil reference value command. It is recognized that the driver programmable stencil reference value command may be the output of application logic in the event that driver logic is not needed e.g. where the CPU or application logic and GPU or the graphics processing logic are already compatible with one another without the need for a driver .

