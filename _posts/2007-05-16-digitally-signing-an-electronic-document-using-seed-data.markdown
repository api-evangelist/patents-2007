---

title: Digitally signing an electronic document using seed data
abstract: In one example embodiment, a method is illustrated that includes parsing seed data from digital content, the seed data identifying a signing entity, transmitting identifier data to the signing entity identified by the seed data, transmitting content information relating to the digital content to the signing entity, and receiving digitally signed content information relating to the digital content, the digitally signed content information signed by the signing entity. In another example embodiment, a method is illustrated as including parsing seed data from digital content, the seed data identifying a signing entity, transmitting identifier data to the signing entity identified by the seed data, receiving a credential from the signing entity, the credential used to sign the digital content, and signing the digital content using the credential.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08145909&OS=08145909&RS=08145909
owner: Adobe Systems Incorporated
number: 08145909
owner_city: San Jose
owner_country: US
publication_date: 20070516
---
A portion of the disclosure of this document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots that may be illustrated below and in the drawings that form a part of this document Copyright 2007 Adobe Systems Incorporated. All Rights Reserved.

The present application relates generally to the technical field of algorithms and programming and in one specific example to the digital signing of an electronic document.

Digital signatures are used to verify the identity of a party who signs a document. These signatures may be used to uniquely identify for example an author of a document or in some cases a signing party who may or may not be an author. These digital signatures may or may not involve a certificate containing a symmetric or asymmetric key and or information relating to the identity of the signing party.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of an embodiment of the present invention. It may be evident however to one skilled in the art that the present invention will be practiced without these specific details.

The leading digit s of reference numbers appearing in the figures generally corresponds to the figure number in which that component is first introduced such that the same reference number is used throughout to refer to an identical component which appears in multiple figures. Signals and connections may be referred to by the same reference number or label and the actual meaning will be clear from its use in the context of the description.

In some embodiments a single action is used to digitally sign a piece of digital content such as an electronic document. This electronic document may be formatted using a Portable Document Format PDF eXtensible Markup Language XML Forms Architecture XFA format a Tagged Image File Format TIFF or some other suitable format. In one embodiment this single action is a mouse click wherein a user clicks on a displayed area of an electronic document where the user intends to sign the electronic document. Further this single action may include at least one of a sound a selection using a television remote control a selection of a key on a keypad a selection using a pointing device or a selection of a displayed indication. This displayed indication may include a displayed area of a document containing an indication e.g. the phrase sign here as to where to sign the electronic document. This mouse click may be performed using some type of input device such as a mouse or similar input devices such as a light pen or via some other suitable input device. Once this single action is executed certain types of visible and invisible data are associated with the electronic document. The visible data may include for example the name of the user the date and time of the signature and or other identifying information. The invisible information may be for example a digital key such as a symmetric or asymmetric key used to verify the identity of the signing party. In some cases additional metadata e.g. XML formatted data may be associated with the electronic document prior to or contemporaneously with the signing of the document. This metadata may include location data illustrating the location of a signing server e.g. a Uniform Resource Locator URL an Internet Protocol IP address a Media Access Control MAC address or some other identifying value . This location data may be considered as seed data. Through the use of location data the signing server may be thought of as a roaming credential server not limited to use by authors of a particular geographical location.

Some embodiments may include the use of a Public Key Infrastructure PKI model and various associated technologies such as kerberos and SAML to facilitate the digital signing of the electronic document. The use of kerberos and SAML facilitate the use of Single Sign On SSO authentication within the context of digital signatures and more specifically the one click signing of an electronic document. Other types of SSO technology that may be employed may include Java Open Single Sign On JOSSO Web Single Sign On Web SSO Enterprise Single Sign On E SSO or some other suitable SSO authentication method and or system. In one embodiment a user may authenticate themselves to an identity provider e.g. a server is a kerberos based network using some type of verification mechanism. In certain cases the user may be the author of the electronic document to be signed. In other cases the user and author are distinct persons. Moreover in certain cases the identity provider may be a third party server e.g. an identity server run by VERISIGN INC. of Mountain View Calif. .

The verification mechanism used to authenticate a party signing an electronic document may include the user identification and password for the particular user. This user identification and password may be supplied by for example a user at login wherein the user logs into their own computer system and the user s identity is verified using kerberos in conjunction with the identity provider. Once the user s identity is verified the user is free to make a service request of the identity provider to receive services so as for example to facilitate the digital signing of an electronic document. For example the user may make a request for and receive a SAML assertion e.g. XML formatted data that identifies the user from the identity provider that can be used to receive a credential from a signing server. This credential may contain a symmetric or asymmetric key to be used to digitally sign the document. In certain cases the credential may observe the X.509 standard and use a private key e.g. the private key of the public key private key pair in the case of asymmetric key encryption to digitally sign an electronic document. Once signed the validity of the digital signature may be determined by a public key held by a verifying party e.g. a party who seeks to verify the digital signature .

Example embodiments may include the use of an open PGP model in lieu of a PKI model for verifying the identity of the signing party and obtaining a credential for signing. As will be more fully illustrated below in an open PGP model e.g. open PGP system multiple authenticating member servers are organized into a ring of trust wherein each of these authenticating member servers performs the roles of both identity provider and signing server. In cases where an open PGP system is employed the author of an electronic document may set the number of authenticating members required to authenticate a user s e.g. a signing party identity. Further the author of an electronic document may be free to choose a particular authenticating member server to identify a user. In cases where a user is successfully identified the user may receive a symmetric or asymmetric key with which to digitally sign an electronic document. This symmetric or asymmetric key may be provider to the user as part of a certificate containing other information needed for digital signing.

Some embodiments may include a user logging onto an operating system such as MICROSOFT WINDOWS or LINUX and the GUI e.g. a desktop associated therewith using a user identification and password. This login may be kerberos based and hence logging in results in a kerberos TGT being generated as a single sign on token. Then a user receives a PDF that needs to be signed using a signing server. This signing server may specify a seed value or other verifying value for the signature. Next a user may initiate a single action e.g. a single mouse click on a signature field displayed on the document. When this single action is executed the specific signing server is identified through its URL value e.g. the seed data . In some embodiments the user does not need to select the appropriate credential since it is automatically selected for them. Moreover in some embodiments the user sees a signing dialog asking for confirmation. In other embodiments the user does not see this signing dialog.

Once the user engages e.g. executes in this single action a number of additional operations are automatically executed by the user s computer system. A signing server is automatically contacted through the use of the seed value e.g. the URL . The signing server asks for authentication of the user s computer system with a kerberos TGT being one of the acceptable forms of authentication. Next using the TGT the user s computer system automatically makes a service request of the identity provider to receive a SAML assertion for use with the signing server. In response the identity provider provides a SAML assertion to be used by the computer system of the user who seeks to authenticate themselves to the signing server. This SAML assertion is then automatically provided to the signing server without prompting the user for any information. In response the signing server automatically looks at the SAML assertion and then checks its database of credentials for a credential for the particular user. If the signing server detects it doesn t have any credential for the user it may contact an active directory server e.g. or any other Lightweight Directory Access Protocol LDAP based server . From this active directory server it fetches the relevant information e.g. user name department name of the company and or location . In certain cases the signing server will return a message to the computer system of the user verifying the user s identity based upon the SAML assertion. After the user s identity is verified the signing server may provide one or services to the user. The signing server may act as a signing proxy and sign a document on behalf of another person such as an author. In such a scenario the user s computer system automatically asks the signing server to sign the electronic document or a digest or that document using a private key of a public key private key pair. Once signed this electronic document or digest of that document is returned to the user. Another service that the signing server may provide is that it may grant the user a credential e.g. an X.509 credential to be used by the user to sign e.g. the user will act as a signing party an electronic document. This X.509 formatted credential contains a private key of a public key private key pair and may be stored by the user for future use.

Some embodiments may include the use of a signing server to act as a signing proxy for a user or author e.g. the signing party such that the signing server signs the electronic document. In other embodiment an author or user themselves is the signing party who actually digitally signs the electronic document. In either case the electronic document is signed with a private key or a public key private key pair.

Once the identity of the user is verified by the signing server an electronic document signing request that contains a digest of the electronic document may be transmitted by the computer system across the network to the signing server . Once the identity of the user is again confirmed a signed digest may be generated. The signed digest may contain among other things credential data such as an X.509 credential that contains among other things a private key. This X.509 credential along with the signed digest itself may be transmitted back across the network to the user to be received at the computer system . Once received by the user the signed digest may be checked to determine that the digest in the signed digest corresponds to the digest contained in the document signing request . Where the digests correspond the electronic document may be deemed to be signed by the author through the signing server acting as a signing proxy for the author . In some cases as will be more fully illustrated below the digest in the document signing request may be generated using some type of hashing function such as Message Digest algorithm 5 MD5 or Secure Hash Algorithm SHA 1 .

Example embodiments may include the transmission of an entire electronic document in lieu of a digest of an electronic document such that the entire electronic document and a SAML assertion is transmitted in place of the signing request . Further the entire electronic document may be digitally signed and transmitted in place of the signed digest . The specific implementation needs and empirical testing and modeling may be used to determine whether to use digests or complete versions of the electronic document.

Once the trusted relationship is verified by the signing server the signing server may determine whether or not the author user has previously established its credentials with the signing server . In some cases a credential database may be utilized and or queried to determine whether or not the author user has already established credentials with the signing server . After the identity of the author user is verified by the signing server a session key in the form of a private key is transmitted back across the network to the author user . The author user may then use this session key to sign an electronic document or otherwise generate a signed document . In some cases the signed document may be transmitted across a network to a recipient who utilizes a computer system . In some cases the recipient may be an additional signing party or may be an ultimate recipient of the signed document . If recipient is an additional signing party they may also be required to utilize the signing server to digitally sign the signed document .

Illustrated is an author user who utilizing a computer system generates a session key request . The session key request may contain data such as data that includes for example the author user s identity and the recipient s identity information. The data may be the author user s user identification and password a symmetric or asymmetric key e.g. a session key or some other unique identifying information. The session key request may be formatted for example using XML SAML or some other suitable format. Once the session key request is generated and formatted it is sent over a network to an authenticating member server . The authenticating member server may then verify the identity of the author user and make a determination as to whether or not it has the session key for the identified recipient and or whether it can provide this key to the author user . As previously alluded to in certain cases multiple layers of authentication may need to be addressed prior to the providing of a session key to the author user . This requirement of multiple layers of authentication may be established or otherwise dictated by the recipient . As shown in for example the authenticating member server determines that additional layers of authentication are required before the session key is generated and provided to the author user . Next a session key request is generated and transmitted by the authenticating member server and is sent to an authenticating member server across the network . Once the session key request is received by the authenticating member server the identity of the author user is verified and a determination is made as to whether or not the authenticating member server has the session key for the identified recipient and or whether it can provide this session key to the author user . As shown in the authenticating member server determines that an additional layer of authentication needs to be met such that a further session key request is transmitted across the network to an authenticating member server .

Once the session key request is received at the authenticating member server the authenticating member server makes a determination as to whether or not additional layers of authentication need to be met and or verifies the identity of the author user . Here the authenticating member server determines that no further layers of authentication need to take place and that the authenticating member server does have the session key for the identified recipient. A session key is then generated which in some cases is a private key that is part of an asymmetric public key private key pair. It is transmitted across the network to the computer system being utilized by the author user . After the session key is received it is used to sign a document . Once signed the document is then provided to a recipient who utilizes a computer system . The signed document may be transmitted across the previously illustrated network . In other cases it may be provided in some other manner to the recipient .

In certain cases the previously illustrated authenticating member servers e.g. and may be equally trusted whereas in other cases one or more of these authenticating member servers may be more trusted than another. For example if the authenticating member server makes a determination that the author user and their identity is valid and the authenticating member server has a session key for a particular identified recipient e.g. then that authenticating member server may provide the session key for that particular identified recipient to the author user . It may however only provide this session key where the identified recipient has agreed that the authenticating member server may act independently of any verification performed by other authenticating member servers e.g. provide the session key based solely upon its own verification of the author user .

Some embodiments may include a computer system with a parser to parse seed data from digital content the seed data identifying a signing entity a transmitter to transmit identifier data to the signing entity identified by the seed data a receiver to receive a credential from the signing entity the credential used to sign the digital content and a signing engine to sign the digital content using the credential. Moreover the seed data may be a URL value extracted from the digital content. Additionally the identifier data may be generated through the use of SSO authentication. Further the credential may be an X.509 credential and the parsing may be initiated with a single action.

Once operation is executed an operation is executed that generates an authentication request for a signing server. This authentication request is then provided to an operation which transmits a SAML assertion e.g. identifier data that includes a URL parsed from the metadata associated with the document . This SAML assertion and URL data is then provided to or otherwise accessed by an operation that receives this SAML assertion information. Once received an operation is executed that transmits a SAML assertion from the signing server side to the user side. Then in some cases an operation may be executed to receive the SAML assertion e.g. SAML response . Next an operation is executed that transmits a document signing request from the user side to an operation that receives or otherwise accesses the document signing request. In some cases a document signing request may be a digest of the document a digest generated using some type of hashing function. Then an operation is executed that checks the identifier data submitted by a user against certain credentials contained in a credential database e.g. a persistent or non persistent data store . Once these credentials are verified an operation is executed that transmits a signed digest along with some type of credential such as for example an X.509 credential e.g. a private key containing additional credential information regarding the requesting user . This signed digest is then received or otherwise accessed via the execution of an operation . In some cases once received the private key contained in the signed digest is extracted and a signed document is generated.

Once input is received to initiate signing an operation is executed that transmits a service ticket to an identity provider. This service ticket such as service ticket is then provided to an operation residing as a part of the identity provider. Next a decisional operation is executed to determine whether a service ticket is valid. In cases where validity or invalidity is determined an operation is executed that generates the SAML assertion such as SAML assertion . SAML assertion may among other things provide formatted data in the form of XML that may verify or otherwise instruct the author user as to whether their identity has been validated. The SAML assertion may be received or otherwise accessed by an operation .

Once the SAML assertion is received an operation is executed that transmits the SAML assertion e.g. a SAML response to for example a signing server such as signing server . In certain cases operation may only execute where the identity of the author user such as author user has been verified by the identity provider such as identity provider . Once operation is executed and the SAML assertion is transmitted to the signing server an operation is executed that receives or otherwise accesses the SAML assertion .

Next an operation is executed that checks the credentials of the author user such as author user that is associated with the SAML assertion . In certain cases a credential database may be used by the operation to verify or otherwise check the credentials of the author user . Next a decisional operation is executed that determines whether a valid SAML assertion has been provided. In cases where decisional operation evaluates to false then a failure operation is executed wherein the author user may be notified by the signing server such as signing server of the failure of this SAML assertion to correctly identify the user. In certain cases other bases for failure may also exist. In cases where decisional operation evaluates to true an operation is executed that stores the data extracted from the SAML assertion into a credential database such as credential database . This data may for example identify the user as one authorized to receive future services from the signing server. Then an operation is executed that generates and transmits a session key such as an X.509 credential containing the session key. The session key may be for example a private key portion of an asymmetric public key private key pair. Once the operation is executed a session key is generated contained within the X.509 credential and sent from the signing server to the author user who utilizes a computer system . Then an operation is executed that receives the session key and in some cases extracts the private key for use in the digital signing of an electronic document.

Next an operation is executed that validates the sender as a member of the open PGP system e.g. the ring of trust the sender in this case being for example the author user . In order to validate the sender as a member a member database may be accessed. Then an operation is executed that checks the member database to see if the recipient such as recipient is also a member. Next a decisional operation is executed that determines whether or not a valid session key has been provided by the requesting member. In cases where decisional operation evaluates to true an operation may be executed that transmits a session key to the requesting member wherein this session key may be for example a public key generated by the recipient to be used to digitally sign documents sent to the recipient by for example an author user . In certain cases rather than operation sending a session key as a response to decisional operation evaluating to true a further session key such as session key may be sent to another authenticating member for additional authentication to take place. In cases where decisional operation evaluates to false e.g. the authenticating member server does not have the session key for the particular recipient an operation is executed that transmits the session key request to another authenticating member server e.g. and or . The session key request is transmitted across a network such as network .

In certain cases the number of layers of authentication may be based upon requirements that are set out by the recipient These requirements may dictate that only one authenticating member server may need to verify the identity of the author user or that multiple authenticating member servers may be used to authenticate the identity of an author user such as author user . In certain cases the recipient such as recipient may give preference to one or more of the authenticating member servers.

Some embodiments may include the various databases e.g. and being relational databases or in some cases OLAP based databases. In the case of relational databases various tables of data are created and data is inserted into and or selected from these tables using a Structured Query Language SQL or some other database query language known in the art. In the case of OLAP databases one or more multi dimensional cubes or hyper cubes containing multidimensional data from which data is selected from or inserted into using a Multidimensional Expression Language MDX may be implemented. In the case of a database using tables and SQL a database application such as for example MYSQL MICROSOFT SQL SERVER ORACLE 8I 10G or some other suitable database application may be used to manage the data. In this the case of a database using cubes and MDX a database using Multidimensional On Line Analytic Processing MOLAP Relational On Line Analytic Processing ROLAP Hybrid Online Analytic Processing HOLAP or some other suitable database application may be used to manage the data. The tables or cubes made up of tables in the case of for example ROLAP are organized into an RDS or Object Relational Data Schema ORDS as is known in the art. These schemas may be normalized using certain normalization algorithms so as to avoid abnormalities such as non additive joins and other problems. Additionally these normalization algorithms may include Boyce Codd Normal Form or some other normalization or optimization algorithm known in the art.

Some example embodiments may include the above illustrated operations being written as one or more software components. Common to many of these components is the ability to generate use and manipulate the above illustrated UI elements and layout elements and the data associated therewith. These components and the functionality associated with each may be used by client server or peer computer systems. These various components can be implemented into the system on an as needed basis. These components may be written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Enterprise Java Beans EJB Component Object Model COM or Distributed Component Object Model DCOM or other suitable technique. These components are linked to other components via various Application Programming Interfaces APIs and then compiled into one complete server and or client application. The method for using components in the building of client and server applications is well known in the art. Further these components may be linked together via various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a GUI . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The various levels can be written using the above illustrated component design principles and can be written in the same programming language or a different programming languages. Various protocols may be implemented to enable these various levels and the components contained therein to communicate regardless of the programming language used to write these components. For example an operation written in C using Common Object Request Broker Architecture CORBA or Simple Object Access Protocol SOAP can communicate with another remote module written in JAVA . Suitable protocols include SOAP CORBA and other protocols well known in the art.

Some embodiments may utilize the OSI model or TCP IP protocol stack model for defining the protocols used by a network to transmit data. In applying these models a system of data transmission between a server and client or between peer computer systems is illustrated as a series of roughly five layers comprising an application layer a transport layer a network layer a data link layer and a physical layer. In the case of software having a three tier architecture the various tiers e.g. the interface logic and storage tiers reside on the application layer of the TCP IP protocol stack. In an example implementation using the TCP IP protocol stack model data from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also contains port information for a recipient software application residing remotely. This TCP segment is loaded into the data load field of an IP datagram residing at the network layer. Next this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer and the data transmitted over a network such as an internet Local Area Network LAN Wide Area Network WAN or some other suitable network. In some cases internet refers to a network of networks. These networks may use a variety of protocols for the exchange of data including the aforementioned TCP IP and additionally ATM SNA SDI or some other suitable protocol. These networks may be organized within a variety of topologies e.g. a star topology or structures.

The example computer system includes a processor e.g. a Central Processing Unit CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a User Interface UI cursor controller e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. HTTP Session Initiation Protocol SIP .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

In some embodiments rather than an author having to specifically identify the particular signing server from which a user e.g. a signing party may obtain a key for a digital signature in some cases this process may be fairly automated requiring only a single action of the part of a user e.g. a signing party and or an author . In certain cases the ease of executing this single action may make digital signatures more easily used to sign a variety of electronic documents.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

