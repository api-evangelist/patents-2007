---

title: Network access control system and method using adaptive proxies
abstract: A method, system and computer program for providing multilevel security to a computer network. The method comprises the step of receiving a first communication packet on at least one network interface port from an outside network. The method further includes the steps of filtering the first packet in one of at least two levels of security comprising a first level of security which examines the content information of the packet and a second level of security which examines the first packet excluding the content information of the packet. The system includes a first packet filter configured to filter its input packets by examining content information of its packets and a second packet filter configured to filter its input packets by examining the header information without examining the content information of its packets. The system further includes a third filter which is configured to forward a number of packets to one of the first and second filters, thereby providing security to the computer network. The computer program includes a first module located in an application layer, a second module located in a network layer, and a third module located in a kernel space and configured to examine a number of packets received by the computer network from at least one outside network and to forward the number of packets to one of the first and second modules after examining the number of packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782260&OS=08782260&RS=08782260
owner: McAfee, Inc.
number: 08782260
owner_city: Santa Clara
owner_country: US
publication_date: 20070914
---
The present application is a continuation of a patent application filed Jan. 12 2004 under Ser. No. 10 756 687 now U.S. Pat. No. 7 391 770 which is in turn a continuation of an application filed Oct. 8 1999 under Ser. No. 09 414 711 now U.S. Pat. No. 6 728 885 which in turn claims the benefit of a provisional patent application filed Oct. 9 1998 under Ser. No. 60 103 837 all of which are incorporated herein by reference.

This invention relates to providing security in communication networks. In particular the invention relates to firewall technology in packet switched networks for adaptively providing a plurality of security levels.

Referring to a typical firewall is placed between a Local Area Network LAN and outside networks . LAN may include a plurality of internal hosts . Outside networks can be networked through the Internet . Outside network may also include its own firewall . Internal hosts and remote hosts are computers e.g. personal computers PC or computer workstations. Firewall includes a combination of computer hardware and software components configured to protect LAN i.e. preventing unwanted intrusions from outside networks .

In order to exchange information e.g. sending a message from remote host to internal host a connection is established by sending a plurality of packets therebetween. A packet is a basic message unit routed between a source computer and a destination computer e.g. remote host and internal host respectively in a packet switched network depicted in . For example when a file e.g. an e mail message HTML file or other similar message is sent from a source computer to a destination computer the file is broken into a plurality of packets. Here HTML Hypertext Markup Language is a set of markup symbols or codes which instructs a Web browser how to display a Web page s words and images. 

More specifically a Transport Control Protocol TCP module of a TCP IP layer in a source computer divides the file into packets of an efficient size for transmitting over the network. Each packet includes header information e.g. a destination address and a source address and content information i.e. the broken up message file. Further the plurality of packets from the file includes a plurality of connection control packets and data transfer packets. The connection control packets include at least one connection establishing packet e.g. a SYN packet and at least one connection disconnection packet e.g. RST FIN FIN ACK packets. The data transfer packets include the pieces of the broken up file. Individual packets for a given file may travel different routes through the packet switching network. When the packets from one file have all arrived at their destination computer they are reassembled into the original file by a TCP module in the destination computer.

Here the TCP module is a communication protocol used along with the Internet Protocol IP to send data in the form of packets between a source and destination computers. While the IP module performs the actual delivery of the data the TCP module keeps track of the individual packets that a file is divided into for efficient routing through the Internet.

OSI Open Systems Interconnection is briefly described here to provide the context in which the present invention is discussed later. OSI is a reference model for the layer of common functions in a communications system. Although many existing hardware and software products have been developed on a slightly different model the OSI model is often used as a guideline when new products are designed and serves as a common reference for understanding any particular design or comparing it with others.

Referring back to the basic task of firewall is to separate internal network from outside networks and enforce security policies with a set of rules. The most common firewall features include securing internal network access with a perimeter defense controlling all connections into and out of internal network filtering packets according to previously defined rules authenticating or making sure users and applications are permitted to access resources logging of activities and actively notifying the appropriate people when suspicious events occur.

Conventional firewalls include only one of a packet filter an application proxy and a stateful inspection.

A packet filter examines each incoming packet and decides what actions to take by checking against a table of access control rules. The packet filter in its simpler embodiments examines the header information of each incoming packet and makes pass fail decisions based on their source and destination addresses. A weakness of such a firewall is that the content information of the packets is unknown to the firewall. More specifically because packet filters perform their checking at the network access layer there is no real knowledge of application level vulnerabilities. As a result direct connections are allowed between a source and destination computers through firewall exposing internal hosts to direct attacks.

An application proxy does not allow direct contact between a trusted and untrusted networks. Each of the packets passing through this type of firewall is examined at the application layer meaning the application proxies understand the destination and contents of packets. Such a firewall for example distinguishes between FTP Put and Get commands. A typical application proxy includes a built in proxy function also known as a transparency function. The transparency function replaces the IP address of a host on the internal protected network with its own IP address for all traffic passing through. The transparency function provides added security because it hides the addresses of internal hosts. This makes it more difficult for hackers on the outside to target specific devices inside such a firewall. For this higher security however the application proxy requires large amounts of processing power and a corresponding loss of performance.

Finally a stateful packet filter examines packets without examining the packets as well as that of an application proxy. After a packet filter firewall or stateful inspection firewall has decided to allow a connection to be made it allows data to travel directly between the networks without further inspection. Once a session is opened the nature of the session can be changed without being detected. This allows for more speed but also creates potential security risks as well. Again making internal hosts vulnerable to attacks from outside.

Accordingly there exists a need for a firewall method which makes it possible to dynamically select the best procedures from existing firewall methods to achieve the required level of security while meeting performance constraints.

Further the definitions of network communication terms and phases can be found in Andrew S. Tannenbaum Computer Networks 2ed. 1989 the contents of which are herein incorporated by reference. Information on network programming can also be found in W. Richard Stevens Unix Network Programming 1990 the contents of which are herein incorporated by reference.

The firewall of the present invention combines the advantages provided in the conventional firewall technologies described above while eliminating short comings thereof. In other words the firewall of the present invention is just as secure as a proxy firewall but it is more flexible and efficient.

More specifically the firewall of the present invention is provided between an internal computer network to be protected by the firewall and at least one outside network. The firewall includes a dynamic packet filter which communicates with a proxy. The proxy registers with the dynamic packet filter for notifications of request to establish new data communication connections through physical connections between the internal and outside computer networks. When a connection establishing request is received in the form of a SYN packet the dynamic packet filter notifies the proxy and provides attribute information thereto. The attribute information includes the source and destination addresses and the physical connection on which the packet was received.

In order to determine whether to allow the requested data communication connection the proxy compares the attribute information with rules in a configuration information file. The rules in the configuration information file are entered by a user to set forth whether to allow data communication connections for certain physical connections. If the rule is to allow the data communication connection and forward the packets at the packet level the dynamic packet filter creates a connection rule so as to apply the connection rule to packets having the same attribute information. Subsequent packets received with the same attribute information are then automatically forwarded without consulting the proxy. Once the connection terminates the connection rule is removed and the proxy is notified. However if the decision is to absorb the dynamic packet filter sends the packets up a TCP IP stack in the firewall where they will be accepted by the proxy.

In other words the proxy acts as the server to the incoming connection and initiates a new connection acting as a client to the ultimate destination. In between the necessary application level filtering is performed.

An added benefit of the present invention beyond the performance improvement is the flexibility it gives its users. Within the adaptive proxy model a firewall can be configured to follow more or less stringent security rules fine tuning performance even more.

Referring to there is illustrated an overall block diagram of a firewall of the present invention that includes a Network Interface Card NIC coupled to at least one outside network. NIC is also coupled to a Network Address Translation module NAT which in turn is coupled to a Dynamic Packet Filter module DPF . DPF is coupled to a proxy a User Defined Static Packet Filter module UD SPF Transparency Packet Filter TPF and a local Transmission Control Protocol Internet Protocol stack TCP IP . TCP IP in turn is coupled to an Out Going Dynamic Packet Filter OG DPF .

It should also be noted that the term coupled should be interpreted to mean one of many connection methods. For instance NIC may be coupled to the at least one outside network via wire or wireless communication connections whereas NIC may be coupled to NAT via physical wires. However when two coupled modules are implemented in computer programs the term coupled means data transfer between the two computer program modules during execution thereof. In other words the term coupled means a connection established through at least one of wireless communication links wire connections and computer program data transfers.

NAT DPF UD SPF TPF local TCP IP and OG DPF are located in the kernel space of firewall . Here the term kernel designates the operating system in a computer that contains the system level commands hidden from the user. For example the kernel may include device drivers memory management routines scheduling programs and other system calls. The kernel always runs while the system is operating. Proxy is located in the user space i.e. the application layer of firewall . The term proxy designates either all of the filtering and decision making processes or individual filtering processes occurring at the user space. Proxy therefore can be referred as a one process or a plurality of processes depending upon the context in which the term appears.

Preferably the preceding components in the kernel space and user space are implemented in computer programs written in C or C . Alternatively the computer programs can be written in other computer languages such as Pascal. The computer programs are also implemented to run on a variety of computer operating systems such as UNIX Windows NT or LINUX. It should be noted that the computer language and the corresponding operating system are not essential part of this invention therefore the invention disclosed herein can be implemented in any computer language and operating system.

The computer programs are stored in a computer readable storage medium e.g. hard disks or floppy diskettes. In operation the computer programs are read to a random access memory to be executed by a processor. The computer readable storage medium the random access memory and the process are preferably included in the computer of firewall . Alternatively however the computer readable storage medium can be provided by another computer or floppy diskettes. Hence the computer programs can be downloaded from a remote computer coupled to firewall .

Referring back to preferably firewall can be part of a computer located between LAN and outside networks. NIC also known as an adapter interface is a hardware attachment usually a computer expandable board that connects firewall to outside networks. Each physical connection established through NIC is assigned to a port number so as to identify the physical connection.

The above described elements are further explained by way of steps that take place during operation therein. For instance a plurality of packets from the outside networks arrives at NIC . Each received packet is examined separately by firewall . More specifically when a packet is received by NIC from any one of outside networks the packet is associated with a corresponding port number. The packet is then forwarded to NAT which translates the destination address of the received packet into a corresponding address of internal hosts. The packet is then sent to DPF for further examination and processing.

Referring to in step DPF determined whether the received packet is a connection control packet which requests to establish a data communication connection disconnect an established connection or put an established connection into a hold state. It should be noted that a physical connection between a source and destination connection does not establish a data communication connection. The connection is completely established only when the physical and data communication connections are achieved. In order to avoid any confusion the physical communication connection is referred as a physical connection and a data communication connection is referred as a connection hereinafter. If the packet is a connection control packet DPF performs step and if the packet is not a connection control packet i.e. a data packet then DPF performs step .

In step DPF determines whether the received packet is a connection establishing packet i.e. a SYN packet. If the packet is a connection establishing packet DPF performs step and if the packet is not a connection establishing packet DPF performs step .

In step DPF performs the following if the packet is a connection disconnecting packet i.e. a FIN packet the corresponding pre existing connection is disconnected and if the packet is a hold packet i.e. an RST packet then the corresponding pre existing connection is put on hold.

Referring to in step to be performed when the packet is a connection establishing packet DPF further determines whether the port i.e. the port on which the packet was received is a registered port. If the port is registered DPF performs step and if the packet is not registered DPF performs step . The system administrator specifies which of the ports are to be registered in a configuration information file. For example when physical connections are made between a remote host computer belonging to an outside network and a port on NIC the system administrator makes security assessment of the remote host. Subsequently the system administrator sets up the configuration information file setting forth whether to register that port.

In step to be performed when the port is registered DPF transfers attribute information of the packet to proxy . Preferably the attribute information includes the source and destination addresses of the packet and the port on which the packet was received. It should be noted however other information contained the connection establishing packet can be sent to proxy as well. Once the attribute information has been sent to proxy DPF awaits instructions therefrom.

Proxy upon receiving the attribute information from DPF determines whether to allow the connection. If the connection is to be allowed proxy further determines which filter dynamic filter rule to apply.

One such dynamic filter rule is a filter all rule. This rule is utilized when only packet filtering is required for all packets in a particular connection. For example this rule could be defined to apply packet filters to all telnet packets.

Another dynamic filter rule is a selective filtering rule. This rule requires proxy to handle connection control packets and packet filters to handle the data packets. In other words the packet filtering will be enabled only when proxy has performed it s security checks for the connections i.e. checking the relevant information on the SYN packet sent by DPF . For instance this rule is useful for protocols such as File Transfer Protocol FTP which sends data packets on a different connection after establishing the connection. Other filtering rules are also possible such as not applying any filtering or applying a proxy filter at the application layer to all packets received on a specific connection.

The configuration file discussed above which stored the information on which ports are registered further includes various filter rules to be applied for specific connections. For example packets received from a particular port can be subjected to the filter all rule filter while packets received from another port can be subjected to the selective filtering rule. The configuration file is preferably stored in the computer where firewall is located. It should be noted however that the configuration file can be stored in any of internal hosts. It should also be noted that the system administrator creates the configuration information file discussed above and specifies the TPF rules by utilizing a graphical user interface configured receive appropriate information from the system administrator.

Once proxy determines whether to allow the connection and which one of the rules to apply to the connection that information is transferred to DPF .

In step DPF discards the packet if proxy determined not to allow the connection. In step DPF creates a new connection and applies the corresponding rule. The rule will be applied to any subsequent packets from that connection until the connection is disconnected.

A new connection is created by modifying a connection list. The connection list as the name implies includes a list of currently active or soon to be active connections and relevant information thereof such as the source and destination addresses and the port on which the connection is or to be established. Each entry in the connection list represents TCP or UDP User Datagram Protocol connection. For instance if the connection is allowed by proxy the corresponding connection entry in the connection list is modified to indicate that the connection has been allowed and established.

In yet another aspect of the invention since there are no SYN packets for UDP connections if a UDP packet has previously established a connection and the connection exists in the connection list then that connection is used for new UDP packets received on the same connection. Other UDP packet processing steps are similar to the TCP packet processing steps described above.

Preferably the communication between proxy and DPF describe above is achieved by using a socket. The following is a description of a specific implementation of the sockets. For instance a new network protocol family and new functions can be added to a conventional socket API Application Program Interface . Sockets provide a convenient and well known programming model to one of ordinary skill in the art.

The above definition of struct is a structure in computer program language. A structure is a collection of one or more variables possibly of different types grouped together under a single name for convenient handling. It should be noted that structures are called records in some other computer languages notably Pascal. The structures permit a group of related variables to be treated as a unit instead of as separate entities. This arrangement helps to organize complicated data particularly in large computer programs.

The variable definitions such as u short and u char specify the length of corresponding variables to be unsigned short integer and unsigned character respectively. These terms are well known to one of ordinary skill in the art of computer programming. The following is a brief description of the various fields in the struct sockaddr gt 

This variable field specifies a source IP address. For a connect function sin addr specifies the source IP address of a connection to be filtered. For a bind function it specifies the IP address of an interface port to which the socket should be bound by the bind function. For an accept function it specifies the source IP address of the SYN UDP packet received by firewall . The connect bind and accept functions are discussed below.

This variable field specifies a source port number i.e. the interface port on which the packets are to be received. For the connect function sin port specifies the source port of a connection to be filtered. For the bind function it specifies the destination TCP UDP port number of SYN UDP packets for which the proxy wishes to register via a listen function. For the accept function it contains the source port number of the SYN UDP packet received by the firewall. The listen function is discussed below.

This variable field specifies the type of Internet Transport Protocol that must be Dynamic Packet Filtered. The only valid values for this variable are IPPROTO TCP for TCP and IPPROTO UDP for UDP.

This variable field specifies a destination IP address. For the connect function sout addr specifies the destination IP address of a connection to be packet filtered. For the accept function it contains the destination IP address of the SYN UDP packet received by the firewall.

This variable field specifies the destination port number. For the connect function sout port specifies the destination port of a connection to be packet filtered. For the accept function it contains the destination port number of the SYN UDP packet received by the firewall.

This variable field specifies unused byte of data. This enables the use of padding to match the size of struct sockaddr.

Preferably data gt data structure defined below is used by the getsockopt function to retrieve DPF connection statistics.

In order to fully discuss the new socket structure the semantics of the various functions mentioned above is described below. As a starting point the semantics of the functions is similar to the semantics of the various standard socket application calls for adaptive proxies and DPF. In other words except for the data structure described above the parameters to the functions are substantially similar to conventional socket interfaces such as the standard Berkley and Winsock socket interfaces.

This function creates an endpoint for communication. It opens a passive entry and returns a descriptor to the socket.

The bind function assigns a name to an unbound socket created by socket. This causes the socket to be associated with the address specified in name. From the perspective of DPF the bind function allows proxy to register with a kernel driver for packet filtering on a specific interface port number. Only the sin family sin addr and sin port fields in name are used.

This function looks for connection requests e.g. receiving a SYN packet on a socket. The listen function requests that DPF look for connection requests on the address and port specified by the name parameter supplied to the bind function. By invoking the listen function on a socket proxy registers with the kernel driver so that proxy will receive information about SYN UDP packets arriving on the interface and the specified port. The accept function provides address information for the SYN UDP packet.

This function supplies attribute information about an incoming SYN UDP packet to a registered proxy. When the accept function returns the addr structure will contain the source and destination IP addresses and port numbers of the requested connection. The accept function returns a new socket descriptor that is mapped to this requested connection.

The connect function allows proxy to specify a DPF rule to the kernel driver so that an entire connection is packet filtered including the SYN UDP packet . Proxy in this case does not perform source or destination checks for the connection. The addr parameter should contain the source and destination IP addresses and port numbers and the protocol type of the socks descriptor bound to this connection. Proxy should use this socket descriptor to perform any operations related to this connection.

This function sets socket options. For example this function can be used by proxy to indicate to DPF to filter the connection mapped to the socket descriptor. Following are valid values for the parameters to socket

This function gets various socket options. For example this function can be used by proxy to retrieve the number of bytes of data transferred over a packet filtered connection.

As described above by way of data structures and functions utilizing the data structures proxy preferably utilizes the application level socket interface to interact with DPF in the kernel. For instance proxy performs an accept to retrieve the information about an incoming SYN packet on the registered port. The information available about the SYN packet is the source and destination IP address and the port numbers. Subsequently proxy performs validation for the connection and if it decides to reject the connection request then it closes the socket associated with that connection. This will cause a close request to be sent to the kernel which in turn will delete the pending connection entry and discard the SYN packet. If proxy accepts the connection then it uses the setsockopt function to inform the kernel to filter the connection.

DPF requires two way communication between the kernel and proxy . The kernel needs to notify proxy of the arrival of either a SYN RST or a FIN packet. Proxy then needs to inform the kernel as to whether to accept or reject the connection. Also proxy may need to request the kernel to open up a future connection request.

The following are more detailed steps of the communication between DPF and proxy using the above defined functions.

It should be noted that the above described program functions and associated data structure formats are implemented in computer programs such as C or C . Alternatively the computer programs can be written in other computer languages such as Pascal.

Referring back to in order to continue on with the description of steps that take place during operation of firewall in step DPF determines whether the packet matches with any of user specified rules. This steps is performed when the port on which the communication establishing packet was received is not registered. Whether the packet matches a user specified rule is determined by attribute information of the packet. The attribute information of the packet includes 

Anyone or a combination of the attributes can be utilized to determine if the packet matches with any user specified rules. Subsequently if a user specified rule matches with the communication establishing packet the matched rule is applied to the packet step . If no user specified rule matches the packet a transparency is applied step .

The user specified rules include user specified static filter rules and user specified dynamic filter rules.

Each entry in the user specified static filter rules includes the attributes discussed above and a value indicating the type of filter to apply to the packet. The types of filters include permit filter to forward the packet to its destination deny to discard the packet absorb to apply an application level filter and a filter all rule discussed above. In order to provide a finer granularity in the packet filtering the packet filter of the present invention is extended to include additional fields such as 

 1 TCP flags SYN SYN ACK URG PUSH are provided to block new TCP connections from a certain host but continue to allow packets of existing connections by adding a filter rule to deny SYN packets from the host and

 2 Unlike the conventional packet filter rules which only allow a single port to be specified in a rule the present invention is also configured to allow deny connections to a particular interface port range. For example connections to X terminal ports can be denied by specifying a filter rule with the range of X terminal ports specified.

The user specified dynamic filter rules are defined in the configuration information file. In other words proxy may add an explicit dynamic rule as discussed above even before a connection is established. This is useful when proxy or the user has performed filtration or validation of the physical connection i.e. between a source and destination then the connection can be allowed without waiting to receive a connection establishing packet In this case when a connection disconnecting packet is arrived DPF handles it in accordance with the procedure discussed above.

Now referring to the transparency procedure in step of DPF determines if the transparency for the port on which the packet was received is on. If the transparency is on the packet is sent to TPF . In this case the packet is eventually forwarded to proxy to be filtered at the application layer level. If the transparency is off the packet is sent to its destination. For instance if the destination is firewall the packet is sent to proxy and if the destination is an internal host computer the packet is sent to the internal host.

The above procedure for transparency is provided because DPF simulates a conventional proxy filter. In other words the transparency option is also provided to the packets not forwarded to TPF . More specifically the transparency is applied to both incoming and outgoing packets similar to packets to from the conventional proxies.

For incoming packets if the packet was part of a connection i.e. not a SYN packet if it was to be forwarded to firewall and if transparency is OFF on the port on which it was received then the packet s destination address is modified with the real destination i.e. the address of an internal host computer which the packet is to be sent. It is an error if transparency is ON and the packet s destination address was not firewall and there was no user specified filter rule matching the packet.

For outgoing packets if the packet belonged to a connection and if transparency was OFF on the outgoing port then the packets source address is modified with the firewall address of the outgoing port.

Referring to which illustrates example procedures for transparency when an internal host computer having an address of A initiates a data communication connection to an external host computer having an address of B a connection establishing packet with A B address is sent to firewall . At firewall when the transparency is off the source address is modified to reflect the IP address of firewall and the packet is forwarded to external host . In response to the packet external host forwards an acknowledging packet i.e. an ACK packet having an address of B FW. Upon receiving the packet the address of the received packet is modified to be B A because the transparency is off. It should be noted that when the transparency is on as discussed above the packet is absorbed into firewall for further processing.

Now referring to in order to discuss the remaining steps in step DPF determines whether the received packet belongs to an existing connection. If the packet belongs to an existing connection DPF performs step and if the packet does not belong to an existing DPF connection DPF performs step .

Whether a connection is established or not is determined by comparing the relevant connection information i.e. the source and destination addresses and the port on which the packet is received with the connection list discussed above.

Subsequent to step DPF determines whether a user specified rule matches to the packet. If a user specified rule matches the packet the rule is applied step and if no user specified rule matches the packet the packet is sent to its destination step .

In step DPF determines whether a user specified rule matches the packet. If a user specified rule matches the packet the rule is applied step and if no user specified rule matches the packet the transparency is applied step . The transparency step is discussed above in .

Referring back to an outgoing packet is forwarded to OG DPF . If the outgoing packet is an out going connection establishing packet from one of the internal host commuters the interface port on which the packet is leaving is saved in the connection list. This step allows DPF to match future received packets belonging to that connection.

It should be understood that various modifications will be readily apparent to those skilled in the art without departing from the scope and spirit of the invention. Accordingly it is not intended that the scope of the claims appended hereto be limited to the description set forth herein but rather that the claims be construed as encompassing all the features of patentable novelty that reside in the present invention including all features that would be treated as equivalents thereof by those skilled in the art to which this invention pertains.

