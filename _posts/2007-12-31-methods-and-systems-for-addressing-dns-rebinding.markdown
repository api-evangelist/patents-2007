---

title: Methods and systems for addressing DNS rebinding
abstract: A computer-implemented method comprising detecting a resolution of an internet address to a first computing-device address, the internet address being associated with a first domain. The method may also comprise storing a domain-name record, the domain-name record associating the internet address with the first computing-device address. The method may comprise using the domain-name record to bind the first domain to the first computing-device address and preventing, until a request to leave the first domain is detected, the first domain from being rebound to a second computing-device address. Systems and computer-readable media for addressing DNS rebinding are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970939&OS=07970939&RS=07970939
owner: Symantec Corporation
number: 07970939
owner_city: Mountain View
owner_country: US
publication_date: 20071231
---
Computer attackers may use many techniques to gain access to secure computing systems. One method used by hackers is known as domain name rebinding. In a domain name rebinding attack an attacker may subvert the same origin policy implemented by a browser in order to gain access to sensitive information and secured servers.

Domain name rebinding attacks may be relatively simple to implement. The attacker may register a domain delegated to a Domain Name System DNS server controlled by the attacker. The attacker may configure the DNS server to respond to DNS queries with relatively short Time To Live TTL values. In response to a first DNS query the DNS server may provide an Internet Protocol IP address to a malicious server. The browser may send a second DNS query to refresh the cache after the cache entry which may have a short time to live expires. In response to the second request the DNS server may provide an IP address of a secure system that the attacker desires to access.

One example of how DNS rebinding may be implemented is in the context of a web page with multiple frames. First an attacker may attract a user to direct a browser to the attacker s domain. The attacker may use advertisements e mails or various other tactics to draw the user to the attacker s domain. The attacker s DNS server may respond to a first DNS query with an IP address of a server controlled by the attacker. After a cached record containing the first IP address expires the browser may send a second DNS query to the attacker s DNS server and the DNS server may respond to the second DNS query with an IP address of a legitimate server such as a bank s server.

As a result of the DNS rebinding a first frame in the web page may originate from the attacker s server and a second frame may originate from the bank s server. The frame originating from the attacker s server may be hidden from the user such that the user only sees the frame originating from the bank. The bank s actual website may be rendered on the browser such that the user may have no reason to doubt that the page is sent from the bank. In fact site key technology of the bank might even be deployed and work through the browser. The browser may not recognize that the malicious frame and bank s frame originate from different sources. Thus the attacker may have subverted the same origin policy of the browser. The attacker s frame may monitor the bank s frame for user keystroke events and may obtain other sensitive information from the bank s website.

One technique that attempts to prevent DNS rebinding attacks is known as DNS pinning. In DNS pinning a browser may be programmed to ignore the TTL value provided in response to DNS queries. The TTL value may be overridden by a longer TTL value e.g. a ten minute TTL value . In some situations the longer TTL value may keep the browser from sending a second DNS query and may therefore be able to keep attackers from performing DNS rebinding.

Attackers have found ways to work around DNS pinning technologies. For example an attacker s web page may make a request to a non existing port of the attacker s domain. In this situation the browser may attempt to refresh its DNS cache by sending out another DNS query. This may allow the attacker to perform DNS rebinding and refresh the DNS cache with an IP address from a different server override the IP address of the attacker s server with a trusted domain IP address . What is needed therefore is more robust protection against DNS rebinding attacks.

Embodiments of the present disclosure may address various disadvantages and problems associated with prior attempts to prevent DNS rebinding attacks and may also provide various other advantages and features. For example some embodiments may prevent until a request to leave e.g. navigate away from a first domain is detected the first domain from being rebound. Such a method may include detecting a resolution of an internet address e.g. a uniform resource locator or uniform resource identifier to a first computing device address e.g. an internet protocol address . The internet address may be associated with a first domain. The method may also comprise storing a domain name record. The domain name record may associate the internet address with the first computing device address. The first domain name record may be stored by caching the domain name record at a browser level and or at an operating system level. The method may comprise using the domain name record to bind the first domain to the first computing device address. Then as previously mentioned the method may comprise preventing until a request to leave the first domain is detected the first domain from being rebound to a second computing device address.

According to some embodiments using the domain name record to bind the first domain to the first computing device address may comprise providing the domain name record in response to a subsequent domain name service query for the first domain. Preventing the first domain from being rebound may also comprise prohibiting until the request to navigate away from the first domain is detected modification of the domain name record. In such embodiments the method may comprise receiving a request to access a non existing port on the first domain. The method may also comprise preventing the domain name record from being modified in response to the request to access the non existing port. In at least one embodiment the method may operate by hooking a domain name system DNS query application programming interface API .

In some embodiments a system may comprise a browser plug in for a network browser. The browser plug in may comprise a detection module configured to detect a resolution of an internet address to a first computing device address. The internet address may be associated with a first domain. The browser plug in may also comprise a domain name record cache configured to store a domain name record. The domain name record may associate the internet address with the first computing device address. The browser plug in may also comprise a domain name system response module configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain. The browser plug in may further comprise a security module configured to prevent until the browser navigates away from or otherwise leaves the first domain the first domain from being rebound to a second computing device address. In some embodiments the detection module and the domain name record cache may be part of a domain name system proxy installed at a kernel level. In other embodiments the domain name system response module and the security module may also be part of the domain name system proxy installed at the kernel level.

As discussed embodiments of the instant disclosure provide various methods and systems for dealing with DNS rebinding attacks. Various embodiments may provide a browser plug in for dealing with DNS rebinding attacks. Other embodiments may comprise a kernel level DNS proxy and at least one embodiment combines a kernel level DNS proxy and browser plug in approach to address DNS rebinding.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The following is intended to provide a detailed description of various embodiments and should not be taken to be limiting in any way. Various exemplary methods and systems for addressing DNS rebinding are described and or illustrated herein. For example the instant disclosure presents methods and systems for preventing until a browser leaves a first domain a web page from being rebound to a second computing device address. Such methods and systems may be implemented in a browser plug in a kernel level proxy through some combination of browser level and kernel level modules or through any other suitable approach. Various other implementations also fall within the scope of the instant disclosure. As discussed in greater detail below embodiments of the instant disclosure may provide more robust and effective security.

The internet address may be associated with a first domain. An internet address may be any identifier of a domain and may be associated with a top level domain a second level domain and or various other sub domains. A top level domain may be a domain such as a .com domain a .net domain a .gov domain etc. A second level domain may be the domain that immediately precedes the top level domain. For example for the internet address second level.com the term second level may represent a second level domain. In some embodiments the first domain may be a second level domain. The first domain may also be associated with any other suitable domain domain level or domain sub level.

When the internet address is resolved to the first computing device address the security module or the browser may create a domain name record. The security module may store the domain name record step . The security module may store the domain name record in a cache or in any other suitable data storage mechanism or device. The domain name record may associate the first domain with the first computing device address. In some embodiments associating the internet address with the first computing device address may be referred to as binding the first domain to the first computing device address.

The security module may use the domain name record to bind the first domain to the first computing device address step . A domain name record may bind the computing device address to the first domain when the domain name record is used to respond to DNS queries for the first domain. In order to protect against a malicious attack the security module may prevent until a request to navigate away from the first domain is detected the first domain from being rebound to a second computing device address step .

The security module may detect that the browser is navigating away from the first domain by observing a navigate begin event or any other event or action that indicates that a user may be directing the browser page or a browser tab in tabbed browsing embodiments to another domain. As previously mentioned the first domain may refer to a second level domain and all sublevel domains within the second level domain. Thus a user may navigate within the first domain and or any sub domains without the cache that stores the domain name record ever being refreshed or updated. In some embodiments the security module may prevent DNS rebinding attacks by updating the cache only when the user navigates away from the first domain. In at least one embodiment the security module may notify a proxy when a browser leaves the first domain so that the proxy can invalidate or otherwise clear its cache and prepare for a new browsing event to a new domain. A browser may leave a first domain when the browser is directed to a new domain when the browser window is closed or when a tab in the browser is closed.

Browser helper module may include a detection module a domain name system response module a security module and a cache . Detection module may be configured to detect a resolution of an internet address to a first computing device address. In some embodiments detection module may also control whether a DNS query is sent to a DNS server or responded to with data in cache . The internet address may be associated with a first domain. Detection module may detect resolution of an internet address to a first computing device address when a user directs a browser to navigate to the first domain. After detecting the resolution of the internet address to the first computing device address browser helper module may store a domain name record in cache . The domain name record may associate the internet address with the first computing device address.

Domain name system response module may be configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain. Security module may be configured to prevent until a request to navigate away from the first domain is detected the first domain from being rebound to a second computing device address. For example security module may detect whether a browser is navigating to a new domain and prevent cache from being updated until it detects that the browser is navigating to a new domain. In various embodiments domain name system response module and security module may be the same module and or may provide similar functionality.

Providing DNS rebinding security in a browser plug in may have many advantages. For example since the plug in is loaded in and may be specific to the process e.g. the browser to be protected a system may not need to use resources for determining whether to use protection for a particular process. In other words only the process to be protected may be impacted by the plug in. In contrast if a DNS proxy is installed at the kernel level it may affect some processes that are not to be protected. Another advantage of providing a browser plug in may be that the plug in may better evaluate a security context e.g. the plug in may be able to determine what type of page is being displayed what field are being displayed etc. and may be able to react more efficiently and quickly to security issues.

Detection module like detection module may detect resolution of an internet address to a first computing device address when a user directs a browser to navigate to the first domain. After detecting the resolution of the internet address to the first computing device address a domain name record may be stored in cache . Domain name system response module may be configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain. Security module may be configured to prevent until a request to navigate away from the first domain is detected the first domain from being rebound to a second computing device address. Security module may also be configured to communicate with a browser helper object or other browser component to determine when a user is navigating away from the first domain. In other words a browser helper object may tell security module when a user leaves the first domain.

DNS Query API Application Programming Interface may be a DNS query application programming interface such as a WINDOWS API. Domain name system proxy may hook the DNS Query API and may replace the functionality of the DNS Query API in order to monitor DNS queries and resolutions of the queries into a cache. As shown the embodiment in may use a cache in the domain name system proxy cache instead of a cache implemented through the DNS Query API to store domain name records. Providing control of the cache through the domain name system proxy may allow the cache to be controlled in a manner that protects the cache against DNS rebinding attacks.

Detection module may detect resolution of an internet address to a first computing device address when a user directs a browser to navigate to the first domain. After detecting the resolution of the internet address to the first computing device address a domain name record may be stored in cache . Domain name system response module may be configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain. Security module may be configured to prevent until a request to navigate away from the first domain is detected the first domain from being rebound to a second computing device address.

Including part or all of the DNS proxy at a kernel level as shown in may provide advantages. For example providing the DNS cache outside the browser may protect the cache from potential tampering by an attacker. In some embodiments providing the security functionality of a detection module a domain name system response module a security module and a cache at the kernel level may provide the most robust protection against potential attackers. In such embodiments DNS rebinding protection may be implemented outside the browser and may therefore be more difficult for an attacker to manipulate.

The DNS security systems disclosed herein may be implemented along with other types of security. For example the browser and or underlying operating system may further strengthen the DNS resolution process via reverse lookups white lists black lists or other security protecting mechanisms. These additional security measures may prohibit access to malicious websites and provide additional security robustness for the browser.

As previously mentioned in a malicious attack the attacker may attempt to rebind the first domain to a different computing device address by causing a request to be sent to a non existing port. The browser may request access to a first port step . Server may report that the requested port does not exist step . Then the browser may attempt to refresh the cache step but the security module may provide the browser with the proxy DNS record step rather than allowing a query to be sent to an external and potentially malicious DNS server.

The security module may permit the domain name service query for the internet address to be sent to a domain name server step . The security module may detect a resolution of an internet address to a first computing device address step . Then the security module may provide the domain name record in response to a subsequent domain name server query for the first domain step . Finally the security module may prohibit until the request to navigate away from the first domain is detected modification of the domain name record step .

In some embodiments modification of the domain name record may comprise deleting the domain name record overriding the domain name record editing the domain name record or any other suitable process for modifying the domain name record. According to various embodiments detecting the request to navigate away from the first domain may comprise detecting a request to navigate to a second domain comparing the first domain with the second domain and or determining that the first domain does not comprise the second domain.

In some embodiments a request to navigate to the first domain comprises a first resource identifier e.g. an internet address and a request to navigate to the second domain comprises a second resource identifier e.g. a second internet address . A request to navigate to the first domain may be a user entering an internet address in a browser and directing the browser to the domain. In such embodiments comparing the first domain with the second domain may comprise comparing the first resource identifier with the second resource identifier.

Embodiments of the instant disclosure may provide more effective and or robust protection against DNS rebinding attacks. For example some embodiments may address one or more deficiencies of DNS pinning. Embodiments of the instant disclosure may also provide various other advantages and or features.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing device may comprise both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below .

In certain embodiments exemplary computing system may also comprise one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may comprise a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as detecting storing using preventing permitting overwriting editing determining ignoring and hooking.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network comprising additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network such as a BLUETOOTH network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also comprise at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also comprise at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also comprise a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also comprise other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments the exemplary file systems disclosed herein may be stored on primary storage device while the exemplary file system backups disclosed herein may be stored on backup storage device . Storage devices and may also be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments descried and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the detecting storing using preventing permitting overwriting editing determining ignoring and hooking steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

For example in certain embodiments the exemplary file systems disclosed herein may be stored on client systems and or . Similarly the exemplary file system backups disclosed herein may be stored on server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof.

Computing system network architecture and or the devices corresponding to computing system and network architecture may be programmed or otherwise configured to perform a method for address DNS rebinding. In various embodiments a method may include detecting a resolution of an internet address to a first computing device address and the internet address may be associated with a first domain. The method may also comprise storing a domain name record and the domain name record may associate the internet address with the first computing device address. In some embodiments the method may include using the domain name record to bind the first domain to the first computing device address and preventing until a request to leave the first domain is detected the first domain from being rebound to a second computing device address. In some embodiments preventing the first domain from being rebound to a second computing device address may comprise ignoring a time to live value that the first domain provides for the domain name record.

In various embodiments preventing the first domain from being rebound to a second computing device address may be performed by a browser plug in. In some alternative embodiments preventing the first domain from being rebound to a second computing device may be performed by a domain name system proxy installed at a kernel level.

In some embodiments the computer implemented method may further comprise detecting the request to leave e.g. navigate away from the first domain. In various exemplary embodiments detecting the request to leave the first domain may comprise detecting a request to navigate to a second domain comparing the first domain with the second domain and or determining that the first domain does not comprise the second domain. In some embodiments a request to navigate to the first domain may comprise a first resource identifier e.g. a URL or URI the request to navigate the second domain may comprise a second resource identifier e.g. a URL or URI and comparing the first domain with the second domain may comprise comparing the first resource identifier with the second resource identifier.

In various embodiments the computer implemented method may further comprise receiving a request to access a non existing port at the first domain and preventing the domain name record from being modified in response to the request to access the non existing port. The method may also further comprise hooking a domain name system query application programming interface.

In certain embodiments using the domain name record to bind the first domain to the first computing device address may comprise providing the domain name record in response to a subsequent domain name service query for the first domain. In some embodiments preventing the first domain from being rebound may comprise prohibiting until the request to navigate away from the first domain is detected modification of the domain name record. In various embodiments modification of the domain name record may comprise deleting the domain name record overwriting the domain name record and or editing the domain name record.

In various embodiments the computer implemented method may include detecting a request to navigate to the first domain. The request may comprise the internet address. In certain embodiments the method may include permitting a domain name service query for the internet address to be sent to a domain name service server.

In at least one embodiment a system may comprise a browser plug in for a network browser. The browser plug in may comprise a detection module configured to detect a resolution of an internet address to a first computing device address. The internet address may be associated with a first domain. The system may also comprise a domain name record cache configured to store a domain name record and the domain name record may associate the internet address with the first computing device address. The system may comprise a domain name system response module configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain and a security module configured to prevent until the browser navigates away from the first domain the first domain from being rebound to a second computing device address. In at least one embodiment the system may further comprise a reporting module configured to report an attempt to rebind the first domain to the second computing device address.

In some embodiments the browser plug in may comprise a browser helper object and in various embodiments the security module may be configured to clear the cache after the browser navigates away from or otherwise leaves the first domain. In some embodiments a system may comprise a domain name system proxy. The domain name system proxy may comprise a detection module configured to detect a resolution of an internet address to a first computing device address and the internet address may be associated with a first domain. The domain name system proxy may also comprise a domain name record cache configured to store a domain name record and the domain name record may associate the internet address with the first computing device address.

The system may also comprise a domain name system response module configured to use the domain name record to bind the first domain to the first computing device address by providing the domain name record in response to a domain name service query for the first domain and a security module configured to prevent until a request to leave the first domain is detected the first domain from being rebound to a second computing device address.

In various embodiments the domain name system proxy may comprise the domain name system response module and the security module. In some embodiments a browser plug in may comprise the domain name system response module and the security module. In at least one embodiment the browser plug in may be configured to communicate with the domain name system proxy.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

