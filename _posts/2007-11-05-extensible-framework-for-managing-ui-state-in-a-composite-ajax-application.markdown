---

title: Extensible framework for managing UI state in a composite AJAX application
abstract: A method, system and computer-usable medium are disclosed for managing the user interface (UI) state of an AJAX application by automatically binding a uniform resource locator (URL) to an application code component. The metadata for controller functions contained in an AJAX Web page are read as it is loaded. Once loaded, the URL of the page is monitored for changes in its value. If the URL's value changes, then the value of the ‘action’ property of the changed URL is compared to the application metadata for validation. If the ‘action’ property of the changed URL does not exist in the application metadata, then the changed URL is considered invalid and its associated actions are ignored. If the ‘action’ property is valid, the function specified by the ‘action’ request parameter is called. A single object parameter is sent, with the properties of the single object parameter derived from the request parameters other than ‘action’. The function is executed and the page is updated to display the value of the object property.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250585&OS=08250585&RS=08250585
owner: International Business Machines Corporation
number: 08250585
owner_city: Armonk
owner_country: US
publication_date: 20071105
---
Embodiments of the disclosure relate in general to the field of computers and similar technologies and in particular to software utilized in this field. Still more particularly the present invention relates to an improved method and system for managing the user interface UI state in an Asynchronous Javascript And eXtensible Markup Language AJAX application.

Composite applications consist of functionality drawn from multiple sources often delivered within a service oriented architecture SOA . The components that make up a composite application may be individual Web services selected functions from within other applications or entire systems whose outputs have been packaged as Web services. These components typically contributed from multiple independent sources are executable within the same runtime context. However conventional methods of implementing composite Web applications e.g. IBM s WebSphere Portal Eclipse and Microsoft s .NET do not address the relatively new domain of rich Web applications such as those developed with Asynchronous Javascript And eXtensible Markup Language AJAX . Composite applications created with AJAX are incrementally updated by dynamically exchanging small amounts of data between their Web pages and their contributing Web servers. As a result Web pages do not have to be reloaded in their entirety when they are updated and composite applications feel more responsive and interactive.

The Java programming language is an object oriented programming language which utilizes high level syntax derived from C and C but includes a simpler object model with fewer low level facilities. Java is a trademark of Sun Microsystems . Java programs are typically compiled into bytecode which can either be interpreted at run time or compiled into native machine code for execution. Java programs utilize configurable security features to enable selective restriction of network and or file access operations. AJAX utilizes a client side script language such as Javascript along with eXtensible Markup Language XML to enable the creation of the initial conditions for the evolution of dynamic intuitive complex and data centric user interfaces in Web pages. Accordingly AJAX increases the speed interactivity and ease of use of Web pages.

However this same flexibility can also create issues in composite Web applications as the AJAX framework that displays contributed user interface UI functionality does not know which code it may have to invoke until run time. Since AJAX applications run within the context of a single HTML page common Web browser functions such as the back forward history and bookmarking buttons may fail. A known approach to this issue is to denote page state by adding information after the URL hash . If the value after the hash changes then the Web page is not refreshed. Currently no solution exists to automatically bind an AJAX uniform resource locator URL to application code in an extensible composite application. As a result both intra and inter component dependencies are tightly coupled which results in additional effort to maintain and validate related application code.

The present invention includes but is not limited to a method system and computer usable medium for managing the user interface UI state of an Asynchronous Javascript And eXtensible Markup Language AJAX application by automatically binding a uniform resource locator URL to an application code component. In various embodiments an AJAX Web page is accessed with a browser and the application metadata for all controller functions contained in the page are read as it is loaded. In one embodiment each controller function comprises a unique ID which is typically expressed as a string following a reverse domain name service DNS naming convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function also comprises a named Javascript function appended to an object hierarchy matching the reverse DNS convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function likewise comprises a human readable description that is displayed in the browser s title bar when the action is invoked.

Once the AJAX Web page is loaded it is displayed in the browser and its URL is monitored in background to detect changes in its value. If the value of the URL changes then the value of the action property of the changed URL is compared to the application metadata contained in the AJAX Web page to validate its validity. If the action property of the changed URL does not exist in the application metadata then the changed URL is considered invalid and its associated actions are ignored. However if the action property of the changed URL is valid then the Javascript function specified by the action request parameter is called. As a result of the function call a single object parameter is sent with the properties of the single object parameter derived from the request parameters other than action . The called Javascript function is executed and the AJAX page is updated to display the value of the Javascript object property.

In another embodiment the AJAX Web page comprises Jazz Web UI components which are stored in an extension registry. The Jazz Web UI components are operable to extend an extension point which are exposed as a Uniform Resource Identifier URI . Cached strings of Javascript code are generated from the Jazz Web UI components and are then executed to register available Jazz Web UI components in an AJAX framework. A subset of the extension registry is serialized with the subset comprising server side extension points declared within the available Jazz Web UI components registered in the AJAX framework. The serialized subset of the extension registry is then parsed such that it can be accessed through a Javascript Application Programming Interface API to determine if the ID of the action property of a changed URL exists in the extension registry. The above as well as additional purposes features and advantages of the present invention will become apparent in the following detailed written description.

A method system and computer usable medium are disclosed for managing the user interface UI state of an Asynchronous Javascript And eXtensible Markup Language AJAX application by automatically binding a uniform resource locator URL to an application code component. As will be appreciated by one skilled in the art the present invention may be embodied as a method system or computer program product. Accordingly embodiments of the invention may be implemented entirely in hardware entirely in software including firmware resident software micro code etc. or in an embodiment combining software and hardware. These various embodiments may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therein either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable radio frequency RF etc.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Embodiments of the invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Client computer is able to communicate with a service provider server via a network using a network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as an Ethernet Network or a Virtual Private Network VPN . Using network client computer is able to use the present invention to access service provider server .

A hard drive interface is also coupled to system bus . Hard drive interface interfaces with a hard drive . In a preferred embodiment hard drive populates a system memory which is also coupled to system bus . Data that populates system memory includes the client computer s operating system OS and software programs and an extension registry . Extension registry includes multiple extension points through where n is an integer. In another embodiment extension registry may instead be located in service provider server .

OS includes a shell for providing transparent user access to resources such as software programs . Generally shell is a program that provides an interpreter and an interface between the user and the operating system. More specifically shell executes commands that are entered into a command line user interface or from a file. Thus shell as it is called in UNIX also called a command processor in Windows is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. a kernel for processing. While shell generally is a text based line oriented user interface the present invention can also support other user interface modes such as graphical voice gestural etc. As depicted OS also includes kernel which includes lower levels of functionality for OS including essential services required by other parts of OS and software programs including memory management process and task management disk management and mouse and keyboard management.

Software programs may include a browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. client computer to send and receive network messages to the Internet using HyperText Transfer Protocol HTTP messaging thus enabling communication with service provider server . Software programs also include a Web component utility and an AJAX framework further comprising an AJAX uniform resource locator URL monitor . The extension registry Web component utility AJAX framework and AJAX uniform resource locator URL monitor includes code for implementing the processes described hereinbelow in . In one embodiment client computer is able to download the extension registry the Web component utility the AJAX framework and the AJAX uniform resource locator URL monitor from a service provider server .

The hardware elements depicted in client computer are not intended to be exhaustive but rather are representative to highlight components used by the present invention. For instance client computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

In one embodiment each controller function comprises a unique ID which is typically expressed as a string following a reverse domain name service DNS naming convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function also comprises a named Javascript function appended to an object hierarchy matching the reverse DNS convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function likewise comprises a human readable description that is displayed in the browser s title bar when the action is invoked. Once the AJAX Web page is loaded it is displayed in the browser in step .

Then in step the AJAX URL monitor monitors the AJAX Web page URL in background at a predetermined rate e.g. four times per second for changes in its value. A determination is then made in step whether the URL value of the AJAX Web page has changed. If it has not then monitoring of the value of the AJAX Web page URL is continued in step . However if it is determined in step that the value of the Jazz Web page URL has changed then the value of the action property of the changed URL is determined in step .

As an example a user clicks on a hyperlink within the AJAX Web UI page for the viewBug function for bug 1234. As a result the browser URL is changed from 

The value of the action property of the changed URL is then compared in step to the application metadata contained in the AJAX Web page to validate its validity. A determination is then made in step whether the ID of the action property of the changed URL is valid. To continue the prior example the comparison operations ensure that there is an action with the ID com.ibm.team.workitem.Web.actions.viewBug defined in the application metadata of the AJAX Web page. If there is not then the changed URL and its associated actions is ignored in step followed by continued monitoring of the value of the AJAX Web page URL in step . It will appreciated by those of skill in the art that checking the validity of the action property of the changed URL against the application metadata of the AJAX Web page provides a means to prevent the running of arbitrary and possibly malicious code via the AJAX framework .

However if it is determined in step that the ID of the action property of the changed URL is valid then the function specified by the action request parameter is called in step . As a result of the function call in step a single object parameter is sent in step . The properties of the single object parameter are derived from the request parameters other than action . To further continue the previous example calling the function associated with the ID of the action property results in the sending of a single Javascript object with the property id 1234 . The function executes and the framework updates the AJAX page s title bar in the browser UI substituting 1234 for the id parameter. The user now sees a meaningful description in both the browser title bar and later in the browser history.

It will be apparent to those of skill in the art that additional links representing other UI states in the AJAX Web page could be executed in the same manner. Once the single object parameter is sent in step a determination is made in step whether to continue monitoring the value of the AJAX Web page URL. If so then monitoring of the value of the AJAX Web page URL is continued in step . Otherwise AJAX URL monitoring operations are ended in step .

In step web component utility generates cached strings of Javascript code using the located Jazz Web components. A determination is then made in step by the web component utility whether a browser such as browser is accessing a Jazz UI of an AJAX Web page hereinafter Jazz Web page . If it is determined in step that the browser is not accessing a Jazz Web page then the process returns to step and is repeated. However if it is determined in step that the browser is accessing a Jazz Web page then the Web component utility uses simple script tags to access the cached Javascript in step . Web component utility then executes the Javascript in step to register available Jazz Web components with the AJAX framework . In one embodiment the AJAX framework is a Dojo Javascript Toolkit. As utilized herein a Dojo Javascript Toolkit is defined as a modular open source Javascript Toolkit also referred to as a library that is designed to enable the rapid development of Javascript AJAX based applications and Web sites.

In step the Web component utility serializes a subset of extension registry which includes extension points through that are declared in the registered Jazz Web components. In one embodiment the serialized subset of extension registry utilizes a Javascript Object Notification JSON lightweight data interchange format. Then the Web component utility parses the serialized subset in step to make extension points through available via Javascript Application Programming Interfaces APIs . In one embodiment the Javascript APIs are clones of one or more APIs within extension registry e.g. org.eclipse.core.runtime.IExtensionRegistry .

The Jazz Web page is then loaded in step and application metadata for all controller functions are read using the Javascript APIs. In one embodiment each controller function comprises a unique ID which is typically expressed as a string following a reverse domain name service DNS naming convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function also comprises a named Javascript function appended to an object hierarchy matching the reverse DNS convention e.g. com.ibm.team.workitem.Web.actions.viewbug . Each controller function likewise comprises a human readable description that is displayed in the browser s title bar when the action is invoked. Once the Jazz Web page is loaded it is displayed in the browser in step .

Then in step the AJAX URL monitor monitors the Jazz Web page URL in background at a predetermined rate e.g. four times per second for changes in its value. A determination is then made in step whether the value of the Jazz Web page has changed. If it has not then monitoring of the value of the Jazz Web page URL is continued in step . However if it is determined in step that the value of the Jazz Web page URL has changed then the value of the action property of the changed URL is determined in step .

As an example a user clicks on a hyperlink within the Jazz Web UI page for the viewBug function for bug 1234. As a result the browser URL is changed from 

The extension registry is then accessed in step and comparison operations are performed between the value of the action property of the changed URL and extension registry data. A determination is then made in step whether the ID of the action property of the changed URL is valid. To continue the prior example the comparison operations ensure that there is an action with the ID com.ibm.team.workitem.Web.actions.viewBug defined in the extension registry. If there is not then the changed URL and its associated actions is ignored in step followed by continued monitoring of the value of the Jazz Web page URL in step . It will appreciated by those of skill in the art that checking the validity of the action property of the changed URL against the extension registry data provides a means to prevent the running of arbitrary and possibly malicious code via the framework.

However if it is determined in step that the ID of the action property of the changed URL is valid then the function specified by the action request parameter is called in step . As a result of the function call in step a single object parameter is sent in step . The properties of the single object parameter are derived from the request parameters other than action . To further continue the previous example calling the function associated with the ID of the action property results in the sending of a single Javascript object with the property id 1234 . The function executes and the framework updates the AJAX page s title in the UI substituting 1234 for the id parameter. The user now sees a meaningful description in both the browser title and later in the browser history. As another example the query string action myAction param1 value1 param2 value2 would result in myAction being called with an object with structure param1 value1 param2 value2 . It will be apparent to those of skill in the art that additional links representing other UI states in the Jazz Web page could be executed in the same manner. Once the single object parameter is sent in step a determination is made in step whether to continue monitoring the value of the Jazz Web page URL. If so then monitoring of the value of the Jazz Web page URL is continued in step . Otherwise Jazz URL monitoring operations are ended in step .

It will be appreciated by those of skill in the art that the foregoing approach allows an AJAX application to behave like a normal Web page by using URLs to express UI states in an extensible controlled manager. As a result application components can contribute an infinite number of actions with their own parameter sets. It will be similarly appreciated that since the AJAX framework invokes controller actions a component s AJAX code can be loosely coupled without direct code dependencies to another AJAX component s action through the creation of simple hyperlinks. In a similar fashion it is possible for one component to reference an action of another component but not actually load the second component s code until the first time it s used i.e. when the hyperlink invoking the second component s controller action is invoked . Skilled practitioners of the art will similarly realize that the approaches described herein allow open ended extension but malicious users are prevented from invoking arbitrary functionality since valid controller actions are defined in the application metadata.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the invention of the present application in detail and by reference to preferred embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.

