---

title: Electronic vulnerability and reliability assessment
abstract: Systems for providing information on system vulnerabilities include a database populated with descriptive system information and a database structure configured as a hierarchical plurality of database pages configured to include element vulnerability information and links to related database pages. A rule processor module is configured to provide rules for cycling through the database structure to match keywords, such as keywords provided by user input, and descriptive system information from the database with element vulnerability information from the database structure. Other systems and methods are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07735142&OS=07735142&RS=07735142
owner: AT&T Intellectual Property I, L.P.
number: 07735142
owner_city: Bedminster
owner_country: US
publication_date: 20070625
---
This patent application is a divisional of U.S. patent application Ser. No. 10 611 637 now U.S. Pat No. 7 237 266 entitled Electronic Vulnerability and Reliability Assessment filed Jun. 30 2003 which is herein incorporated by reference in its entirety.

The present invention is generally related to computer systems and more particularly is related to network management and troubleshooting systems.

Electronic networks are increasingly becoming more complex. Typically these networks include a plurality of processing devices communications systems software routing elements and security intrusion protection etc. Managing and controlling components of these complex networks has become challenging due to the large number of elements included in the networks. In addition administration of an electronic network involves understanding policies for use and protection of the network elements and the characteristics of the network that are unique to each customer.

Administrators of electronic networks continue to be concerned with reliability and security of these complex networks among other concerns. Because of the large number of elements of the network it may not be readily apparent to the administrators which components or portions of the network are vulnerable to failure or unauthorized intrusion. As a result the administrators may be unable to determine what if any impact system or policy changes will have on the network. Without this knowledge administrators may unintentionally implement policies that negatively impact the reliability and or security of the network.

Thus heretofore unaddressed needs exist for a solution that addresses the aforementioned deficiencies and inadequacies.

Preferred embodiments of the present invention provide a system and method for electronic vulnerability and reliability assessment.

Briefly described in architecture one embodiment of the system among others can be implemented to include a database populated with descriptive system information and a database structure configured as a hierarchical plurality of database pages configured to include element vulnerability information and links to related database pages. A rule processor module is configured to provide rules for cycling through the database structure to match keywords provided by user input with element vulnerability information from the database structure.

Preferred embodiments of the present invention can also be viewed as providing methods for the electronic profile and policy vulnerability and reliability assessment. In this regard one embodiment of such a method among others can be broadly summarized by the following steps populating a database with element or system vulnerability information obtaining policy based descriptive information for the system and selecting database pages to access from a database structure configured as hierarchical plurality of database pages and utilizing keyword matching to obtain vulnerability information for the element or combination of elements.

Other systems methods features and advantages of the present invention will be or become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems methods features and advantages be included within this description and be within the scope of the present invention.

Disclosed herein are systems and methods for the electronic profile and policy vulnerability and reliability assessment. To facilitate description an example system that can be used to implement the electronic profile and policy vulnerability and reliability assessment is discussed with reference to the figures. Although this system is described in detail it will be appreciated that this system is provided for purposes of illustration only and that various modifications are feasible without departing from the inventive concept. After the example system has been described an example of operation of the system will be provided to explain the manner in which the system can be used to provide the electronic profile and policy vulnerability and reliability assessment.

Referring now in more detail to the drawings in which like numerals indicate corresponding parts throughout the several views is a block diagram depicting a preferred embodiment of a system for electronic profile and policy vulnerability and reliability assessment. The system includes a user processing device a provider network a computing device that depicts an illustrative example of an implementation of electronic profile and policy vulnerability including logic configured to provide for profile and policy vulnerability assessment information and a plurality of databases . In one preferred embodiment information stored in databases is organized as field records or files etc. In another preferred embodiment the databases are accessible to the computing device via a system I O interface . In yet another preferred embodiment the computing device is configured to include the databases in memory. In still another preferred embodiment the databases reside on a storage server not shown accessible by the computing device .

The provider network may be any type of communications network employing any network topology transmission medium or network protocol. For example such a network may be any public or private packet switched or other data network including the Internet circuit switched network such as a public switch telecommunications network PSTN wireless network or any other desired communications infrastructure and or combination of infrastructure. In an alternative preferred embodiment the user could interact directly with the computing device .

Generally in terms of hardware architecture as shown in the computing device includes inter alia a processor and memory . Input and or output I O devices or peripherals can be communicatively coupled to a local interface via a system I O interface or directly connected to the local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM hard drive tape CDROM etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software and or firmware in memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory can include policy vulnerability and reliability assessment logic and a suitable operating system O S . The operating system essentially controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services.

The logic is a source program executable program object code script or any other entity comprising a set of instructions to be performed. When the logic is implemented as a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S. Furthermore logic can be written as a an object oriented programming language which has classes of data and methods or b a procedure programming language which has routines subroutines and or functions for example but not limited to C C Pascal Basic Fortran Cobol Perl Java and Ada.

The I O devices may include input devices for example but not limited to a keyboard mouse scanner microphone etc. Furthermore the I O devices may also include output devices for example but not limited to a printer display etc. The I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a modulator demodulator modem for accessing another device system or network a radio frequency RF or other transceiver a telephonic interface a bridge a router etc. Finally I O may couple to the provider network that is configured to communicate with the user processing device .

When the logic is implemented in software as is shown in it should be noted that logic can be stored on any computer readable medium for use by or in connection with any computer related system or method. The logic can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a nonexhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In an alternative embodiment where the logic is implemented in hardware the logic can be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

The sequential examination engine SEE provides an interface and algorithmic intelligence between the user processing device presentation module and the databases via the database interface module . In a preferred embodiment the SEE is configured to receive user input requesting policy and or profile information for an element or combination of elements of a network or system and to access the databases to obtain a result. Preferably the SEE accesses the EDD for element descriptions of the selected network system as well as customer records and cycles through the HVD starting at a general level for each element examining each level until every possible vulnerability for that element has been examined. After all elements or combination of elements have been examined the results are accumulated and made available to the presentation module and or the user s processing device .

The presentation module summarizes and formats the accumulated vulnerability results in an appropriate manner to be informative and useful to a user. In one preferred embodiment the presentation module utilizes software engineering to accomplish the presentation of accumulated vulnerability results to the user. For example application programming interfaces can be utilized that are consistent with the user s operating system such as Unix Linux Windows etc. with specific configurations being dependent upon the user s particular implementation. In another preferred embodiment the presentation module includes functionality to eliminate repetitious information in the results stored from each cycle and cycle set for instance by searching within the accumulated vulnerability information for identical material and deleting subsequent occurrences so that the final results presented to the user do not exhibit any redundancies. Intermediate accumulated vulnerability results i.e. accumulated after the completion of each cycle set are presented to the user so that the user can monitor the process and take action if needed for example to abort and restart the process with corrected policy and or profile input. In addition the presentation module allows the user to terminate or modify the process as needed. For example when the monitored results are not satisfactory or early found vulnerabilities are so severe that the user recognized that major policy changes are required the user may choose to immediately modify the input accordingly and re start the examination with corrected policy interaction. In one preferred embodiment the process continues to completion without user input. In an alternative preferred embodiment when intermediate accumulated results are presented to the user a portion of that information accessed from the HVD as a result of the cycle just completed can include pertinent questions associated with specific keywords. The user can be prompted for additional input at the end of a cycle in which some degree of uncertainty has occurred such that the vulnerability results could be improved with additional input. This input becomes keywords for matching in the HVD during the next cycle via the action of an input parser filter module shown in . In addition the presentation module preferably provides keywords associated with any current prompting to the input parser filter module shown in so that user input responses to that prompting can be associated with the pertinent keywords such that the keywords can be provided to the rule processor module shown in . In an alternative embodiment where keywords are not actually extracted from the user but rather the user answers a specific prompt with a yes or no when the response is yes the keyword associated with that prompt is provided to the rule processor module shown in .

The database interface module provides standard functionality utilizing for instance a structured query language to enable provisioning and access of the databases EDD and HVD . In an alternative preferred embodiment an additional interface such as a provisioning interface can be provided which provides for provisioning of the databases.

In a preferred embodiment the HVD is pre provisioned with descriptive vulnerability and reliablity data such that correct results can be achieved. Preferably data in the HVD is arranged hierarchically and includes a plurality of database pages shown in having a page index data section and selector section. The HVD is preferably organized in a database structure of HVD pages as a range of information or as a continuum into a set of discrete stages that allow for repeated progression into deeper stages utilizing a sequence of questions and answers that an expert would typically utilize to progress accurately from each stage to the next.

For example a top section of the HVD structure includes information necessary to identify broad categories of security or reliability vulnerabilities based on general information regarding system and or network elements. An inquiry to a bottom section of the HVD structure results in specific vulnerability information resulting from a sequential process of delving further and further into details regarding the system network elements and provides specific advice for remedial action. Intermediate sections of the HVD structure are preferably pre provisioned with information and questions answers that allows a rule processor shown in to proceed from a top HVD page to the desired bottom page s and allows for branching to related HVD pages as needed to identify all associated helpful information.

In a preferred embodiment the EDD includes descriptive information for the elements of the customer s network or system customer records and any other pertinent customer information.

The input parser filter module receives policy profile input from a user s processing device in a plurality of formats such as data files of an acceptable format or other input either automatically provided by a policy profile management application or manually in response to prompting from the presentation module among others. In one preferred embodiment the input parser filter module utilizes standard software engineer techniques to convert the input data usable by the rule processor module . The input parser filter module preferably interacts with the user s processing device via application programming interfaces that are consistent with the user s operating system for instance Unix Linux windows etc. with the details of the interfaces being dependent upon the specific implementation including the choice of software language and design. In a preferred embodiment the implementation is selected to perform the specific conversions needed for each allowed input type. During the conversion process the input parser filter module filters out extraneous data such that only pertinent input remains. Further the input parser filter module receives keyword information from the presentation module regarding any current prompting provided to the user so that user responses to that prompting can be associated with those pertinent keywords.

The rule processor module cycles through the process shown in for each element under examination then for any combination of elements as needed gathering additional vulnerability information that is accumulated or stored in the state accumulator module until complete vulnerability results are obtained for each element and then finally for the system under examination as a whole. Preferably the rule processor module receives input from the input parser filter module . The rule processor module queries the EDD to obtain pertinent descriptive information for the system under examination including the elements of that system and how they are related or connected. Subsequently the rule processor module checks the state via the state accumulator module . A state is comprised of summary and or special information obtained from the HVD in previous cycles or obtained from the EDD for the purpose of potentially aiding or modifying subsequent keyword matching filtering in various ways as described later . For the first element of the system under examination and later for subsequent elements and element combinations the rule processor module selects the HVD indices pages to access via keyword matching between a the filtered policy profile input for the system under examination along with any special state info if any and b the information contained in the HVD page selector. After accessing the selected HVD pages the rule processor module sends the pertinent vulnerability information i.e. the data section of a HVD page from these pages to the vulnerability accumulator module retains the new selector information i.e. selector section of a HVD page updates the state in the state accumulator module as appropriate by for example adding the HVD indices of pages just accessed. In addition the rule processor module either i loops back to obtain additional input to continue accessing deeper levels of the HVD for the same element ii begins cycling for a subsequent element or element combination or iii finishes by updating the EDD system descriptive information with the element counter value e.g. indicating the breadth extent of the process just concluded and the final vulnerability findings e.g. the list of pages indices accessed to provide the final accumulated results for the examined system as a whole . In an alternative embodiment the rule processor module is configured to utilize accumulated state information from the state accumulator module to modify the matching or filtering of keywords such that a likelihood of success of a probability of matching or filtering of keywords is changed based upon probabilistic statistical conditional pre requisite item occurrence situation or rules information.

The state accumulator module stores intermediate status and result information that provides for keeping track of progress and for appropriately selecting the subsequent database accesses for each cycle of additional user input and database access result determination. The state accumulator module stores both the list of pages via indices accessed and any special state information. In an example special state information provides a mechanism for adding in or subtracting from the matching process for a specified keyword in a circumstance where matching is not all or none but rather is by degree where the matching must for example exceed a pre specified threshold in order to qualify as a match. In one preferred embodiment the state accumulator module provides a short term memory that is utilized until the set of cycles associated with the examination of one policy profile managed system which preferably includes all the sets of cycles for each element and element combinations considered is completed and the final accumulated vulnerabilities are presented to the user. At the conclusion of this superset of cycles the state is reset or alternatively the state is reset at the start of the next superset.

The vulnerability accumulator module stores intermediate results. The results of each cycle of additional user input and database access result determination are added to the vulnerability accumulator module . In one preferred embodiment at the end of the entire superset of cycles and preferably while the examination is still underway as well as at the end of each set of cycles for each element and element combination that has been completed the vulnerability accumulator module contains the resulting identified vulnerabilities for each element and element combination considered at that point. Eventually the vulnerability accumulator module contains results for the examined system as a whole and makes the results available to the user s processing device via the presentation module .

The data section includes the actual information and data accumulated and presented to the user regarding details of the identified vulnerability results. The selector section in a preferred embodiment encompasses one or more independent lines of data includes up and down links to related database pages. In a preferred embodiment the selector section includes one or more index numbers as a database link to any related pages and a matching field which contains a list of keywords associated numeric ranges etc. all of which can be used in the matching process to select subsequent pages to access. Thus in a preferred embodiment each independent line of the selector section contains one or more keywords plus one or more specific database page link indices with which these keywords are specifically associated as well as optional data such as related numeric ranges for alternate or advanced matching filtering . In an alternative embodiment the selector section includes an empty or null downward pointing indicator line if the page is a bottom page. 

In the illustrative example shown in a cycle typically begins at the top database page . In an example the database page contains mostly selector section information. The database pages at level each include selector section information however the amount of solution data in the data section is increasing. At level the database pages include less selector section information and more solution data in the data section . At level the database pages include more detailed solution data in the data section and very little information in the selector section . Level shows the bottom of the HVD structure for the illustrative example. Database page includes a null section indicating that this page is the bottom page. The bottom database page does not include downward pointing selector information and thus a cycle stops at this page unless the cycle was previously stopped.

As shown in the database pages are preferably organized in a hierarchical structure. For example a cycle or search typically begins at HVD page . The selector section of this page provides links to a number of related pages. In an example only one page for example HVD page contains relevant information. Another cycle based on keywords identified in HVD page uncovers links to the next level of HVD pages with HVD page providing relevant information. Another cycle based on keywords identified in HVD page reveals a link to HVD page . Another cycle based on keywords identified in HVD page reveals a link to HVD page . In this example HVD page is the bottom page as indicated by the null reference and thus no downward pointing selector information is available and the cycle ends.

In an alternative preferred embodiment the special state information could be arranged to be multiplicative or divisional or any other suitable mathematical process in addition to or rather than being additive or subtractive in which case the default keyword numerical value would be multiplied or divided by the special state numerical values before being applied to the threshold test. A single match can occur or multiple matches can occur at the same step cycle of the process where multiple matches represent the occurrence of multiple simultaneous conditions. The process continues on .

Referring to at the rule processor module accesses the HVD selected pages and sends the results to a vulnerability accumulator module. At the rule processor module updates the state information in the state accumulator module with HVD indices of pages just accessed. At a determination is made as to whether more cycles are needed to satisfy the customer s input request. In a preferred embodiment the determination is made by the rule processor module which decides if more cycles are needed to obtain vulnerabilities for the element currently being considered or whether the next element or combination of elements needs to be considered in turn. For a given combination the rule processor module knowing that it has not yet reached the bottom HVD page makes the determination when the cycling has occurred down to the bottom of the HVD structure in which case the selector information contains no further possible page look ups for that element or combination of elements. If more cycles are needed the cycle counter is incremented by one and the process continues at with additional data from the policy based descriptive input being utilized for each new cycle. If a new element is to be considered the cumulative cycle counter is incremented by the value of the cycle counter then the element counter is incremented while the cycle counter is reset to 1. If a new combination is to be considered the cumulative cycle counter is incremented by the value of the cycle counter then the combination counter is incremented while the cycle counter is reset to 1. Preferably the state is accumulated as the cycles continue and the process ends when no further elements or combinations must be considered or when the user provides a no further cycles notification. If no more cycles are needed at the rule processor module updates the EDD with customer information. Customer information can include but is not limited to cycle counter and or cumulative cycle counter values element counter value combination counter value system network checked status and date last checked for vulnerabilities and problem resolution data. The process ends at .

Generally a cycle begins at a top level of the HVD structure with a user responding to the start prompt presented by the presentation module at the user s processing device by clicking on a yes icon or other indication which initiates the cyclical process for the initial router element under examination. Throughout the process of cycling through the HVD structure more detailed information is accessed with each cycle gradually traversing down through lower levels of the HVD structure until that element has been completely examined. The next element e.g. another router is then examined in the same fashion. As the process proceeds certain combinations of elements are flagged and added to the state information so that these combinations of routers will be examined together. The user monitors the process via intermediate results found although the user does not need to continuously monitor the cycling process. At the completion of the process all vulnerability results for the network and the routers comprising it and necessary combinations of routers etc. are provided to the user for viewing or saving in a file.

The HVD pages shown in and any keywords listed are merely illustrative examples. In a preferred embodiment initialization begins with any state previously stored in the state accumulator module being reset i.e. erased . The user and network or system are identified allowing the EDD to be accessed to retrieve the pertinent records. User and or system records can include known configuration information for instance that some of the edge routers utilize the Border Gateway Protocol BGP routing method services installed used such as telnet for user access ftp for file transfer and that are both available level of vulnerability examination service purchased etc. This information or a subset of it is preferably stored in the state accumulator module for reference. The cycle counter and element counter are both reset to equal 1 which represents the first cycle for the first element.

In an example the element initially being examined i.e. the router is a single element. Combinations of elements such as combinations of routers or router components such as various interface cards can also be examined in later stages of the process as is determined necessary by information obtained in earlier stages from the HVD and stored in the state accumulator module . If desired during implementation these combinations can be denoted using element counter numbers greater than the total number of elements in the examined system. For example if there are 100 routers in the network and 500 additional combinations of routers and or router components that must be examined then those combinations can be identified as element counter values 101 through 601 while the routers themselves are denoted using values 1 through 100. Alternately a separate combination counter can be added to directly indicate the sequential number of the combination being considered with value initially set to 1 .

In an example HVD page is the top page of the HVD structure with a page with Index 1 and is the current page. The current page is preferably arranged to list a number of high level conditions which ultimately by deeper access into the HDV structure may lead to identified vulnerabilities. In an illustrative example one of these conditions is IP Internet Protocol Interfaces. The rule processor module matches this condition with policy information for the router under examination since the policy information indicates several IP interfaces are present and active. Preferably if any extraneous input is provided in the policy profile input for that router the input parser filter module removes the extraneous information from consideration. Associated with this matched condition is the keyword IP int present active. The rule processor module looks in the selector section of the current page and sees that IP int present active Index is present as one of the lines of selector information indicating that pages and should be accessed. The cycle counter is incremented to 2. Note that in this step there is only one current page.

HVD pages and and respectively are accessed. Data section portions of each page and are provided to the vulnerability accumulator module . The vulnerability accumulator module stores the information and provides the included prompt related information and the informative text and graphics to the user via the presentation module . The user may choose to view the intermediate results and can also respond to a prompt to stop or re start the cycling process. Pages and and become the current pages. Upon reviewing the current pages and the rule processor module cannot find any matches between the policy profile input for the current router on the information contained on pages and but one match occurs regarding page which indicates that the current router is an edge router. In other examples where multiple pages are reviewed the rule processor module may find pertinent information and or prompts from all or some subset of the current pages. The associated keyword is IP edge. This keyword utilized by the rule processor module is located in the selector section of page on the same line as index such that it determines that page should be accessed to obtain information about particular vulnerabilities possible with IP edge routers. Indices and are stored as state in the state accumulator module . The cycle counter is again incremented and now it equals 3 .

HVD page is accessed and its data section portion of the page is provided by the rule processor module to the vulnerability accumulator module . In a preferred embodiment the presentation module provides the intermediate results including informative text and graphics to the user s processing device for optional monitoring. The rule processor module retains the matching field of the selector section which needs to be tested for matching with the policy profile input. One potential match addresses whether or not the IP interface exposes its IP address and utilizes packet filtering to ensure security which in some embodiments is similar to the functionality of an electronic firewall. Another potential match addresses non packet filtered cases with exposed IP address or other related cases such as the filtering functionality being present but being disabled. If such information is already in the configuration records retrieved from the EDD during the first cycle and thus available in the state accumulator module then some of these tests for matching may not need to be undertaken or may be undertaken to verify rather than obtain additional information. In this example no packet filtering is active and the IP address is exposed. Therefore the second case i.e. IP address is exposed case is matched by the rule processor module . This case has the keyword IP exposed filtering none enabling the rule processor module to find on the same line in the selector section index references to pages and . Index is added to the state stored along with the previously stored information in the state accumulator module . The cycle counter is incremented to 4. 

In this illustrative example the rule processor module only had to search the selector section in one current page . Other examples may involve searching selector sections in more than one current page.

Pages and are accessed. Page contains information on potential vulnerabilities associated with a variant of IP technology called MPLS Multiprotocol Label Switching . Page contains potential matches covering cases where the customer of the network provider connected at this edge router is either trusted e.g. an affiliate or close partner of the network provider or an unrelated customer e.g. a regular customer which cannot be trusted as much as a close affiliate . In this example MPLS is used and the customer is unrelated to the provider leading to matches with the keywords IP mpls not shown from page and Customer untrusted not shown from page . The rule processor module accesses the indexes of the two pages and finds one line including Index and the other including Index . Indices and are added to the state of the state accumulator module . The cycle counter is incremented to 5. 

In this example the rule processor module searched selector sections in two current pages for keyword matches and has found matches in both. In other examples matches might be found in only one of a number of current pages. In other embodiments a match might not be found at all which would cause a default match to occur via the last line of each selector section which would be a return to higher level entry. When this occurs the rule processor module is preferably provided with an Index such that the process returns to a point where the user is informed of the problem and prompted for optional additional input that subsequently would allow the process to continue. In still other examples a return to higher level occurs repeatedly because of repeated lack of matches until the user returns to the top page which by default preferably includes an exit option which causes the system to return to a start up condition. In another preferred embodiment every page may include an exit option as the second to last entry in the selector section so that the user has an exit option at each page.

Pages and are accessed and their information is presented to the user. In an example page provides indications that MPLS is vulnerable to exploitation when IP addresses are exposed on unprotected interfaces along with further explanatory information and suggestions regarding modifications to the policy profile which could alleviate the potential vulnerability. Pages and may include information that thanks the customer for using the service and prompts the customer to determine whether they wish to quit or re start another search. In one preferred embodiment the process continues automatically until final completion. Page provides indications that non affiliated customers should not be provided with IP addresses of edge routers. Page may also include information regarding several preferred alternatives which can be incorporated into the policy profile information. In this example the user does not quit the cycling process and the cycle counter is incremented to 6. 

In one embodiment cycling continues for each subsequent element and element combination. Preferably an element counter not shown is incremented for each subsequent element. The cycle counter is reset for each new element and then incremented for each new cycle involving that element. In a preferred embodiment the potential vulnerability information is accumulated in the vulnerability accumulator module .

Preferably the EDD contains the number and type of elements e.g. routers of the particular policy profile controlled system under examination. For example the policy profile information may contain information needed to set up provision configure control and manage the system and its components.

In a preferred embodiment as the examination process is undertaken for the elements of the system i.e. the routers cases will be identified and stored in the state accumulator module for combinations of elements i.e. sets of routers and router components to be examined together in order for certain potential vulnerabilities to be uncovered which depend on or relate to interactions between the items in a particular combination. For example conditions identified in an earlier cycle may cause combinations to be selected and retained by the rule processor module for evaluation in a later cycle. By way of example any subset of routers participating together in a particular routing protocol may be divided into combinations of nearest neighbors so that their configurations can be tested to be consistent with that necessary to avoid security vulnerabilities. Another example of a combination includes routers using cryptographic authentication to identify each other s routing updates in which case the configurations would be tested in combination to ensure that the authentication set up matches properly and that no options are configured which would circumvent security.

At the completion of the cycles for elements and element combinations the cycling process terminates and the resulting vulnerabilities are presented to the user. In a preferred embodiment the system returns to a start up state in which it is ready to begin another cycle. Preferably accumulated vulnerability results are saved to the EDD for this user. In another preferred embodiment information saved to the EDD includes associated information of any sort which may be helpful for record keeping billing or future inquiries among others. In another preferred embodiment this information may include the number of levels or pages accessed the element counter value or alternately the values of the element and combination counters and the cumulative cycle count which indicates the number of elements or element combinations examined and the amount of time transpired among others.

In an alternative preferred embodiment where the user quits the system the accumulated state could be erased from the state accumulator module rather than left intact to be erased at the next initialization occurrence. If the user chose not to quit the system returns to initialization step. The user s records remain available and thus do not have to be pulled from the EDD . In this example pages and are both bottom pages in that they include no selector section information other than the return to higher level and or quit entries i.e. they contain no other lines of keywords with associated index values other than these last two default lines for return and quit . Thus pages include null selectors and cannot be utilized to delve to any deeper level of the HVD structure since no deeper level of the HVD structure exists for this example inquiry.

In an alternative preferred embodiment the information saved in the EDD is saved at the conclusion of a previous step rather than at the inquiry conclusion. Interim saving of information is useful to for example improve operating efficiency performance or reliability when a user performs multiple back to back inquiries. In addition interim saving of information is particularly helpful in the event of an unexpected malfunction or power loss.

It should be emphasized that the above described embodiments of the present invention particularly any preferred embodiments are merely possible examples of implementations merely set forth for a clear understanding of the principles of the invention. Many variations and modifications may be made to the above described embodiment s of the invention without departing substantially from the spirit and principles of the invention. All such modifications and variations are intended to be included herein within the scope of this disclosure and the present invention and protected by the following claims.

