---

title: Code completion for object relational mapping query language (OQL) queries
abstract: Techniques for developing database applications are described herein. According to one embodiment, an object-relational mapping (ORM) query language (OQL) statement is received via a first window which is entered from a user for querying an underlying database, where the OQL statement is written in a customized query language that is incompatible with the underlying database. In response, a SQL statement compatible with the underlying database is dynamically displayed in a second window, where the SQL statement is automatically translated from the OQL statement displayed in the first window. Other methods and apparatuses are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429601&OS=08429601&RS=08429601
owner: Red Hat, Inc.
number: 08429601
owner_city: Raleigh
owner_country: US
publication_date: 20071129
---
The present invention relates generally to object relational mapping in database management. More particularly this invention relates to graphical user interfaces for code completion.

Data management tasks in object oriented programming are typically implemented by manipulating objects which are typically non scalar values. Consider the example of an address book entry which represents a single person along with zero or more phone numbers and zero or more addresses. This could be modeled in an object oriented implementation by a person object with slots to hold the data that comprise the entry the person s name a list or array of phone numbers and a list of addresses. The list of phone numbers would itself contain phone number objects and so on. The address book entry is treated as a single value by the programming language it can be referenced by a single variable for instance . Various methods can be associated with the object such as a method to return the preferred phone number the home address and so on.

Many popular database products however such as SQL DBMS products can only store and manipulate scalar values such as integers and strings organized within tables. A programmer must either convert the object values into groups of simpler values for storage in the database and convert them back upon retrieval or only use simple scalar values within the program. Object relational mapping is used to implement the first approach. Object relational mapping aka O RM ORM and O R mapping is a programming technique for converting data between incompatible type systems in databases and object oriented programming languages. This creates in effect a virtual object database which can be used from within the programming language.

In the JAVA programming environment typically a user utilizes a JAVA editor to edit JAVA query strings. For certain non JAVA programming languages a specialized editor is used. However there has been a lack of integration user interfaces between a standardized JAVA editor and a customized editor that provides a user instant presentation of object relational mapping ORM .

In the following description numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to one embodiment the ORM may be developed using ORM query language OQL development tools . The OQL development tools include a variety of features that support both standard SQL programming languages such as JAVA and customized SQL programming language including other OQL such as Hibernate query language HQL . The OQL development tools further provide an integrated graphical user interface GUI to enable interactive communications between the standardized SQL programming environment and the customized SQL programming environment. The OQL development tools further provide instant code completion and error checking for editing SQL strings to enable a user to easily generate query strings. OQL development tools will be described in details further below. Note that some or all of the components as shown in may be implemented in software hardware or a combination of both. Other configurations may also exist.

Framework includes a variety of components. For example session factory is configured to provide a thread safe immutable cache of compiled mappings for a single database. Session factory is a factory for session and a client of connection provider and it may hold an optional e.g. second level cache of data that is reusable between transactions at a process or cluster level. Session is a single threaded short lived object representing a conversation between the application and the persistent store . Session wraps a JDBC connection and is a factory for transaction . Session holds a mandatory first level cache of persistent objects which are used when navigating an object graph or looking up objects based on an identifier.

Persistent objects are short lived single threaded objects containing persistent state and business function. Persistent objects may be for example ordinary JAVABeans POJOs plain old JAVA objects . Persistent objects may be associated with a session e.g. session . As soon as the associated session is closed the persistent objects may be detached and free to use in any application layer e.g. directly as data transfer objects to and from presentation . Transaction is a single threaded short lived object used by the application to specify atomic units of work. Transaction abstract applications from underlying JDBC JAVA database connectivity JTA JAVA transaction API and or CORBA common object request broker architecture transactions. A session may span several transactions in some situations.

The JDBC API is the industry standard for database independent connectivity between the JAVA programming language and a wide range of databases SQL databases and other tabular data sources such as spreadsheets or flat files. The JDBC API provides a call level API for SQL based database access. The JTA specifies standard JAVA interfaces between a transaction manager and the parties involved in a distributed transaction system such as the resource manager the application server and the transactional applications. The CORBA is a standard defined by the Object Management Group OMG that enables software components written in multiple computer languages and running on multiple computers to interoperate. CORBA wraps program code into a bundle containing information about the capabilities of the code inside and how to call it. The resulting wrapped objects can then be called from other programs or CORBA objects across a network. CORBA uses an interface definition language IDL to specify the interfaces that objects will present to the world. CORBA then specifies a mapping from IDL to a specific implementation language like C or JAVA.

Referring back to connection provider is a factory for and pool of JDBC connections. Connection provider abstracts application from underlying data sources or driver managers e.g. JNDI or JAVA naming and directory interface JDBC and JTA . Transaction factory is a factory for transaction instances. Framework supports a variety of databases including for example Oracle DB2 Sybase MS SQL server MySQL etc. In one embodiment framework may be developed using SQL tools of . Note that some or all of the components as shown in may be implemented in hardware software or a combination of both hardware and software.

Configuration wizards and code generator are configured to allow a user to quickly generate common SQL configuration files and from those files a user can generate code for a series of various artifacts. Module also supports reverse engineering on an existing database schema and uses the code generator to generate POJO source files and object relational mapping files. JDT integration module is configured to integrate into JAVA code completion and build support of JAVA within the integrated development environment IDE . This gives a user code completion of certain customized SQL or OQL e.g. Hibernate inside the JAVA code. In addition the IDE would add problem markers if the queries are invalid against the console configuration associated with the project. Note that throughout this application Hibernate query language HQL which is available from hibernate.org is utilized as an example of a customized SQL programming language. However it is not so limited other SQL programming languages may also be applied. Other configurations may exist.

GUI further includes an editing window for editing query strings. Editor may be a HQL editor which may be activated by activating control or button . Alternatively editor may be a criteria editor which may be activated by activating control or button . Note that throughout this application GUI is demonstrated as an example of an IDE and certain tool bars or buttons displayed within the GUI are also shown for the illustration purposes only. Other forms of user interfaces such as pull down or pop up menus may also be utilized.

Referring to after a query string is entered in window according to one embodiment a user may execute the query string against an underlying database by activating button or control . A result of the execution may be displayed in window . For example window may be used to display query results by selecting an appropriate tab or page selector . As can be seen window may also be used to display other information dependent upon the selection of the tabs or page selectors such as tab .

In addition in one embodiment a user may further view one or more properties associated with any of the result items displayed in window . For example as shown in when a user selects or highlights a result item in window one or more properties associated with the selected result item are displayed in window . The user then may browse through the properties within window .

As described above window can be used to display a variety of information upon selecting proper tabs. Referring to according to one embodiment by selecting tab window may be used to dynamically display SQL strings that are compatible with the underlying database. In this example window is used to edit customized HQL strings which are incompatible with the underlying database being managed. SQL strings displayed in window are dynamically translated from HQL strings displayed in window as part of object relational mapping. In one embodiment while a user is entering HQL in window window is concurrently displaying the translated SQL dynamically so that the user can see the translation or mapping in real time.

Further according to another embodiment of the invention GUI also includes automatic formatting features. For example referring to when a user enters an HQL string in as a single line string an SQL string that is translated from the HQL is dynamically displayed in window as a single line string. Upon activating a control e.g. a button or a key stroke in this example a Ctrl Shift F key combination the HQL strings displayed in window and the SQL strings are automatically formatted to a certain format as shown in .

According to a further embodiment if a query string includes a parameter having a specific name such a parameter can be checked and viewed within the IDE. For example referring to in this example a query string in window includes a parameter of uname . Such a parameter can be automatically filled in a parameter window by activating a control or button as shown in . Again GUI as shown in are described for purposes of illustration only. Other formats may also be implemented.

According to one embodiment editing window may also be used to edit other customized query strings such as HQL strings. As described above the IDE includes JDT integration module e.g. JDT integration module of to integrate customized editing functionality within a JAVA editor. Referring to when a customized query string in this example an HQL string is entered in the JAVA editing window error checking is concurrently performed and any error will be displayed in certain fashion e.g. a red squiggly line within window . As a result as shown in the same HQL code completion and error checking is available inside JAVA code.

According to a further embodiment a customized query string can be quickly replicated from the JAVA editor into a corresponding editor for editing and execution purposes. For example referring to an HQL string select u from User u can be selected and replicated to an HQL editor e.g. GUI of or a criteria editor e.g. GUI as shown in by activating a predetermined control or a key stroke. In this example after selecting the string of select u from User u upon a key stroke of Ctrl 1 a list of alternative editors is displayed in a pop up window including at least criteria editor and HQL editor . A user can select one of those editors from window to enable the selected string to be replicated to the selected editor. Assuming that the user selects the HQL editor from window the selected string will be replicated to the HQL editor as shown in . Thereafter the replicated string can be executed as shown in and described above. Other configurations may also exist.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description below. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

