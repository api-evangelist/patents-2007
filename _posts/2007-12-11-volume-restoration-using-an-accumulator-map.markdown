---

title: Volume restoration using an accumulator map
abstract: In a process to restore a data volume in a first memory, a virtual point-in-time (PIT) copy of the data volume is created. Creating the virtual PIT copy includes creating first, second and third maps in memory. Each of the first, second, and third maps includes a plurality of multi-bit entries. Each of the entries of the first and second maps corresponds to a respective memory region of the first memory, while each of the entries of the third map corresponds to a respective memory region of a second memory for storing data of the virtual PIT copy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743227&OS=07743227&RS=07743227
owner: Symantec Operating Corporation
number: 07743227
owner_city: Mountain View
owner_country: US
publication_date: 20071211
---
The present patent application is a continuation of U.S. patent application Ser. No. 11 146 650 filed Jun. 7 2005 now U.S. Pat. No. 7 308 546 issued on Dec. 11 2007 entitled VOLUME RESTORATION USING AN ACCUMULATOR MAP which is a continuation of Ser. No. 10 324 811 filed Dec. 20 2002 now U.S. Pat. No. 6 910 111 issued on Jun. 21 2005 entitled VOLUME RESTORATION USING AN ACCUMULATOR MAP. These applications are incorporated by reference herein in their entirety and for all purposes.

Many businesses rely on large scale data processing systems for storing and processing business data. These large scale data processing systems include a primary data volume that stores the business critical data. Large scale data processing systems often create a backup copy of the primary data volume to safeguard against data corruption of the primary data volume. Creating a backup of the primary data volume is a procedure well known in the art. In essence the procedure includes copying data from memory that stores the primary data volume to memory that stores the backup copy until the entire data content of the primary volume is replicated.

Occasionally host computer system unwittingly executes an invalid or erroneous data transaction. Execution of an invalid or erroneous data transaction results in corruption of data in the primary data volume. When the data corruption is discovered the backup data volume can be used to restore the primary data volume to the state it occupied just before data was corrupted. Unfortunately the data processing system will not respond to data transaction requests until the primary data volume is restored. This disrupts operations of businesses using large scale data processing system. Accordingly it is imperative to restore the primary data volume as soon as possible.

In a process to restore a data volume in a first memory a virtual point in time PIT copy of the data volume is created. Creating the virtual PIT copy includes creating first second and third maps in memory. Each of the first second and third maps includes a plurality of multi bit entries. Each of the entries of the first and second maps corresponds to a respective memory region of the first memory while each of the entries of the third map corresponds to a respective memory region of a second memory for storing data of the virtual PIT copy.

Data storage systems and include memories and respectively. Each of these memories need not be contained in a separate data storage system. In an alternative embodiment several or all of memories and may be parts of a single memory unit contained with one data storage system.

Each of the data memories and may take form in one or more dynamic or static random access memories one or more arrays of magnetic or optical data storage disks or combinations thereof. These data memories should not be limited to the foregoing hardware components rather these memories may take form in any hardware software or combination of hardware and software in which data may be persistently stored and accessed. Data memories and may take form in a complex construction of several hardware components operating under the direction of software. The data memories may take form in mirrored hardware. It is further noted that the present invention may find use with many types of redundancy reliability systems. For example the present invention may be used with a redundant array of independent disks RAID . Moreover the present invention should not be limited to use and connection with the host node of the data processing system. The present invention may find use in a storage switch or in any of many distinctive appliances that can be used with a data storage system.

Data memory stores data of a primary data volume. The primary data volume is the working volume of data processing system . Data memories and store or are configured to store data of separate data volumes. Data memory stores or is configured to store data of a point in time copy of the primary data volume referred to herein as the backup volume. Memory stores or is configured to store data of a point in time copy of the primary data volume referred to herein as the incremental backup volume. Memory stores or is configured to store data of a point in time copy of the primary data volume referred to herein as the decision support volume. Memory stores or is configured to store data of a copy of the backup volume stored within memory and is referred to herein as the restore volume As will be more fully described below the restore volume can be used in restoring the primary data volume in the event of a data corruption thereof.

As will be more fully described below each of the data volumes stored within memories and can be virtual or real. For example the backup volume in memory is virtual when some data of the backup volume is found within memory rather than memory . The backup volume is real when all data of the backup volume is stored in memory . A virtual data volume can be converted to a real data volume via a background data copying process performed by host node . In the background copying process for example data of the virtual backup volume is copied from memory to memory until all data of the backup volume is stored in memory .

For purposes of explanation each block of memory stores data of the primary data volume. The nmemory blocks of memory can be allocated by host node to store data of the backup volume. The nmemory blocks of memory can be allocated by host node for storing data of the incremental backup volume. The nmemory blocks of memory can be allocated by host node for storing data of the decision support volume. Finally the nmemory blocks of memory can be allocated by host node for storing data of the restore volume. Corresponding memory blocks in data memories and can be equal in size. Thus memory block of data memory can be equal in size to memory block of data memories . Each of the memory blocks in data memory may be equal in size to each other. Alternatively the memory blocks in data memory may vary in size. With continuing reference to host node may take form in a computer system e.g. server computer system that processes requests from client computer systems not shown for some type of data transaction. Host node generates read or write data transactions that access memory in response to receiving requests from client computer systems. Host node is capable of accesses memories and via read or write data transactions.

Host node includes a data storage management system not shown that takes form in software instructions executing on one or more processors not shown within host node . The data management system includes a file system and a system for managing the distribution of data of a volume across one or more memory devices. Volume Manager provided by VERITAS Software Corporation of Mountain View Calif. is an exemplary system for managing the distribution of data of a volume across one or more memory devices. Volume and disk management products from other product software companies also provide a system for managing the distribution of volume data across memory devices. Hardware RAID adapter cards and RAID firmware built into computer systems likewise provide this function.

The data processing system shown in will be described with reference to host node sequentially creating the backup incremental backup decision support and restore volumes. The present invention should not be limited thereto. As noted each of these data volumes can be virtual or real. Each of these data volumes can be modified regardless of whether they are in the real or virtual state. The backup incremental backup and decision support volumes are initially created as a virtual point in time copy of the primary data volume as it exists at the time each of the virtual data volumes is respectfully created. Host node can create a virtual data volume according to the methods described in copending U.S. patent application Ser. No. 10 143 059 entitled Method and Apparatus for Creating a Virtual Data Copy which is incorporated herein by reference in its entirety.

When host node creates the virtual backup volume host node creates at least two valid modified VM maps such as VM maps and VM map represented in . VM map may be referred to herein as the accumulator map . Host node may also create a third VM map when the virtual backup volume is first created. Use of VM map will be more fully described below. Each of the VM maps shown within may be persistently stored in memory of host node or elsewhere. Accumulator map corresponds to memory while VM map corresponds to memory .

The accumulator map and each of VM maps and include nentries of two bits each in the embodiment shown in . Each entry of the accumulator map corresponds to a respective block n of memory in memory while each entry of VM map corresponds to a respective block n of memory . The first and second bits in each entry are designated Vand M respectively. Vin each entry depending upon its state indicates whether its corresponding memory block n contains valid data. For example when set to logical 1 Vof the accumulator map indicates that block of memory contains valid primary volume data and when set to logical 0 Vof the accumulator map indicates that block of memory contains no valid primary volume data. It is noted that when Vn is set to logical 0 its corresponding memory block n may contain data but this data is not considered valid. In similar fashion Vof VM map when set to logical 1 indicates that block of memory contains valid data of the backup volume. On the other hand Vof VM map when set to logical 0 indicates that block of memory does not contain valid data of the backup volume.

Min each entry of VM maps and depending upon its state indicates whether data within its corresponding memory block and has been modified. For example when set to logical 1 Mof the accumulator map indicates that block of memory contains data that was modified via a write data transaction at some point after creation of the virtual backup volume. When set to logical 0 Mof accumulator map indicates that block of memory does not contain modified data. Likewise Min VM map when set to logical 1 indicates that block in memory contains data that was modified via a write data transaction after creation of the backup volume. When set to logical 0 Mof VM map indicates that block of memory contains no modified data.

When the accumulator map is first created Vin each entry is initially set to logical 1 thus indicating that each block n in memory contains valid data of the primary volume. When VM maps and are first created V and Min each entry is set to logical 0. Because each entry in VM map is initially set to 0 VM map indicates that memory does not contain valid or modified data of the backup volume. Host node can change the state of one or more bits in each VM map entry using a single or separate I O operation at the memory address that stores the map entry.

Min each entry depending on its state indicates whether data within its corresponding memory block n has been modified. For example when set to logical 1 Mof accumulator map indicates that block of memory contains data that was modified via a write data transaction at some point in time since the creation of the backup volume. When set to logical 0 Mof the accumulator map indicates that block in memory contains data which has not been modified since the creation of the backup volume. Likewise Min VM map when set to logical 1 indicates that block and memory contains data that was modified via a write data transaction at some point in time since the creation of a backup data volume. When set to logical 0 Mof VM map indicates that block of memory contains no modified data.

When accumulator map is first created Vin each entry is initially set to logical 1 thus indicating that each block n in memory contains valid data of the primary volume. When VM map is first created Vand Mof each entry is set to logical 0 thus indicating that each block n of memory contains no valid or modified data of the backup volume. Host node can change the state of one or more bits in each map entry using a single or separate I O operations at the memory address that stores the map entry.

Host node may run a background copying process to transform a virtual data volume into a real data volume. In this background copying process host node for example copies data of memory to memory in a block by block or blocks by blocks fashion until the virtual backup volume is transformed into a real backup volume. However before this background copying process is started or completed host ode can modify data of the primary data volume. illustrates relevant operational aspects of modifying data of the primary data volume via a write data transaction after creation of the virtual backup volume.

The flow chart shown in implements one embodiment of what is commonly referred to as a copy on write process. The process shown in starts when host node generates a write data transaction for modifying data in block n of primary memory as shown in step . In response host node accesses VM map in step . If Vof VM map is set to logical 0 then the process proceeds to step where host node copies the data contents of block n of primary memory to block n of memory . Thereafter in step host node sets V of VM map to logical 1 in step . In response to step or in response to a determination in step that Vis set to logical 1 host node sets Mof accumulator map to logical 1 in step . Ultimately host node modifies data of block n of the primary memory in accordance with the write data transaction generated in step .

In addition to the ability to modify the data contents of the primary volume before the virtual backup volume is transformed into a real volume host node can read data from the virtual backup volume. illustrates operational aspects of reading data from the virtual backup volume. The process shown in is started in step when host node generates a read data transaction for reading data from block n of memory . Thereafter in step host node accesses VM map to determine the state of Vtherein. If Vis set to logical 1 the data sought is read from block n in memory as shown in step . Otherwise the data is read from block n in memory as shown in step .

Before the virtual backup volume is transformed into a real backup volume host node can create the incremental backup volume mentioned above. Host node creates VM maps and shown in when host node creates the virtual incremental backup volume. Moreover when the virtual incremental backup volume is created host node copies the current contents of accumulator map into VM map . Copying the contents of the accumulator map into VM map includes for each entry n logical ORing the original Vbits of accumulator map and VM map the result of which is stored into VM map as the updated Vbit of VM map and logically ORing the original M bits of accumulator map and VM map the result of which is stored as the updated M bit in VM map . After accumulator map is copied into VM map host node clears each of the Mbits in accumulator ma . shows the state of accumulator map after its contents have been copied into VM map and after its Mbits have been cleared to logical 0. By copying the contents of accumulator map into VM map VM map records the state of accumulator map at the time the virtual incremental backup volume is created. In one sense VM map is transformed into a map that relates changes of the primary data volume relative to the backup volume.

After creation of the virtual incremental backup and after the contents of the accumulator map is copied into VM map host node can implement a background copying process which transforms the incremental backup volume into a real incremental backup volume. However before this background processing starts or completes host node can modify the contents of the primary data volume. illustrates operational aspects implemented by host node for modifying data in the primary data volume.

The process shown in starts when host node generates a write data transaction for modifying data in block n of primary memory in step . Host node in response to step accesses VM map to determine the state of Vtherein. If Vis set to logical 0 data of the primary data volume must first be copied to the virtual backup volume. More particularly in step host node copies the data contents of block n of primary memory to block n of memory . Thereafter in step host node sets Vof VM map to logical 1. In response to or in response to a determination in step that Vof VM map is set to logical 1 host node accesses VM map to determine the state of Vtherein as shown in step . If Vis set to logical 0 then the host node copies the data contents of block n of primary memory to block n of memory and sets Vof VM map to logical 1 as shown in steps and . After Vis set to logical 1 or in response to a determination in step that Vof VM map is set to logical 1 host node sets Mof accumulator map to logical 1 in step . Ultimately in step host node modifies data of block n in primary memory according to the write data transaction generated in step .

As noted host node can transform the virtual implemental backup volume into a real instrumental backup volume using a background copying process. However before the virtual implemental backup volume is transformed into a real incremental backup volume host node can create a third virtual point in time copy of the primary volume referred to herein as the virtual decision support volume. Host node creates the virtual decision support volume by creating VM maps and shown in . Initially each V and Mentry in VM maps and are set to logical 0. Each entry n in VM map corresponds to a respective block n of memory . Vin VM map indicates whether its corresponding block of memory contains valid data copied from primary memory since the creation of the virtual decision support volume. Min VM map indicates whether its respective block in memory contains data which has been modified since creation of the virtual decision support volume. VM map will be more fully described below.

After creation of VM maps and host node copies the contents of the accumulator map into VM maps and . The copying process is similar to that described above. More particularly with respect to VM map for each entry n the original Vbits of accumulator map and VM map are logically ORed the result of which is stored as the updated Vbit in VM map and original Mbits in accumulator map and VM map are logically ORed the result of which is stored as the updated Mbit in VM map . Similarly host node copies contents of accumulator map into VM map by for each entry logically ORing the original Vbits in accumulator map and VM map the result of which is stored as the updated Vbit in VM map and logically ORing the original Mbits in accumulator map and VM map the result of which is stored as updated M bit in VM map .

By copying the contents of accumulator map into VM maps and VM maps and record the state of accumulator map at the time the virtual decision support volume is created. VM map is transformed into a map that relates changes of the primary data volume relative to the incremental backup volume. Once host node copies the contents of accumulator map into VM maps and host node clears each Vbit in accumulator map to logical 0. also shows the state of accumulator after host node clears each of the Mbits therein.

The virtual decision support volume can be transformed into a real decision support volume by virtue of a background copying process implemented by host node . However before the virtual decision support volume can be transformed into a real volume or before the virtual backup and incremental backup volumes can be transformed into real backup and incremental backup volumes host node can modify the data contents of the primary data volume. illustrates operational aspects of host node modifying data contents of the primary volume.

The process shown in starts when host node generates a write data transaction for modifying data in block n of primary memory in step . In steps and host node sets variable x to 0 in increments x by 1. Thereafter in step host node accesses VM map to determine the state of Vtherein. If host node determines that V is set to logical 0 in step then host node copies the data contents of block n of primary memory to block n of memory and sets Vof VM map to logical 1 as shown in steps and . In response to step or in response to a determination that V of VM map is set to logical 1 in step host node compares variable x to 3 in step . If x 3 host node modifies data of block n in primary memory according to the write data transaction generated in step and sets Mof accumulator map to logical 1 in steps and . Otherwise the process returns to step where x is incremented by 1 and steps are reexecuted. Eventually after each of memories contains valid or valid and modified copy of data in block n of primary memory host node modifies data in block n in memory according to the write data transaction of step and sets Mof VM map to a logical 1 as shown in steps and .

The virtual decision support volume can be transformed into a real decision support volume by host node implementing a background copying process. However before the virtual decision support line is transformed into a real decision support line host node can modify the contents of the virtual decision support volume. It is noted that once the contents of a virtual data volume is modified the virtual data volume is referred to as a modified virtual data volume. illustrates relevant aspects of host node modifying data of the decision support volume.

More particularly the process shown in initiates when host node generates a write data transaction for modifying data in block n of memory as shown in step . In response to step host node accesses VM map to determine the state of Vtherein. If host node determines that V is set to logical 0 in step host node copies the data contents in block n of memory to block n of memory and sets Vin VM map to logical 1 in steps and . In response to step or in response to a determination that Vin VM map is set to logical 1 host node modifies data in block n of memory in accordance with the write data transaction generated in step and sets Mof VM map to logical 1 in steps and . illustrates the VM maps shown in after implementation of one write data transaction for modifying data of the virtual data support volume. also shows the state of VM maps shown in after implementing a third write data transaction for modifying data of the primary volume. The third write data transaction is stored in log along with the first and second write data transactions described above. The third write data transaction as noted modifies data in block n of primary memory .

The primary data volume may be corrupted as a result of improper software behavior or in response to human error. Businesses seek to correct a corrupted data volume as soon as possible. A corrupted data volume can be corrected by restoring the data volume to its state just prior to data corruption thereof. U.S. patent application Ser. No. 10 254 753 entitled Method and Apparatus for Restoring a Corrupted Data Volume describes one method for restoring a primary data volume. U.S. patent application Ser. No. 10 254 753 is incorporated herein by reference in its entirety. In correcting the primary data volume host node creates a virtual restore volume. Host node creates the virtual restore volume by creating the VM map shown in . VM map like the other VM maps shown in includes n entries each having a V and Mbit. Each entry in VM map corresponds to a memory block n of memory . Each Vdepending upon its state designates whether a respective block n of memory contains valid data. M in VM map depending upon its state indicates whether data in a respective block n of memory contains data modified since creation of the virtual restore volume. Initially when the virtual restore volume is created all entries of VM map are set to logical 0.

Just after creation of the virtual restore volume the contents of the accumulator map are copied into each of the VM maps . shows the result of copying the accumulator map into VM maps . After copying accumulator map into VM maps each of the M bits in accumulator map is cleared to logical 0 by host node .

After creation of the virtual restore volume host node replays the contents of log to modify the virtual restore volume to the state of the primary volume just prior to data corruption thereof. illustrates operational aspects of replaying the contents of log . More particularly host node reads the first logged write data transaction for modifying data of block n from log as shown in step . In response host node accesses VM map to determine the state of Vtherein. If Vis equal to logical 0 the process proceeds to step where host node accesses VM map to determine the state of Vtherein. If Vis equal to logical 0 in step host node copies the data contents of block n of primary memory to block n of memories and as shown in step . Further as shown in step host node sets V VM maps and to logical 1. If in step Vof map is set to logical 1 then host node copies the data contents in block n of memory to block n of memory . Thereafter in step host node sets V of VM map to logical 1.

After steps or or after a determination that V of VM map is set to logical 1 in step host node modifies data in block n of memory in accordance with the most recently retrieved write data transaction from log and sets M of VM map to logical 1. Host node then determines in step whether the virtual restore volume has been modified in step to equal the state of the primary volume as it existed just prior to corruption thereof. This can be done by simply replaying the write data transactions stored in log in the order in which they were received up to the write data transaction that caused the data corruption. If the restored volume has not been modified to the appropriate state host node retrieves the next logged write data transaction from log in step and the process repeats itself beginning with step . Eventually the restore volume is modified to the state of the primary just prior to corruption thereof in step and the process ends. shows the state of the VM maps shown in after modifying the virtual restore volume with the contents of log up to but not including the write data transaction that caused the corruption.

After implementation of the process shown in host node creates a restore map which is also shown in . Restore map includes n 1 bit entries. Each of the entries of map is designated Rand set initially to logical 0 by host node . Thereafter for each entry n host node logically ORs Min accumulator map and VM maps and . Restore map shown in shows the restore map shown in after host node sets the state of the Rbits therein. Rindicates whether the data contents of block n of primary memory is to be overwritten with the data contents of memory . More particularly when set to logical 1 Rindicates that block n of primary memory is to be overwritten with the data contents of block n of memory . When host node overwrites data of block n in memory host node switches the state of Rfrom logical 1 to logical 0.

Before host node restores the contents of the primary volume to the contents of the modified virtual restorer volume host node can access the primary data volume and modify data in accordance with a write data transaction. However before the primary data volume can be modified accumulator map and VM maps should be updated to account for the restoration of the primary data volume. Each of VM maps is updated in accordance with the following equations updated updated original original 

Once the accumulator map is updated each entry n encodes one of four states. More particularly the state of each entry of accumulator map is encoded with the following 

As noted above host node is capable of accessing the primary data volume before the primary data volume has been restored to the contents of the modified virtual restore volume. illustrates one process for modifying data of the primary data volume. In step host node generates a data transaction for modifying data of block n of memory . In response host node accesses accumulator map and ascertains the status of entry n therein as shown in step . If entry n is equal to previous P or current C then the data contents of block n of number is copied to block n of memories as shown in step . Thereafter or in response to a determination in step that entry n of accumulator map is not set to P or C in step host node determines whether entry n of the accumulator map is set to P or invalid I . If entry n is set to P or I then host node accesses VM map to determine the state of Vtherein. If Vis equal to logical 1 in step host node copies the data contents of block n of memory to block n of memory as shown in step . Otherwise host node copies the data contents of block n of memory to block n of memory as shown in step . After step or step or in response to a determination in step the entry n of the accumulator map is not set to P or I then host node modifies data in block n of memory according to the write data transaction as shown in step . In step host node clears Rto logical 0 and finally in step host node sets Mand Vof accumulator map to logical 1.

In addition to the ability to host node to modify data of the primary volume after the update of the VM maps according to the above equations and the process shown in host node can read data of the primary data volume. illustrates operational aspects of host node reading data from the primary data volume. More particularly in step host node generates a read data transaction for reading data from block n of memory . In response host node accesses accumulator map to determine the state of entry n therein. If entry n is set to current C or modified M then data is read from block n of memory as shown in step . If in step entry n is not set to C or M the process proceeds to step where host node accesses VM map to determine the state of Vset therein. If Vis set to logical 1 host node reads data from block n of memory in accordance with the read data transaction generated in step . If however Vof VM map is set to logical 0 in step host node reads data from block n of memory in accordance with the read data transaction generated in step .

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

