---

title: Locally providing globally consistent information to communications layers
abstract: Globally consistent information is locally provided to communications layers. Globally consistent information is stored in a Network Availability Matrix, which is locally accessible by a communications layer. If an event is detected, the communications layer is automatically notified by the Network Availability Matrix, and is able to use the information in the Network Availability Matrix to quickly take action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996851&OS=07996851&RS=07996851
owner: International Business Machines Corporation
number: 07996851
owner_city: Armonk
owner_country: US
publication_date: 20071120
---
This application is a continuation of co pending U.S. patent application Ser. No. 10 159 759 filed May 31 2002 entitled LOCALLY PROVIDING GLOBALLY CONSISTENT INFORMATION TO COMMUNICATIONS LAYERS issued as U.S. Pat. No. 7 302 692 on Nov. 27 2007 the entirety of which is hereby incorporated herein by reference.

This application also contains subject matter which is related to the subject matter of the following patents each of which is assigned to the same assignee as this application. Each of the below listed patents is hereby incorporated herein by reference in its entirety 

 PROVIDING A GLOBALLY CONSISTENT DESIRED GROUP OF REACHABLE NODES Badovinatz et al. U.S. Pat. No. 6 950 846 issued Sep. 27 2005 

 BARRIER SYNCHRONIZATION METHOD WHEREIN MEMBERS DYNAMIC VOTING CONTROLS THE NUMBER OF SYNCHRONIZATION PHASES OF PROTOCOLS AND PROGRESSION TO EACH NEW PHASE Badovinatz et al. U.S. Pat. No. 5 768 538 issued Jun. 16 1998 

 COMMUNICATIONS METHOD INVOLVING GROUPS OF PROCESSORS OF A DISTRIBUTED COMPUTING ENVIRONMENT Badovinatz et al. U.S. Pat. No. 5 790 772 issued Aug. 4 1998 

 COMMUNICATIONS SYSTEM INVOLVING GROUPS OF PROCESSORS OF A DISTRIBUTED COMPUTING ENVIRONMENT Badovinatz et al. U.S. Pat. No. 5 799 146 issued Aug. 25 1998 

 METHOD FOR SERIALIZING ACTIONS OF INDEPENDENT PROCESS GROUPS Badovinatz et al. U.S. Pat. No. 5 991 821 issued Nov. 23 1999 

 PROGRAM PRODUCT TO EFFECT BARRIER SYNCHRONIZATION IN A DISTRIBUTED COMPUTING ENVIRONMENT Badovinatz et al. U.S. Pat. No. 6 016 505 issued Jan. 18 2000 and

 APPLICATION PROGRAMMING INTERFACE UNIFYING MULTIPLE MECHANISMS Badovinatz et al. U.S. Pat. No. 6 026 426 issued Feb. 15 2000.

This invention relates in general to communications environments and in particular to locally providing communications layers of a communications environment with globally consistent information.

In one example a communications environment includes a plurality of nodes interconnected by a plurality of networks. A node is connected to at least one network via one or more adapters. The use of multiple adapters enables a node to be connected to a network at multiple points such that multiple transactions can be initiated concurrently.

Communications layers within the nodes are responsible for efficiently utilizing the adapters in providing communication between the nodes. To provide high performance communication the communications layers may utilize multiple pairs of adapters between nodes simultaneously and different pairs of adapters between different communication paths.

In order to efficiently utilize the different adapters a need exists for a capability that enables information relating to the adapters to be provided to the communication layers.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a method of providing information. The method includes for instance obtaining configuration information of one or more adapters of a communications environment said configuration information describing one or more characteristics of at least one adapter of the one or more adapters providing locally to a communications layer of a node of the communications environment a globally consistent view of the configuration information wherein said providing locally ensures that each change of the configuration information is independently seen by the node and that proper sequencing of the changes is provided and storing locally at the node the globally consistent view of the configuration information.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through one or more aspects of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.

In accordance with an aspect of the present invention globally consistent information associated with for instance communications configurations is locally provided to communications layers of a communications environment. In one example the globally consistent information includes configuration information including characteristics of the configuration and or status information.

One embodiment of a communications environment incorporating and using one or more aspects of the present invention is depicted in . As one example the communications environment is a distributed computing environment including for instance a plurality of frames coupled to one another via a plurality of LAN gates . Frames and LAN gates are described in detail below.

As one example distributed computing environment includes eight frames each of which includes a plurality of processing nodes . In one instance each frame includes sixteen processing nodes a.k.a. processors . Each processing node is for instance a RISC 6000 computer running AIX a UNIX based operating system. Each processing node within a frame is coupled to the other processing nodes of the frame via for example one or more networks such as one or more internal LAN connections. Additionally each frame is coupled to the other frames via one or more LAN gates .

As examples each LAN gate includes either a RISC 6000 computer any computer network connection to the LAN or a network router. However these are only examples. It will be apparent to those skilled in the relevant art that there are other types of LAN gates and that other mechanisms can also be used to couple the frames to one another.

The distributed computing environment of is only one example. It is possible to have more or less than eight frames or more or less than sixteen nodes per frame. Further the processing nodes do not have to be RISC 6000 computers running AIX. Some or all of the processing nodes can include different types of computers and or different operating systems. Further aspects of the invention are usable with other types of communications environments. All of these variations are considered a part of the claimed invention.

In one example distributed across a plurality of the processing nodes of distributed computing environment is a Group Services subsystem used by one or more aspects of the present invention. In particular in one example a Group Services daemon is located within one or more of processing nodes . The Group Services daemons are collectively referred to as Group Services.

Group Services facilitates for instance communication and synchronization between multiple processes of a group of processes executing on one or more nodes. A process such as a provision process of the present invention as described below desirous of using the facilities of Group Services is coupled to a Group Services daemon . In particular the process is coupled to Group Services by linking at least a part of the code associated with Group Services e.g. the library code into its own code. As one example the process uses an application programming interface API to access aspects of Group Services.

Group Services is further described in U.S. Pat. No. 5 768 538 entitled Barrier Synchronization Method Wherein Members Dynamic Voting Controls The Number of Synchronization Phases Of Protocols And Progression To Each New Phase issued Jun. 16 1998 U.S. Pat. No. 6 026 426 entitled Application Programming Interface Unifying Multiple Mechanisms issued Feb. 15 2000 U.S. Pat. No. 6 016 505 entitled Program Product To Effect Barrier Synchronization In A Distributed Computing Environment issued Jan. 18 2000 U.S. Pat. No. 5 799 146 entitled Communications System Involving Groups Of Processors Of A Distributed Computing Environment issued Aug. 25 1998 U.S. Pat. No. 5 790 772 entitled Communications Method Involving Groups Of Processors Of A Distributed Computing Environment issued Aug. 4 1998 and U.S. Pat. No. 5 991 821 entitled Method For Serializing Actions Of Independent Process Group issued Nov. 23 1999 each of which is hereby incorporated herein by reference in its entirety.

In one embodiment Group Services is coupled to a heartbeat component used to indicate whether a particular component of the communications environment is active. In this example the heartbeat component is used to determine whether adapters of the one or more networks of the environment are up and running as described in further detail below.

In accordance with an aspect of the present invention Group Services is also coupled to a Network Availability Matrix NAM which includes a repository for globally consistent information as well as provides a simple and easy to use application programming interface for use by user mode applications as well as kernel mode applications as described in further detail below.

In one example the Network Availability Matrix is coupled to a communications layer of the node such as the Low Level Application Programming Interface LAPI offered by International Business Machines Corporation Armonk N.Y.

LAPI is a high performance one sided communications protocol in which there is no pairing of send and receive messages. LAPI is described in detail in for instance U.S. Pat. No. 6 070 189 entitled Signaling Communication Events In A Computer Network by Bender et al. issued May 30 2000 U.S. Pat. No. 6 038 604 entitled Method And Apparatus For Efficient Communications Using Active Messages by Bender et al. issued Mar. 14 2000 U.S. patent application entitled Mechanisms For Efficient Message Passing With Copy Avoidance In A Distributed System Using Advanced Network Devices by Blackmore et al. Ser. No. 09 619 051 filed Jul. 18 2000 and U.S. patent application entitled Efficient Protocol For Retransmit Logic In Reliable Zero Copy Message Transport by Blackmore et al. Ser. No. 09 619 054 filed Jul. 18 2000 each of which is hereby incorporated herein by reference in its entirety.

In one embodiment the communications layer includes two portions a kernel portion residing in kernel space of a node and a user portion residing within user space of node . The communications layer is coupled to NAM and NAM is coupled to Group Services .

Group Services participates in status communications with at least one communications network using e.g. IP . The communications network is coupled to at least one node of the environment by one or more physical links . Further details regarding the coupling of a node to a network is described with reference to .

As depicted in a node may be coupled to a plurality of networks e.g. SP Switch2 switch networks via one or more adapters e.g. PCI adapters . The use of multiple adapters to connect the nodes to the network at multiple points enables multiple transactions to be initiated concurrently. For high performance communication the communications layer may utilize multiple pairs of adapters between nodes simultaneously and different pairs of adapters between different communications paths. One example of communication paths between nodes is depicted in .

As shown in Node may communicate with Node using path on Network and Node may communicate with Node using path also on Network . Similarly Node may communicate with Node using path on Network and Node may communicate with Node using path on Network .

In accordance with an aspect of the present invention in order to enable high performance communication between distributed nodes the communications layer of each node or a subset of the nodes is provided information regarding the communications configuration of the nodes e.g. regarding one or more adapters of one or more networks . The view of this information is globally consistent in that a change in the information is reflected to other nodes desirous of this information. Further this globally consistent view of the information is maintained locally at the node e.g. within the kernel space of the node .

In order to locally provide this globally consistent information as one example a process referred to herein as a provision process executes on each node within the environment that is interested in obtaining the information. Each process includes the provision logic as well as software objects to be employed. The logic also uses groups created by Group Services. Further details regarding the Group Services groups and the various software objects are provided below.

The plurality of software objects used by one or more aspects of the present invention include for instance the following 

The above described objects and groups are used in accordance with an aspect of the present invention to determine and locally provide globally consistent information to communications layers of the communications environment. One embodiment of the logic associated with determining and providing such information is described with reference to . In particular depicts one embodiment of the logic while pictorially depicts an overview of the logic. As one example the logic is executed by the provision processes executing on one or more nodes of the communications environment except for those portions handled by other services such as the heartbeat component and or Group Services as indicated below.

Referring to when a node is started or a configuration is refreshed as examples each provision process or a subset thereof executes in order to locally provide globally consistent information. Upon execution on a node configuration information relating to for instance local adapters of the node is obtained e.g. collected provided have received STEP . In one example a node identifies its local adapters using standard UNIX system calls e.g. ioctl SIOCGCONF which provide a list of the local adapters for the node including the adapter name e.g. interface name and device name IP address and node number. Then for each adapter on the list device specific information is obtained using for instance ioctl IOCINFO which provides the logical id network id and adapter device type as examples.

Thereafter using Group Services group messaging facility the local adapter information is provided to the other nodes of the environment. Further this node receives information from the other nodes such that each node has the same global information STEP . Group Services group messaging facility allows fault tolerant message broadcast between the process members in a given group and thus each node can send its local adapter information to the other nodes. Group services group messaging facility ensures that each change is independently seen at each node and that proper sequencing of the changes is provided. Group messaging is described in further detail in one or more of the above referenced applications patents.

In addition to the above other configuration information such as adapter status information is obtained STEP . For example the heartbeat component of the node sends a message to each of its associated adapters and waits for a return message. If such a message is not returned from an adapter then the heartbeat component determines that the adapter is inaccessible.

Subsequently a determination is made as to whether the configuration information e.g. characteristics and or status has changed INQUIRY . If not then processing is complete. However if a configuration change has occurred then a further determination is made as to whether status has changed INQUIRY . If the status has changed then the heartbeat component notifies Group Services of the change and Group Services notifies a subscriber to the event referred to herein as RawAdaptEvtSubscriber of the status change STEP . For example the Application Programming Interface API of Group Services invokes RawAdaptEvtSubscriber SubscribeCb on the node detecting the status change. SubscribeCb sets the adapter status i.e Status to either up or down according to the adapter events.

Further the subscriber notifies its associated provider of the event STEP . In one embodiment the subscriber and provider are in the same process. For instance if the adapter event is related to Network n then the subscriber notifies GlobalAdaptMbrProvider n . In the example depicted in either GlobalAdaptMbrProvider for Network or GlobalAdaptMbrProvider for Network is notified. In particular the AdaptEvtNotifiedCb of that provider is called. In another embodiment one or more subscribers are notified of the event and one of those subscribers notifies a provider. 

When a GlobalAdaptMbrProvider object receives an AdaptEvtNotifiedCb callback it determines whether it will join its associated network group e.g. GlobalAdaptMbrProvider n leave the group or do nothing STEP . The decision is based on the following If the local adapter i.e. an adapter of the node including the provider object is newly up and the state is equal to Idle then the provider joins the group GlobalAdaptMbrGroup n and sets the state to Joined. However if a local adapter is newly down and the state is Joined then the provider leaves the group GlobalAdaptMbrGroup n and sets the state to Idle. Otherwise the provider takes no action.

If the network group a.k.a. global group changes then one or more subscriber objects referred to herein as GlobalAdaptMbrSubscriber s interested in changes to the network group are notified STEP . In one example each node of the various networks includes a subscriber to this event. Thus in the example of Nodes subscribe to this event. In another embodiment a subset of the nodes subscribe. To notify each subscriber the Group Services API calls GlobalAdaptMbrSubscriber SubscribeCb on the subscriber s node.

In addition to the above if there are changes to a global group or to the configuration information INQUIRY a global network availability information table is provided e.g. built and or updated STEP . In one example this table depicted at in includes configuration information for each of the adapters of the communications environment or a subset thereof . In one example for each adapter it includes the adapter s IP address status network number and or any other desired configuration information. This information is globally consistent since it is the same on each node. That is each node executes the provision process to provide this table in response to a change in configuration information and or a change in a global group.

Subsequent to providing the network availability information table the table is passed to the Network Availability Matrix NAM STEP and the NAM informs the communications layer of the changes STEP . In one instance this is accomplished by invoking a user registered handler function associated with the communications layer as described herein.

In one embodiment the communications layer uses the NAM API to design a registered function handler that enables the communications protocol to be informed of changes and to perform any recovery actions necessitated by a change in the system wide connection status e.g. adapters losing their connections to the network adapters resuming their connection to the network new adapters nodes being added to the network etc. . Thus the function handler enables the communications layer to be automatically notified of changes which although globally consistent are locally stored at the node.

In accordance with a further aspect of the present invention when a recovery action is to take place in response to for instance a communications failure due to e.g. failure of one of the nodes failure of a provision process on a node or blocking of a node from communicating with other nodes or another change due to e.g. an adapter resuming connection to the network an adapter being added to the network or a node being added to the network a process on one or more nodes receives an event notification and takes action as described with reference to .

Referring to initially a registration process takes place in which each node that wishes to receive event notifications has an application of that node e.g. LAPI register with NAM STEP . As examples the registration may be in the form of specifying a function that is to be called on behalf of the application or in the form of a request for a signal on which one of the application s threads waits. The registration enables the application to obtain current global status from NAM which is provided and maintained by Group Services and to be notified of events.

At some point an event such as a failure or other change is detected by for instance a heartbeat component which notifies Group Services of the event STEP . Group Services then provides notification of the event to the NAM on the nodes affected by the event e.g. nodes of the environment such that those nodes have the same view of the network condition STEP .

Thereafter the NAM on each affected node invokes the user registered handler function such that the node can handle the event STEP . In response to invocation of the function the communications layer of each node takes action STEP . For instance if the event is a failure then the communications layer checks the information stored in the NAM and selects another path assuming one is available without aborting the application. In this approach the applications can continuously communicate with each other as long as there is a path after the quick failover of the communications path. In a further example if the event is an addition of a path or a node or the resumption of a path connection then the communications layer includes this path in its path selection process.

Thus the NAM provides a basis by which protocols can i access global connection status locally by simply making an ioctl system call to a locally available drive ii be informed promptly of any change in network status without individually polling the network status to initiate failover recovery and iii learn of system wide information e.g. node numbers IP addresses number of adapters on a remote node on each network etc. without the need for individually performing communication across the network. This last property is particularly interesting for protocols such as Kernel LAPI which operate within the kernel and are used by kernel resident subsystems such as the Virtual Shared Disk Manager offered by International Business Machines Corporation for high performance storage area network related communication.

As described above the NAM includes a repository of information maintained for instance in kernel space in the form of a pseudo device driver as well as an API for storing and accessing information from the repository. The NAM utilizes an updating agent to perform the function of collecting connection state and connection characteristics information from the nodes and adapters in the system. This agent is also responsible for periodically examining changes in the status of any of this information on a system wide basis. This updating agent is Group Services as one example.

The NAM caters to a number of clients who use the information to initialize communication state and thereafter obtain updates from it by either registering a function handler or querying it for updates without performing global state gathering on their own. The clients of the NAM include for instance the Kernel Low level Application Programming Interface KLAPI user space Low level Application Programming Interface LAPI a well as others. The use of the NAM discourages these protocol layers from individually polling the network for connection status. It also prevents the timing out on message retransmissions. Further the update mechanism ensures that protocol instances on nodes see globally consistent status information i.e. they are in sync with respect to global connection status .

Although in the above embodiment it is the NAM that invokes the user registered function in response to an event being detected in other embodiments other components of the communications environment may have this responsibility.

Described in detail above is a capability for locally providing globally consistent information to communications layers. Further a capability is provided for facilitating quick selection of an alternate communications path in response to the detection of a failure on one path. In one example this selection is transparent to the applications e.g. LAPI .

The introduction of the NAM enables a simple and easy to use programming API to be used by user mode applications as well as kernel mode applications. With Group Services and NAM together detail information about the network adapters are notified to applications through uniform and seamless interfaces. Applications are able to use any possible combinations of point to point communications e.g. any asymmetric connections i.e. one node can have a differing number of adapters than another node and thus can maximize the utilization of the networks as well as increase throughput. Applications are also able to perform failure handling or recovery of each asymmetric connection which can provide greater reliability. The NAM asynchronously informs its clients of changes in connection status.

In one aspect the use of high performance communication using multiple communications switch networks with asymmetric connections is facilitated. The failover of a communication path due to a remote adapter s failure is appropriately coordinated. This coordinated failover facilitates quick and smooth recovery by the communications layer which otherwise could result in an inconsistent or unrecoverable state. Applications can react in a more efficient manner in response to being notified of adapter and or node state changes.

The present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

Although preferred embodiments have been depicted and described in detail herein it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims.

