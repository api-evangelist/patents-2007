---

title: Method and system for client-side user interface enhancement to enable application integration and portalisation
abstract: A system for integrating and interoperating multiple heterogeneous applications, the system comprising: an Integrated Development Environment (IDE) to enable human users to define the integration and interoperation points of the multiple applications; a configuration file format based on which the IDE generates specific configuration instances; and a runtime engine that understands configuration files adhering to the file format and performs the necessary integration and interoperation actions on the various constituent applications that have been referred to in the configuration file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578333&OS=08578333&RS=08578333
owner: Exilant Pte Ltd.
number: 08578333
owner_city: Singapore
owner_country: SG
publication_date: 20070627
---
The invention concerns a method and system for client side user interface enhancement to enable application integration and portalisation. This invention relates to the integration and interoperation of multiple heterogeneous applications at the client browser end and to the enablement of orchestration of data and events between the applications.

Enterprise application integration EAI deals with the methods and techniques for unifying disparate applications at the back end in order to facilitate the provision of enhanced composite applications that provide richer functionality and better abstraction that what was available before. The effort to achieve EAI is relatively large. Such initiatives also require much financial sponsorship and implementation time. This is because of the far reaching impact of modifying and re engineering legacy applications and back end systems.

The problem of application integration is compounded when heterogeneous applications require to be integrated. This is because the underlying implementation technologies of the individual applications can be very disparate thereby causing the integration process to be complex and time consuming.

Service Oriented Architectures SOA is the current methodology that the information technology IT industry believes will help in defining a systematic approach to total enterprise application integration. This is because SOA not only provides an architecture philosophy but it also covers non technical management issues concerning EAI. Governance cost analysis and project management are some of the non technical issues that are addressed in a proper SOA based enterprise system.

Over the long term SOA promises dramatic improvements such as cycle time reduction ultimate levels of reuse and proper management of back end enterprise software services. However its effects are visible mostly over a period spanning a few years. In general SOA is not a short term solution. It is also common that end users and business sponsors do not see visible benefits of adopting SOA in the short term.

Hence there is a need for a system that integrates and interoperates heterogeneous applications without requiring changes to the application code or design thereby reducing the time to market of the integrated system. The reduction in time would enable businesses to operate more efficiently. Reuse of existing applications without making changes to the code or design helps businesses in maximizing the use of their existing software assets.

According to an aspect of the present invention a method and system of integrating and interoperating multiple heterogeneous applications is provided comprising an Integrated Development Environment IDE to enable human users to define the integration and interoperation points of the multiple applications a configuration file format based on which the IDE generates specific configuration instances and a runtime engine that understands configuration files adhering to the file format and performs the necessary integration and interoperation actions on the various constituent applications that have been referred to in the configuration file.

An embodiment of the invention provides an IDE that enables users to specify the various actions on web pages or screens that need to be integrated. The IDE provides a visual interface for users to define the layout of the integrated portal identify specific pages and screens that need to be altered specify the type of alterations to be made on each of the pages specify drag and drop actions specify automatic orchestration of actions between the pages.

According to an aspect of the invention a file format is provided for representing the configuration information that is created by the IDE as a result of the user s aforesaid interaction with it. The file format specifies the minimum information that is needed by the runtime engine to accurately perform transformations on the application screens and Web pages.

According to an aspect of the invention a runtime engine is provided that reads configuration files adhering to the aforementioned configuration file format creates the integrated portal application as specified in the file and performs the specified transformations on the application screens and Web pages all in real time.

An embodiment of the invention provides a runtime engine that can activated via a URL. Once activated it resides in memory of the web browser and reads the configuration data from the specified file. It then performs all the actions and orchestrations that are specified in the configuration file.

According to an aspect of the invention a desktop agent application is provided that listens to requests from the runtime engine and performs actions on a targeted non web based application that is currently running on the computer. The desktop agent also contains a mechanism to listen to activities on the target application and sends appropriate signals back to the runtime engine.

An embodiment of the invention provides a MICROSOFT WINDOWS desktop agent that runs on a computer based on MICROSOFT WINDOWS operating system. This desktop agent receives messages from the target application by injecting a special module called a hook into the execution environment of the application. MICROSOFT WINDOWS hook is a mechanism provided by Microsoft for intercepting messages to the user interface UI of any running application that makes use of Microsoft s UI technology. The desktop agent sends messages to the target application by making calls to Microsoft s WIN32 Application Programming Interface API functions. MICROSOFT WINDOWS AND WIN32 are trade marks of Microsoft Corporation Redmond Wash. United States of America.

According to an aspect of the invention a protocol is provided that enables the runtime engine to communicate with applications via the desktop agents that execute on remote computers on a network.

An embodiment of the invention provides the ability to communicate and integrate with applications that are running on a CITRIX Presentation Server desktop. CITRIX is a trade mark of Citrix Systems Inc. Ft. Lauderdale Fla. United States of America. CITRIX enables Windows applications to execute on a central farm of servers and the graphical interfaces or graphical user interface GUI to these applications are made available to remote computers.

An embodiment of the present invention provides an enterprise Single Sign On engine that is capable of storing user credentials for example username password and other custom data automatically retrieving these values when needed propagating the data into the authentication screens or pages of the target applications and submitting the authentication request.

Further a method of operation of the runtime is provided in accordance with an embodiment of the invention. The method comprises parsing the configuration file creating the portal page using the configuration data to detect and intercept specific Web pages as they enter the browser altering the hyper text mark up language HTML contents of the pages according to the specifications in the configuration file sending the altered HTML to the browser for visual rendering.

To integrate non web applications a method of operation of the runtime is provided. The method comprises parsing the configuration file launching the non Web applications using the configuration data to navigate to appropriate screens performing orchestration actions on the screens.

According to an aspect of the invention computer program product comprises a computer usable medium for integrating and interoperating multiple heterogeneous applications the computer usable medium comprising computer readable program code configured to provide an Integrated Development Environment IDE to enable a user to define integration and interoperation points of the multiple applications provide a configuration file format based on which the IDE generates specific configuration instances and provide a runtime engine that understands configuration files adhering to the file format and performs the necessary integration and interoperation actions on the various constituent applications that have been referred to in a configuration file.

In this description the terms are to be understood and defined by the general meaning as known in the computer and information technology IT industry and in SOA applications. For example 

URL is a Uniform Resource Locator URL is a string of characters conforming to a standardized format which refers to a resource on the Internet such as a document or an image by its location.

Portal is a website that aggregates web content from multiple sources and displays the resulting conglomeration in a uniform look and feel.

Portlet is a single unit of content in a portal that can be traced to a particular source. A portal comprises of several portlets. Each portlet contains data from its originating content source.

Portalisation is the preferably automated technique of converting content from multiple sources to form part of a portal.

Desktop is a graphical user interface GUI environment that provides users with a visual area on the screen display that resembles a physical desktop. Multiple applications can be launched on this visual desktop. The desktop environment provides users the facility to perform actions such as minimizing maximizing and arrangement of the visual interfaces of the applications on the desktop. A desktop typically provides icons windows toolbars folders wallpapers and abilities like drag and drop.

Desktop session is a logical separation of a given user s current session on multi user server grade computer systems that are capable of executing multiple desktops concurrently. A desktop session is used to differentiate between each of the multiple desktops that can be activated on such multi user computer systems.

Remote desktop is a technology and mechanism provided by vendors such as Citrix in which a user can initiate a desktop session on a remote computer system.

Integration is the technique translating the data and commands of one application to that of another. In contrast with portalisation which further transforms the appearance of the unified applications to have a common look and feel visually the process of integration does not have to provide common visual appearance.

Orchestration is an arrangement of interoperation units that can be chained to form a higher level flow.

Integrated Development Environment IDE is a graphical user interface GUI application that enables software developers to perform a range of tasks using visual mechanisms.

Runtime is a part of a software application that executes in real time to perform tasks. This term is used in a relative sense. For example the software component in this invention has a runtime and an IDE. Here the IDE is considered as a tool that does not require being present all the time for the main component to work. However relative to the IDE there is a runtime present inside the IDE that makes it perform tasks.

HTML is hypertext markup language. The mechanism of encoding content of web sites in a manner that Web browsers can interpret them and display the data visually as desired.

Heterogeneous Web applications are disparate web applications that have independent existence and have in many cases been developed using a wide variety of technologies such as active server pages ASP .NET Java 2 platform enterprise edition J2EE PHP hypertext preprocessor PHP Perl etc. J2EE is a trade mark of Sun Microsystems Inc. Santa Clara Calif. United States of America.

Heterogeneous applications are disparate applications including web and non web applications that have independent existence and have been developed using a wide range of technologies.

The main components of the system are illustrated in in accordance with an embodiment of the invention. The system generally comprises an Integrated Development Environment IDE that runs on a computer terminal that is used by a developer a configuration file that is generated by the IDE as a result of interactions with the user and a runtime engine that is loaded into a web browser that displays the integrated portal. The computer terminal or workstation may comprise inter alia a memory processor and interface for interfacing with a network such as the Internet or Intranet . An input device and display is provided for a user to interface with the user workstation for inputting and displaying data.

The IDE provides a visual environment for the developer to define the layout of the integrated portal specify the constituent portlet applications specify user interface UI changes in any of the portlets and define interoperation actions among the portlets.

The specifications made by the user are converted by the IDE into a configuration file and sent to a remote location specified by the user. This location is within a web server that is reachable via a communications network from the IDE s host machine . The web server may comprise a memory processor and an interface inter alia. It will be appreciated that file location may be selected and stored on the server having any number of configurations for example a single server or multiple servers. The location shown in dashed box may be accessible and centralized to manage on the server without requiring additional hardware or software to store the configurations. Alternatively the file is stored on the IDE s host machine and is later transferred to a web server by any other means.

Any user who intends to interact with the resulting integrated portal integrated portal loads the configuration file into a web browser by targeting it to the URL of the configuration file location . The web page or web application on the web server is accessible via the network by the runtime engine of the user s web browser . It will be appreciated that the user may access the system via a computer terminal workstation the same or similar to computer terminal workstation of the developer . Of course it will be appreciated that the developer may perform the same or all of the functions as described of the user on a single workstation such as workstation and or workstation .

When loaded into the browser the file spawns an instance of a runtime engine . Further this runtime reads the remainder of the configuration data and begins to assemble the integrated portal.

The runtime engine identifies the component portlets and their URL addresses and directs the browser to load these pages .

The configuration data could specify one or more desktop applications to be part of the integrated portal. A desktop application could be based purely on Microsoft s Win32 technology or other technologies such as Citrix ICA 52 or Java Abstract Windowing Toolkit AWT Java Swing 154 or the like.

If the configuration data specifies a desktop application to be part of the integrated portal the runtime engine will communicate with a desktop agent component on the user s computer. The desktop agent will launch the appropriate desktop application on the user s computer and establish an internal conduit to relay commands from the runtime engine to the desktop application . The desktop agent can connect and communicate with multiple desktop applications concurrently.

If the configuration data specifies a desktop application that is based on Java user interface technologies such as Java Abstract Windowing Toolkit AWT or Swing the desktop agent will launch a modified version the appropriate application on the user s computer. The modification comprises of adding the Java AWT Swing Adapter into the startup sequence of the application s Java Virtual Machine JVM . The Java AWT Swing Adapter listens to commands from the desktop agent and relays commands to the target Java application .

If the configuration data specifies a desktop application that is based on a third party remote desktop technology such as CITRIX the runtime engine will communicate a special message to the desktop agent component on the user s computer. The desktop agent will launch the desktop application on the user s computer. It will then determine the location of the remote machine and the user desktop on the machine where the actual application is executing and communicate with that machine s desktop agent in order to establish an internal conduit to relay commands into the application . The effect of performing actions on the application can be visibly seen on the application through third party technologies such as CITRIX ICA Independent Computing Architecture 

In greater detail and with reference to A F and A C the runtime engine comprises of a Kernel and several component modules . Together these component modules are loaded into a browser . Currently available Internet browser software contains an execution engine which generally include a module to process asynchronous HTTP requests called XMLHttpRequest module and a module to process the HTML document called DOM API module . The desktop agent may comprise several component modules such as administration service application launcher and request broker to access and call WIN32 API layer . The Java AWT Swing Adapter is a special module that is launched along with any Java application that is integrated by an embodiment of the invention.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention when loaded into the browser the Kernel calls the Config Manager to load the portal configuration as shown in . The Config Manager relays this instruction to the Net module. The Net module loads the specified URLs via XMLHttp component of the browser. The Config Manager stores the information obtained into the Registry component .

Based on the portal configuration retrieved the Kernel instructs the Config Manager to load the layout configuration as shown in . The Config Manager calls the Net module to load the content of the configuration from the network and write to Registry .

The Kernel then instructs the Layout Manager to make the layout of the page as specified in the configuration data. The Layout Manager obtains the configuration information from the Registry component. The Layout Manager then makes multiple calls to the browser s DOM API in order to construct a page that conforms to the specified layout. Each portlet resides in a separate HTML iFrame in the main page.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention the Kernel calls the Page Fetch module to load the specified portlet pages into their respective iFrame. The Page Fetch module makes multiple calls to the DOM API component in order to load the pages.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention if the portal configuration specifies any desktop applications to be part of the portal the Kernel instructs the Communication Module to initiate the launch of the desktop application. The Communication Module sends a launch request to the Desktop Agent . The Desktop Agent uses the standard Microsoft Windows API to launch the desktop application. The Win32API returns a response to the Desktop Agent which is relayed back to the Communication Module indicating successful launch of the desktop application. The Communication Module responds back to the Kernel with an indication of successful launch of the desktop application. This process is repeated for all the desktop applications that are specified in the portal configuration.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention as web pages are loaded the web browser engine generates onload events which are handled by the Page Preprocessor component. The Page Preprocessor performs a setup of the portlets and identifies the page that has been loaded. The identification of pages is performed by matching unique strings of text on the page. These identification strings are provided in the portal configuration that has been loaded previously.

The Page Preprocessor then instructs the Config Manager to load specific configuration for the page as shown in that has been currently loaded. shows the file format of configuration that may be applied on portlets. The Config Manager uses the Net module to relay the command to the XMLHttp module to obtain the page configurations. The page configurations are loaded and sent to Page Preprocessor.

The Page Preprocessor then forwards this configuration to the Weaver component. The Weaver reads the configuration information and parses the current page and calls the Action Library component with the reference of the specific HTML tag element where the behaviour modification is to be made. The Action Library receives this information and sets up the appropriate event handling mechanisms with the help of the Event Manager to subscribe to events and publish events.

Events in the context of this document are actions that are either initiated by the user such as mouse click typing on the keyboard mouse movement drag and drop etc or initiated by the application such as loading of pages screens and appearance of visual components in the user interface of the applications.

In the context of this document configuration of events is the association of specific events with specific event handling routines.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention when a web application related event that has been previously configured occurs the Event Manager publishes the event to the Action Library . The Action Library receives the event notification and in response to event looks up the specified configuration data as shown in to obtain the sequence of actions that is to be performed in response to the event. shows the file format of configurations that may be applied on portlets. The Action Library executes these actions by making multiple calls to the DOM API module.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention when a desktop application related event that has been previously configured occurs the Event Manager publishes the event to the Action Library . The Action Library receives the event notification in response to event and looks up the specified configuration data as shown in to obtain the sequence of actions that is to be performed in response to the event. shows the file format of configurations that may be applied on portlets. The Action Library sends messages to the Desktop Agent via the Communication Module . The Desktop Agent performs the required action on the targeted desktop application by using the Win32 API Layer. The Desktop Agent relays the successful completion of the actions to the Communication Module which relays this to the Action Library.

With reference to the runtime sequence process shown in in accordance with an embodiment of the invention when a Java based desktop application related event that has been previously configured occurs the Event Manager publishes the event to the Action Library . The Action Library receives the event notification in response to event and looks up the specified configuration data as shown in to obtain the sequence of actions that is to be performed in response to the event. shows the file format of configurations that may be applied on portlets. The Action Library sends messages to the Desktop Agent via the Communication Module . The Desktop Agent performs the required action on the targeted desktop application by using the Java AWT Swing Adapter module. The Desktop Agent relays the successful completion of the actions to the Communication Module which relays this to the Action Library.

At any point during the handling of events if error conditions are reported to the Action Library appropriate configurations can be set to instruct the handler to retry the processing. This mechanism adds a reasonable level of robustness and tolerance to this invention.

The devices and subsystems of the exemplary methods and systems described with respect to the figures may communicate for example over a communication network and may include any suitable servers workstations PCs laptop computers handheld devices with visual displays and or monitors telephones cellular telephones wireless devices PDAs Internet appliances set top boxes modems other devices and the like capable of performing the processes of the disclosed exemplary embodiments. The devices and subsystems for example may communicate with each other using any suitable protocol and may be implemented using a general purpose computer system and the like. One or more interface mechanisms may be employed for example including Internet access telecommunications in any suitable form such as voice modem and the like wireless communications media and the like. Accordingly network may include for example wireless communications networks cellular communications network Public Switched Telephone Networks PSTNs Packet Data Networks PDNs the Internet intranets hybrid communications networks combinations thereof and the like.

It is to be understood that the embodiments as described with respect to the figures are for exemplary purposes as many variations of the specific hardware used to implement the disclosed exemplary embodiments are possible. For example the functionality of the devices and the subsystems of the embodiments may be implemented via one or more programmed computer system or devices. To implement such variations as well as other variations a single computer system may be programmed to perform the functions of one or more of the devices and subsystems of the exemplary systems. On the other hand two or more programmed computer systems or devices may be substituted for any one of the devices and subsystems of the exemplary systems. Accordingly principles and advantages of distributed processing such as redundancy replication and the like also may be implemented as desired for example to increase robustness and performance of the exemplary systems described with respect to the figures.

The exemplary systems described with respect to the figures may be used to store information relating to various processes described herein. This information may be stored in one or more memories such as hard disk optical disk magneto optical disk RAM and the like of the devices and sub systems of the embodiments. One or more databases of the devices and subsystems may store the information used to implement the exemplary embodiments. The databases may be organized using data structures such as records tables arrays fields graphs trees lists and the like included in one or more memories such as the memories listed above.

All or a portion of the exemplary systems described with respect to figures may be conveniently implemented using one or more general purpose computer systems microprocessors digital signal processors micro controllers and the like programmed according to the teachings of the disclosed exemplary embodiments. Appropriate software may be readily prepared by programmers of ordinary skill based on the teachings of the disclosed exemplary embodiments. In addition the exemplary systems may be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of component circuits.

It will be appreciated by persons skilled in the art that numerous variations and or modifications may be made to the invention as shown in the specific embodiments without departing from the scope or spirit of the invention as broadly described.

The present embodiments are therefore to be considered in all respects illustrative and not restrictive.

