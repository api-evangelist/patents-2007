---

title: Driver installer usable in plural environments
abstract: An executable file can be constructed that contains different driver installer code for use in different environments. A first executable file contains first program code that performs driver installation operations in a first environment, and that also checks to determine which environment the first program code is running in. If the first program code is running in the first environment, then the driver installation operations proceed using the first program code. If the first program code is running in a second environment, then second program code, which performs the driver installation operations in a second environment, is extracted from a resource in the first executable file. The second program code is copied into a second executable file. The second executable file is then invoked to perform the driver installation operations in the second environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08132187&OS=08132187&RS=08132187
owner: Microsoft Corporation
number: 08132187
owner_city: Redmond
owner_country: US
publication_date: 20070831
---
A device driver is a program that controls a device such as a hardware component of a computer or a peripheral device attached to a computer. The driver is typically installed so as to become bound with the operating system of the computer to which the device is connected. The installation is done by a driver installer which takes a driver program from a driver package and installs it for use with the operating system.

The specifics of the installation process may be based to some degree on aspects of the target installation environment. For example the driver installation process may be different for different operating systems or for different versions of an operating system e.g. the process could be different for the 32 bit and 64 bit versions of the WINDOWS operating system or for different underlying processors. Thus different driver installers may be used for different target environments so that the driver installer can take specifics of the target environment into account in the installation process.

Additionally people who install drivers may sometimes wish to determine which devices are supported in a particular driver package before performing the installation.

A driver installer can be constructed that supports two or more different target installation environments. A driver installer program is created and the program performs operations such as driver installation driver preview etc. A first unit code that implements the driver installer s operations for a first environment is stored in a first executable file. Additionally a second unit of code that implements the driver installer s operations for a second environment is stored as a resource within the first executable file.

When the driver installer runs it may determine which environment it is running in. If the driver installer is running in the first environment then it proceeds to perform operations such as driver installation driver preview etc. If the driver installer is running in the second environment then the driver installer copies the second unit of code from the resource into a second executable file and then causes the second executable file to be executed. Thus one executable file the first executable file can contain driver installer programs for two environments. Similarly driver installers for any number of environments could be stored as resources within the first executable file thereby allowing the executable file to serve any number of environments.

One operation that can be performed by a driver installer is a driver preview. The driver installer program can examine drivers contained in a driver package by trying to match the distinguishing identifiers specified by the drivers in the package with those of the devices present at the machine. If a device does not provide a distinguishing identifier that can be matched against the driver then a driver in the package can be matched to a device by comparing the driver s identifier with hardware compatibility information stored in the device.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

When a device driver is installed the driver becomes part of or bound with the operating system. A driver is normally provided in the form of a driver package. A driver installer is used to take the driver program contained in the package and install it in or for use with the operating system such that the operating system can use the driver to control a device. The nature of the installation process is such that the process may be specific to particular aspects of the target environment in which the driver is to be installed such as the hardware architecture that is present or the operating system or the version of the operating system . For example driver installation may be different for the 32 bit and 64 bit versions of the WINDOWS operating system. Environments can be constructed with cross platform compatibility so it may be possible to run for example a 32 bit program on a 64 bit processor or on a 64 bit version of an operating system or it may be possible to run a program built for one operating system on another operating system. However due to the hardware and platform specific nature of driver installation it may be the case that a driver installer designed for the specific target environment should be used even if driver installer code for a different environment can theoretically be executed in the target environment.

Different driver installers can be used to accommodate the different target installation environments. Normally the person who installs the driver selects the appropriate driver installer for an environment. However it is possible to construct a driver installer executable that works in different environments. The executable contains code to perform various operations e.g. installation of drivers preview of drivers etc. and also to check which environment the executable is running in. The executable also contains one or more resources which contain versions of the driver installer code for one or more other environments. If the executable is running in the environment for which it is intended then it performs the various operations of installation preview etc. On the other hand if the executable detects that it is running in a different environment then it obtains the version of the driver installer for that environment from one of the resources and copies the code for that version into a file. The file is then executed. Thus driver installers for several different environments can be packaged in one executable and the executable can select and execute the proper version.

Additionally the executable can provide a driver preview operation which can indicate which driver s in the package pertain to a device on the machine. The preview operation determines what device identifiers are indicated in the driver package and then canvasses the machine to determine what devices are available and their corresponding device identifier or hardware compatibility identifiers. Devices are supposed to specify a distinguishing identifier that can be matched against an identifier in the driver thereby allowing a particular device to be paired with a particular driver. However for some devices the distinguishing identifier is difficult to get or is otherwise not available so other information such as a hardware compatibility identifier can be used to determine whether a given driver probably or possibly will work with the device. Devices are compared with drivers in a package based on available identifiers and the preview operation indicates which device s the driver package contains drivers for. The result of this preview operation can be communicated to a user an administrator or another person.

Referring now to the drawings shows a driver installer that can be used to install a driver. Driver installer is a program that may be used to install drivers on a plurality of computers such as computers and . In one example computer on which driver installer may be stored is used to direct the installation of drivers on other computers. For example computers and may exist together in a network in which case driver installer may be stored on computer and computer may copy driver installer to computers and or in order to cause the installation of a driver on computers and . Network could be a local network for a corporation or other type of organization or the Internet or any other kind of network. While shows a scenario in which driver installer is located on computer and is copied to computers and driver installer may be located on any computer and or may be copied to any computer. For example driver installer could be delivered with or as part of an operating system for computers and or .

Each of computers and has particular environment and a particular set of devices and driver packages. Computer has environment one or more device s and one or more driver package s . Computer has environment one or more device s and one or more driver package s . The environment and that are present on computers and respectively may be the same as each other but may also be different from each other. For example environments and may be based on the 32 bit and 64 bit versions respectively of the x86 processor architecture. As another example environment could be based on an x86 architecture and environment could be based on a POWERPC architecture. As a further example the nature of an environment could be based on the operating system present at the computer e.g. environments and could be the 32 bit and 64 bit versions of the WINDOWS operating system respectively or one could be a WINDOWS operating system and another could be a version of Linux. The 32 bit version of the WINDOWS operating system can run on a 64 bit machine so the designated bit size of the machine s architecture and the designated bit size of the operating system are not necessarily the same thing. In greater generality there could be any number of computers having any number or variety of different environments.

Each of computers and has one or more devices. Computer has device s and computer has device s . Devices can be any type of hardware such as a video card a sound card a disk controller a monitor a pointing device etc.

Additionally each of computers and has one or more driver packages. Computer has driver package s which may contain one or more drivers such as driver and computer has driver package s which may contain one or more drivers such as driver . Driver packages contain drivers for various types of devices and these drivers can be installed from the driver packages. There is a distinction between a driver package and an installed driver. A driver typically is delivered to a computer in the form of a driver package which contains the code for the driver. Drivers in the packages may be installed for use on a particular machine. It is typical for an operating system to come with many driver packages to support many different devices and particular drivers from these packages can be selected for installation based on what devices are installed or attached to the computer. As one example a driver package may contain an information .INF file that specifies driver files registry entries device identifiers catalog files and version information that is used install the driver. In versions of the WINDOWS operating system driver packages typically come with .INF files although a driver package can take any form. In some scenarios a user can click on an icon that represents a .INF file to install a driver. However as another example scenario a driver installer program such as driver installer may be used to guide or direct the process of installing a driver.

The differences between environments and may be such that different driver installers are used in these different environments. It is possible for different driver installer executables to be used in environments and . However a single driver installer executable may be implemented that can be used on plural environments and shows an example of such a driver installer executable.

In driver installer binary has the form of an executable component. The executable component may be an executable file such as a file in Portable Executable PE format. However any type of executable component in any format may be used such as an executable object or an executable file in a different format e.g. Preferred Executable Format Universal Binary etc. .

Driver installer binary has a text section which stores executable code for use in a first environment such as environment . Additionally driver installer binary has a resource section that contains resources that may be accessed by the executable code stored in text section . One of the resources stored in resource section is executable code for use in a second environment such as environment .

Executable code implements driver installer shown in in a first environment. Thus executable code is executable on a first environment e.g. environment and when executed performs operations on that environment such as installing drivers previewing drivers and other operations. Previewing of drivers is described below. Executable code implements driver installer shown in in a second environment and when executed performs operations like those of executable code such as installing drivers previewing drivers etc.

Additionally executable code performs an operation to determine which environment it is running in e.g. environment or environment . If it is running on environment then executable code performs operations to extract executable code from resource section to copy executable code into a file to build a command line and to run executable code as the driver installer. For example suppose that environments and are the 32 bit and 64 bit versions respectively of the x86 architecture. The 64 bit version of the x86 architecture supports backward compatibility to the 32 bit version so executable code which in this example is an executable for the 32 bit version will run on either architecture. However there may be reasons to use a 64 bit version of the driver installer code i.e. executable code when using 64 bit hardware. The subject matter described herein can be used to run a version of the driver installer that is appropriate for the underlying hardware. Processes are described below to select and run the appropriate driver installer code.

Referring now to there is shown a process of using the driver installer binary that is shown in . At the driver installer binary is copied to a target computer and is received by that target computer. For example computer shown in may maintain a copy of the driver installer binary and computer may copy that binary onto a computer such as computer or computer both shown in onto which the driver installer binary is to be used. It is then determined at which environment the driver installer binary is running in. In the example of the driver installer binary that was copied at is a binary for environment . If the driver installer binary determines that it is running on a computer that has environment then the driver installer binary proceeds at to perform its various operations. One example of such an operation is to install a driver which could be performed by any mechanism such as through a driver installation Application Programming Interface API . Another example is to perform a driver preview by communicating or displaying information such as the device to which a given driver relates. Driver preview can also result in communicating or displaying an indication that there is a lack of match between a driver and a device on the machine .

If it is determined at that the driver installer binary is running in a different environment e.g. environment then code that implements the driver installer for the other environment is obtained or retrieved from a resource and is then executed at . For example with reference to the components shown in if driver installer binary which is for environment determines that it is running on environment then driver installer binary causes executable code to be obtained from resource section and then causes the executable code to be executed.

One operation that can be performed by a driver installer is to provide a driver preview. A preview can be used to determine which devices on a given machine the drivers in a package might relate to. Devices generally have distinguishing identifiers IDs . If a driver for a device specifies the same distinguishing ID as the device then it can be determined that a driver matches a particular device simply by matching the distinguishing ID in the driver with the distinguishing ID in the device. However sometimes devices and drivers cannot be matched by their distinguishing IDs so a probable or possible match between a device and a driver can be determined by comparing an available ID for the device e.g. a hardware ID a compatibility ID etc. with the device ID s from the driver package. In general the determination that there is compatibility between a driver and device can be based on crisply resolving information that is otherwise fuzzy. Thus a determination that there is a match could mean that a match is certain e.g. if an identifier in the driver is identical to an identifier in the device but could also mean that a match has been found to exist with some level of likelihood probability or possibility.

At the driver package is examined to obtain the device IDs for the drivers contained in the package. Then for a machine on which drivers are to be previewed the set of devices on the machine is stepped through to determine which driver s match those devices. To step through the devices at the current device is set to a particular device on the machine a first device and constitute a loop that determines whether the package contains a driver for the current device and then sets the current device to the next device on the machine until there are no more devices to consider.

At it is determined whether the current device has an accessible distinguishing ID. If the current device has an accessible distinguishing ID then it is determined at whether the device s distinguishing ID matches a device ID in the driver package. If the current device s distinguishing ID matches a device ID in the driver package then the driver is marked as matching the device at . If there are more devices on the machine as determined at then the current device is set to the next device at and the process returns to . If it is determined at that there is not another device on the machine then the loop terminates and the results of the driver preview process e.g. the list of devices that the package contains drivers for is communicated at . One example of such communication is that a user an administrator or other person can be provided with a list of devices on the machine that have compatible or potentially compatible drivers in the package.

If it was determined at that the current device s distinguishing ID does not match a device ID in the driver package or if it was determined at that the device does not have an accessible distinguishing ID then the process proceeds to where a determination is made as to whether the current device has one or more hardware IDs indicating compatibility with the driver s in the package. For example the device IDs in the package may not match distinguishing IDs of the devices but they may indicate compatibility with certain types of hardware and or hardware features. If such compatibility is found to exist then the process proceeds to where the driver is marked as matching the device and the process proceeds from as described above. If it is not determined at that the current device is compatible with the driver s in the package then the process proceeds to to determine whether there is another device to consider on the machine and the process proceeds from as described above.

Computer includes one or more processors and one or more data remembrance devices . Processor s are typically microprocessors such as those found in a personal desktop or laptop computer a server a handheld computer or another kind of computing device. Data remembrance device s are devices that are capable of storing data for either the short or long term. Examples of data remembrance device s include hard disks removable disks including optical and magnetic disks volatile and non volatile random access memory RAM read only memory ROM flash memory magnetic tape etc. Data remembrance device s are examples of computer readable storage media. Computer may comprise or be associated with devices and which may also be referred to as components . These devices can be any type of device such as a sound card video card disk controller etc. These devices can be within computer as in the example of devices and or can be located outside of computer and communicatively connected to computer in some manner as in the examples of devices and .

Software may be stored in the data remembrance device s and may execute on the one or more processor s . An example of such software is driver handling software which may implement some or all of the functionality described above in connection with . A personal computer in which a program is stored on hard disk loaded into RAM and executed on the computer s processor s typifies the scenario depicted in although the subject matter described herein is not limited to this example.

The subject matter described herein can be implemented as software that is stored in one or more of the data remembrance device s and that executes on one or more of the processor s . As another example the subject matter can be implemented as software having instructions to perform one or more acts of a process method etc. where the instructions are stored on one or more computer readable storage media.

In one example environment computer may be communicatively connected to one or more other devices through network . Computer which may be similar in structure to computer is an example of a device that can be connected to computer although other types of devices such as devices through as discussed above may also be so connected.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather .the specific features and acts described above are disclosed as example forms of implementing the claims.

