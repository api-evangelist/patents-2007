---

title: Framework for dynamic configuration of hardware resources
abstract: Among other things, dynamically selecting or configuring one or more hardware resources to render a particular display data includes obtaining a request for rendering display data. The request includes a specification describing a desired rendering process. Based on the specification and the display data, hardware is selected or configured. The display data is rendered using the selected or configured hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08610725&OS=08610725&RS=08610725
owner: Apple Inc.
number: 08610725
owner_city: Cupertino
owner_country: US
publication_date: 20071214
---
This application is a non provisional and claims the benefit of priority under 35 USC 119 e of U.S. Application Ser. No. 60 979 015 filed Oct. 10 2007. The disclosure of the prior application is considered part of and is incorporated by reference herein the disclosure of this application.

An application can render display data such as images graphics video etc. by expressly providing instructions to the available hardware resources in display system e.g. a computing device or system . To interface with a particular hardware resource the application can use a custom application programming interface API specifically coded for that hardware resource provided by the system for the application. Using the APIs the application can divide up the rendering processes by identifying a specific hardware resource to render a particular graphics workload display data . For example the application can specify that a 3D rendering pipeline should render graphics or image data by using a 3D rendering API e.g. Open GL API . To specify that video decoding pipeline should render movie data the application can specify using a movie playback API.

Because the available hardware resources can vary from one device to another an application may not be able to fully take advantage of the various available hardware resources. In addition when one or more of the hardware resources are changed replaced a new API may be needed to interface with the new hardware.

In one aspect an example process of managing hardware resources includes receiving a request for rendering display data that includes a specification describing the display data. Based on the specification and the display data hardware is dynamically selected or configured. The display data is rendered using the selected or configured hardware.

Implementations can optionally include one or more of the following features. The received request can includes a layer tree that describes a hierarchical organization of the display data. The display data can be rendered by compositing the display data using the configured or selected hardware. To dynamically select or configure the hardware a media type can be identified for each of the one or more media objects. In addition the hardware can be selected or configured to render each media object based on the identified media type. Dynamically selecting or configuring the hardware can include setting an operating mode of the selected or configured hardware. In addition a list of available hardware can be identified when detecting a change in the list of available hardware the list can be updated. Also rendering the display data can include independently interfacing with each of the configured or selected hardware. Further dynamically selecting or configuring the hardware can include setting one or more parameters of one or more application programming interfaces APIs .

In another aspect the example process of managing hardware resources can be implemented as a computer program product embodied on a computer readable medium operable to cause a data processing apparatus to perform operations. For example the computer program product is designed to cause the data processing apparatus to receive a request for rendering display data the request including a specification describing the display data. The computer program product is designed to cause the data processing apparatus to dynamically select or configure hardware based on the display data and the specification. Further the computer program product is designed to cause the data processing apparatus to render the display data using the selected or configured hardware.

Implementations of the computer program product can optionally include one or more of the following features. The computer program product can be designed to cause the data processing apparatus to receive the request that includes a layer tree that describes a hierarchical organization of the display data. Also the computer program product can be designed to cause the data processing apparatus to render the display data including compositing the display data using the configured or selected hardware. The computer program product can be further designed to cause the data processing apparatus to dynamically select or configure the hardware. Dynamically selecting or configuring the hardware can include identifying a media type for each of the one or more media objects and selecting or configuring the hard ware based on the identified media type. Further the computer program product can be designed to cause the data processing apparatus to configure or select the hardware by setting an operating mode of the one or more hardware resources. Also the computer program product can be designed to cause the data processing apparatus to identify a list of available hardware and when detecting a change in the list of available hardware updating the list. Also the computer program product can be designed to cause the data processing apparatus to render the display data by independently interfacing with each of the selected or configured hardware. In addition the computer program product can be designed to cause the data processing apparatus to select or configure the hardware including setting one or more parameters of one or more application programming interfaces APIs .

In another aspect a system for managing hardware resources can include one or more applications designed to generated a request for rendering display data the request including a specification describing the display data. The system also includes a decision logic separate from the one or more applications connected to the one or more applications. The decision logic is designed to receive the generated request from the one or more applications. Also the decision logic is designed to dynamically select or configure hardware based on the display data and the specification. Further the decision logic is designed to render the display data using the selected or configured hardware.

Implementations of the system can optionally include one or more of the following features. The application can be designed to generate the request that includes a layer tree that describes a hierarchical organization of the display data. The decision logic can be designed to render the display data including compositing the display data using the configured one or more hardware resources. Also the decision logic can be designed to dynamically select or configure the hardware. Dynamically selecting or configuring the hardware includes identifying a media type for each of the one or more media objects and selecting the hard ware based on the identified media type. Also the decision logic can be designed to configure or select the hardware including setting an operating mode of the hardware. The decision logic can be designed to identify a list of available hardware and when detecting a change in the list of available hardware update the list. Further the decision logic can be designed to render the display data including independently interfacing with each of the configured or selected hardware. Also the decision logic can be designed to configure or select the hardware including setting one or more parameters of one or more application programming interfaces APIs .

In another aspect an apparatus for managing hardware resources includes one or more applications designed to generated a request for rendering display data. The request includes a specification that describes the display data. The apparatus includes a decision logic separate from the one or more applications connected to the one or more applications. The decision logic is designed to receive the generated request from the one or more applications. The decision logic is designed to dynamically select or configure hardware based on the display data and the specification. Also the decision logic is designed to rendering the display data using the selected or configured hardware. Further the system includes a display unit configured to display the rendered display data.

The subject matter described in this specification potentially can provide one or more of the following advantages. Decision logic for determining a graphics processing path is provided in framework layer so that available hardware resources can be dynamically allocated and configured to render a particular display data described by one or more applications without the need for those applications to choose the rendering hardware by selecting a particular rendering API. The application developer describes the display data and then decision logic in the framework layer determines which hardware to use how to configure the selected hardware etc. Because the decision logic includes specific knowledge about the available hardware resources the decision logic can make dynamic decisions on how best to render the display data. Also the decision logic can take advantages of specific functions and operating modes of each hardware resource when making the dynamic decisions. Further the decision logic can configure the hardware resources to balance various performance tradeoffs.

The subject matter described in this specification can be implemented as a method or as a system or using computer program products tangibly embodied in information carriers such as a CD ROM a DVD ROM a semiconductor memory and a hard disk. Such computer program products may cause a data processing apparatus to conduct one or more operations described in this specification.

In addition the subject matter described in this specification can also be implemented as a system including a processor and a memory coupled to the processor. The memory may encode one or more programs that cause the processor to perform one or more of the method acts described in this specification. Further the subject matter described in this specification can be implemented using various data processing machines.

The composited display data can be rendered onto a screen based on a generated layer tree illustrated in that describes the relationships among various layers and media objects. The layer tree is a hierarchical data structure that describes hierarchical relationships among various media objects e.g. layers graphic objects etc. For example the composited display data can be represented as the root node of the layer tree . Positioned below the root node are the parent nodes that represent the video layer and the UI layer respectively. Each parent node can include various children nodes. For example the parent node that represents the video layer includes a child node that represents the talking head video data . The parent node that represents the UI layer includes various children nodes . Each of the children nodes represents a particular media object associated with the UI layer. For example the child node represents the display frame object . The child node represents the display control object . The child node represents the menu object .

In some implementations the layer framework is part of a software stack and is located between the application i.e. application layer and the physical layer which includes the available hardware resources . In particular the layer framework receives a data structure representing the received layer tree and the decision logic in the layer framework decides how best to render the display data described in the layer tree .

The available hardware resources include various hardware subsystems that can be used to composite and render the desired display data. For example hardware resources can include one or more central processing units CPUs one or more image processing conversion and transfer devices e.g. a camera one or more graphics processing units GPUs and one or more output devices e.g. a display device such as an LCD . The image conversion transfer hardware can include an image transfer hardware an image conversion hardware etc. The GPU can includes a 2D rendering hardware a 3D rendering hardware etc. The display hardware can also include a video overlay unit an RGB overlay unit etc.

The layer framework interfaces with the various hardware resources using one or more APIs. For example an image conversion transfer API can be used to interface with the image conversion transfer hardware . A 2D rendering API and a 3D rendering API can be used to interface with the 2D rendering hardware and the 3D rendering hardware of the GPU respectively. Further a display API can be used to interface with the video overlay unit and the RBG overlay unit of the display hardware .

The decision logic determines how the display data described in the layer tree will be rendered. For example the decision logic evaluates the available hardware resources and dynamically identifies a particular hardware resource in some instance more than one hardware resources to render each component e.g. each layer media object etc. of the display data described in the layer tree . In addition the decision logic can identify a particular operation mode of the identified hardware resource.

Because the decision logic of the layer framework can dynamically determine which hardware resource s to use to render a particular display data one or more of the several possible processing paths and can be selected. Each processing path and represents a communication path between the layer framework and at least one of the hardware resources . In one aspect the decision logic generates an abstract description of how various layers of renderings should be ordered and dispatches the abstract description to some underlying hardware resource. Thus the processing paths represent the choices in the underlying hardware resources that can be used to perform the rendering in the order determined by the decision logic . Depending on the needs of what s expressed in those layers the decision logic goes thorough an algorithm heuristic to select one or more of the available paths and to render each component e.g. layers media objects etc. of the display data. For example the decision logic can select to use

a 2D rendering engine 3D engine full geometric transform pipeline an overlay scaler a transfer hardware e.g. DMA engine that can be format converting etc.

Because the decision logic is located in the layer framework and separate from the application the application need not decide how to render the display data. Thus the application can simply describe the appearance of the display data e.g. how the display data should look when rendered without directly specifying how to render the display data. In addition the application need not perform any of the rendering process itself.

In addition instead of having coded instructions on how to render the display data described in the layer tree the application simply describes the appearance of the display data. For example the application need not describe that a 3D box should be rotated 30 degrees using the GPU. Instead the application simply describes that the display data is a 3D box rotated 30 degrees. From such description of the display data and not the actual rendering instructions the layer framework determines how best to render the display data. Likewise the application need not expressly provide that the movie data should be rendered using a display hardware and the UI layer should be rendered using the GPU. Instead the application simply provides that the display data includes a movie data and a UI layer . Again the layer framework determines how best to render the display data.

Because the decision logic is not located within the application the application need not actually perform the rendering processing itself. For example the application does not need to divide up the rendering work and specify by coding instructions how to render each component of the display data. Thus the application need not specify that the Open GL or some 3D rendering pipelines should be used to render the UI layer or specify using the movie playback APIs to put the video data up on the screen.

Once the specification is received from the application the layer framework determines the available hardware resources for implementing the received specification s e.g. layer tree . The determination can be performed by the decision logic located within the layer framework . The decision logic interfaces with the available hardware resources and thus has knowledge of the available resources. For example the decision logic knows that there are two CPUs with certain clock rate architecture etc. one or more GPUs one or more display units etc. Because the decision logic knows what hardware resources are available and the specifications of those hardware resources the decision logic is able to efficiently make decisions on how best to render the display data described in the specification e.g. layer tree by choosing a particular hardware resource s configured in a particular mode.

Once the layer framework determines and identifies the available hardware resources the layer framework executes the decision logic to determine how best to render the display data using the available hardware resources . The decision on how best to render the display data can be based on various tradeoff balancing considerations. For example assume that the display data includes a sequence of image frames with each frame having multiple image object layers to render. The application can use the 3D graphics hardware to copy the image frames into a frame buffer. The contents of the frame buffer can then be rendered using hardware resources specified by the application . However this involves multiple copy of memory operations and such copy operations can be resource expensive in terms of CPU or GPU usage . In addition to being resource expensive each GPU rendering operation can cost additional power consumption. In addition since the application may not have knowledge about the specifics of the available hardware resources the application may not be utilizing the hardware resources in the most efficient manner. In contrast the layer framework has specific knowledge of the available hardware resources and thus is able to make efficient and dynamic decisions on which hardware resource s to use and how to use them to render a particular display data.

Because the decision logic has knowledge of the specifics of the available hardware resources the decision logic can take advantage of the capabilities of the hardware resources. For example the resource expensive data copies can be avoided by not taking the actual bits of the display data and copying them into a separate dedicated frame buffer memory. Instead the display data can be read directly by the display hardware. For example the display hardware may be capable of scanning out multiple frame buffers and compositing them instead of scanning out a single frame buffer.

Functionally the GPUs are memory to memory type devices. For example a display controller may only read from memory and then send the read memory data directly to an external display hardware device such as an LCD unit with or without image compositing being performed along the way. The techniques and systems according to this specification enable the display hardware to read the display data directly without performing data copies by the GPU and perform the image compositing function. Thus one consideration is the cycles spent by the display hardware performing the image compositing function.

In addition because the decision logic is directly located within the layer framework the application need not send any of the display data through the GPU and thus avoid having to perform any of the compositing itself. Instead the application simply provides that the video data should be composited with the UI layer .

For example the display data may include a movie with a talking head movie content. The display data can also include a UI layer that sit on top of the movie e.g. via overlay . The UI layer can include menu object status bar etc. One way to render the display day is to use the 3D hardware resource to combine the UI layer and the movie into one buffer of memory. Then the various media objects of the UI layer can be copied into the frame buffer. The contents of the frame buffer are then composited and sent to the display hardware to be displayed. This may be the method used if the application has to perform the decision making process itself in a static manner.

Alternatively the layer tree can be broken into different portions one for video and one for UI layer for example. The portion of the tree that includes the video can be sent to a particular hardware resource that can best display the video. The portion of the layer tree that includes the UI layer e.g. the overlay objects can be composited and sent to a particular hardware that best displays the UI layer. The display hardware can composite the different portions together. This saves the resource expensive copying operations by the GPU. Also various specifications of the hardware resources can be utilized. For example different hardware may support better scaling of the video to get better zooming etc. The particular hardware that can render each portion better is determined. The decision logic located in the layer frame work performs the above decisions instead of the application .

Once the decision logic in the layer framework determines how best to render e.g. by selecting which hardware resource s to use and in what mode the display data the selected hardware resource s are configured based on the hardware constraints and specification s . For example the various parameters in the various hardware APIs can be selected and set according to the decisions of the decision logic . Based on the configured hardware resource s the display data is rendered using the specification s received from the application .

The layer framework interprets the specification s received from the application to determine the best way to get the display data onto the display hardware. For example the layer framework decides based on the properties of different nodes on the layer tree the best way to render the display data. In the process the layer framework makes decisions about all of the available hardware resources . These decision making processes are performed dynamically as the display data are received form the application .

Because the decision process the decision logic is centralized to the layer framework the application is no longer responsible for writing custom APIs for each of the hardware resources e.g. processors . Thus when a different piece of hardware resource is present the application does not need to write new custom APIs for the new hardware since that decision making process is removed from the application . In this way only the layer framework need to be updated instead of updating every application . Further the layer framework communicates to each hardware resource independently independent of each hardware resource and independent of the application . Instead of having the application use various APIs that make calls to the hardware the layer framework interfaces with the hardware resources. So the application simply passes the specifications e.g. layer tree to the layer framework and the layer framework interprets the layer tree on how best to render the display data.

The generated display output e.g. compositing a video data with a UI layer is displayed on output hardware e.g. a display such as an LCD screen . Further the generated output can be provided to the application .

The layer framework can be hard coded into the device . Alternatively the layer framework can be loaded into the device as a software addition upgrade. In both instances the layer framework can be updated when any of the available hardware resources are removed or when any new hardware resources are added.

The one or more applications executing on the device can include various applications that involves rendering various display data. For example the application can include a multimedia player a media editor a video game a video conference application etc. The multimedia player includes applications that enable playback of video and or audio data. Examples of multimedia players can include Quicktime player Apple Inc. of Cupertino Calif. and Windows Media Player Microsoft Corporation of Redmond Wash. . Examples of media editors can include iLife Apple Inc. of Cupertino Calif. and Adobe Photoshop Adobe Systems Inc. of San Jose Calif. .

As described in this specification the layer framework removes the decision making process of how best to render the display data these applications need not perform any of the rendering processes themselves. In addition the applications can be designed to function independent of a particular device platform etc. since the layer framework located separately in the device will determine how best to render the display data requested by the application.

Computing device includes a processor memory a storage device a high speed interface connecting to memory . The computing device can also include high speed expansion ports not shown and a low speed interface not shown connecting to low speed bus not shown and storage device . Each of the components and are interconnected using various busses and can be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to an input output interface . In other implementations multiple processors and or multiple buses can be used as appropriate along with multiple memories and types of memory. Also multiple computing devices can be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device is a computer readable medium. In various different implementations the storage device can be a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device memory on processor or a propagated signal.

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of duties is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports not shown which can accept various expansion cards not shown . In the implementation low speed controller not shown is coupled to storage device and low speed expansion port not shown . The low speed expansion port which can include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet can be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device can be implemented in a number of different forms as shown in the figure. For example it can be implemented as a standard server or multiple times in a group of such servers. It can also be implemented as part of a rack server system . In addition it can be implemented in a personal computer such as a laptop computer .

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a tangible program carrier for execution by or to control the operation of data processing apparatus. The tangible program carrier can be a propagated signal or a computer readable medium. The propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a computer. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device.

Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Only a few implementations and examples are described and other implementations enhancements and variations can be made based on what is described and illustrated in this application.

