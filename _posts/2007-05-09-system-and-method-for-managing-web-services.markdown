---

title: System and method for managing web services
abstract: A system for managing a plurality of web services of a service oriented architecture (SOA) comprising a registry including a description of each of the plurality of web services registered in the registry, a service filter adapted to filter at least one request of a client invoking at least one of the web services registered in the registry, wherein the service filter is adapted for gathering run-time information about the request in accordance with the description of the respective web service in the registry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08180849&OS=08180849&RS=08180849
owner: Software AG
number: 08180849
owner_city: Darmstadt
owner_country: DE
publication_date: 20070509
---
This application claims benefit of priority of European application no. EP 06011491.5 titled System and Method for Managing Web Services filed Jun. 2 2006 and whose inventors are Johannes Viegener Harald Schoning Bjoern Brauel and Ulrich Heberer.

European application no. 06011491.5 titled System and Method for Managing Web Services filed Jun. 2 2006 and whose inventors are Johannes Viegener Harald Schoning Bjoern Brauel and Ulrich Heberer is hereby incorporated by reference in its entirety as though fully and completely set forth herein.

The present invention relates to a system and a method for managing web services of a service oriented software architecture.

Web services are standardized interfaces for exchanging data from one computer to another over a computer network for example the Internet. An application may request data from a server over the computer network using a web service provided by the server. Such a request is typically enclosed in a SOAP envelope which is conveyed using HTTP and may comprise XML in conjunction with other web related standards. More technically advanced applications combine various web services to obtain or process the desired data. A software architecture which is developed around a plurality of web services is called a service oriented architecture SOA .

In a SOA resources are made available to participants in the network as independent services that the participants can access in a standardized way. Whereas most definitions of a SOA use SOAP requests conveyed via HTTP HTTPS over TCP IP a SOA may use any web service based technology. The web services interoperate based on formal definitions which are independent from the underlying platform and programming language. The interface definition encapsulates the specific implementations. A SOA is independent of a specific development technology such as Java and .NET . The software components become very reusable because the interface is standards compliant and is independent from the underlying implementation of the web service logic. For example a C C Sharp service could be used by a JAVA application and vice versa.

However managing a SOA is a complex and difficult task. Maintaining an overview of the whole landscape of web services some of which may dynamically change over time is important to assure that an application using the various web services properly operates. It is therefore known in the prior art to provide a centralized registry repository such as CentraSite or Systinet 2. The basic principles of the operation of such a registry repository are illustrated in 

As can be seen the centralized registry comprises descriptions of web services of a SOA. Each web service is described by a Web Services Description Language WSDL file and registered using an API e.g. UDDI. The WSDL file contains typically information about the function the data the data type and the exchange protocols of the respective web service. A client intending to send a request to a certain web service can obtain the WSDL file either from the web service itself or from the registry repository to find out how to access the web service. As shown in the registry repository provides various APIs for accessing the information stored in the registry and for its management. Beside the WSDL document and the registration of the service the registry repository can be used to store any type of artefact related to the service e.g. policies.

A centralized registry is useful for the design time of new applications of the SOA. A developer of a new application involving one or more web services can use the stored information to make sure that the web services of the SOA involved in the application receive the data they need and can interact as desired for the new application. However the registry of does not provide any runtime information and does not allow to enforce policies or service level agreements concerning one or more web services. Runtime information is for example helpful to improve or monitor the performance and stability of a new application involving a plurality of web services of the SOA.

The WO 2004 010297 discloses an autonomous software agent which is arranged between a client and a web service. After being configured by a user the autonomous software agent can monitor and influence the operation of the web service without affecting the web service itself. However applying the teaching of the WO 2004 010297 to a complex architecture with a large number of web services requires the time consuming manual configuration of an equally large number of autonomous software agents.

Therefore it would be desirable to provide a more efficient way for managing web services of a SOA which allows to obtain runtime information about the web services of the SOA and thereby overcomes the above explained deficiencies of the prior art.

In one aspect embodiment of the invention this problem is solved by a system for managing a plurality of web services of a service oriented architecture SOA comprising a registry including a description of each of the plurality of web services registered in the registry a service filter adapted to filter at least one request of a client invoking at least one of the web services registered in the registry wherein the service filter is adapted for gathering runtime information about the request in accordance with the description of the respective web service in the registry.

Accordingly the service filter uses the already available description of a web service to gather runtime information about the web service. The descriptions defined in the registry are therefore available not only at design time to derive how the plurality of web services operate but define in addition the information which is to be gathered at runtime from the respective web service i.e. when a request from a client is actually serviced by the web service. The registry is therefore the central point in the overall SOA. No additional manual step is needed to ensure the gathering of runtime data from the web service.

In one embodiment the service filter is further adapted to modify the request during runtime in accordance with the description of the respective web service in the registry. Modifying a request may for example comprise the redirecting of a request directed to a first web service to a second web service or endpoint registered in the registry. This may be helpful for load balancing or to dynamically replace a failed web service.

Preferably the service filter is further adapted to gather statistical data on the usage of the invoked web service such as usage count for a certain web service bandwidth usage identities distribution over time time of day or longer period response times and data amount etc.

Furthermore the service filter may be further adapted to supervise the availability of the invoked web service and to issue an alert if the invoked web service is not available. Policies for alerting conditions for raising an alert methods and addressees of alerting can be stored in the registry thus allowing a single point of alert configuration. In addition the registry stores the governance information for a web service ownership responsibility which can be used to dynamically determine the addressees of alerts. Downtimes of an application using a failed web service can thus be reduced.

Preferably the service filter is adapted to perform at least one lookup in the registry during runtime wherein the result of the lookup determines the processing of the request and or its response from the web service by the service filter. Accordingly the service filter uses the most recent description of the web service to determine its gathering of runtime information.

In one embodiment the runtime information gathered by the service filter is stored preferably together with the description of the web service in the registry of the system. A developer or any other user can therefore easily access the obtained runtime information together with the description of the respective web service. This storage of runtime information in the registry also enables the search for unusual usage patterns e.g. for fraud detection and the recognition of trends e.g. for prediction of future usage patterns.

In one alternative the service filter is arranged on a service proxy which might be even running on a different machine than the web service itself. Using a separate proxy component or even a separate machine provides a maximum amount of flexibility for implementing the service filter regardless of the specific implementation of the web service.

According to a further aspect one embodiment of the present invention concerns a method for managing a plurality of web services of a service oriented architecture SOA comprising the steps of

Memory Medium Any of various types of memory devices or storage devices. The term memory medium is intended to include an installation medium e.g. a CD ROM floppy disks or tape device a computer system memory or random access memory such as DRAM DDR RAM SRAM EDO RAM Rambus RAM etc. or a non volatile memory such as a magnetic media e.g. a hard drive or optical storage. The memory medium may comprise other types of memory as well or combinations thereof. In addition the memory medium may be located in a first computer in which the programs are executed and or may be located in a second different computer which connects to the first computer over a network such as the Internet. In the latter instance the second computer may provide program instructions to the first computer for execution. The term memory medium may include two or more memory mediums which may reside in different locations e.g. in different computers that are connected over a network.

In the following embodiments of the system and the method of the present invention are described with respect to managing a simplified arrangement of only a single client accessing a single web service . However it is to be understood that embodiments of the present invention may be used to facilitate the managing of large arrangements having tens or hundreds of web services servicing requests of a plurality of clients.

As can be seen the system comprises a registry . The registry comprises one or more APIs Application Programming Interfaces for storing and retrieving WSDL files as well as the runtime information stored in the registry as described below. Further there is preferably an administration API for administrating the registry . The registry may be implemented as program instructions and or data stored on a memory medium of a computer system and executable by a processor. Thus for example the registry may comprise a database of WSDL files with one or more APIs for storing and retrieving the WSDL files. The APIs may be implemented as program instructions e.g. stored on the memory medium where the registry is stored.

As illustrated by the double headed horizontal arrow in the client issues a request to a web service for example in order to obtain some data. Preferably both the request and the response from the client are sent as an XML file using for example SOAP over HTTP. The request received from the client however is not immediately processed by the web service but at first filtered by the service filter . The service filter intercepts the incoming request modifies the data where needed and hands the request then to the original web service . The response from the web service after processing the request may again be processed by the service filter in the opposite direction and finally returned to the client . In this manner the service filter obtains during runtime information concerning the request and possibly its response which is then forwarded and stored in the registry as indicated by the arrow in . Communication of the gathered runtime information and of configuration settings for the service filter is in this embodiment achieved by using a service filter API which communicates with the API of the registry 

Runtime information provided by the service filter might in a very simple case be only information about which entity of the SOA calls which web service at what time. In more advanced embodiments the service filter will obtain more information such as user accounts involved size of a request and its response processing time breakdowns etc. From a more structured point of view the following four different technical areas can be identified to which the runtime information gathered by the service filter may relate 

First the runtime information can reveal the statistics for the web services involved in the SOA. Statistical information such as usage count the provision of interconnection graphs with bandwidth usage and identities the distribution over time time of day or longer period and the response times and data amounts being sent provide an administrator of the SOA with a central view on the usage of the involved web services.

Another aspect is the technical monitoring of the SOA which involves alerts being sent to the right contacts in case of certain events such as the non availability of a web service. Monitoring provided by the service filter may further involve virus and security checks debugging support for the development of new applications and generally an assessment of the quality of service provided by the web services of the SOA. Since all the gathered information is fed back to the registry the registry allows to keep the monitored SOA running from a central point and to assess its success based on historical data.

In addition to gathering information about the SOA the service filter may in a more advanced embodiment also actively change the processing of a request. Dynamic concepts such as loose coupling can be realized if the service filter redirects a request initially directed to a certain web service to another web service not shown in . This technical feature allows using dynamic endpoints in the requests from the client for example for load balancing if a web service is faced with a large number of requests exceeding its processing capacities or to automatically redirect a request sent to a failed web service to a backup web service not shown in . Conditions for and details of redirections can also be stored in the registry thus providing a single point of control.

Finally the gathering of runtime information can be used to enforce policies or service level agreements for example concerning a predetermined response time of a web service to a certain request.

In the embodiment of the service filter performing the above described function is realized as an add on function to the web service for example with platforms ranging from dedicated web servers and .Net environments IIS ASP to J2EE or Java Servlet based installations of the web service the details of which are generally known to the person skilled in the art.

In the following an exemplary processing of an incoming request by the service filter of the embodiments of or is explained in detail with reference to the flow chart of 

The processing of an incoming request starts at step with the determination whether the incoming request is a SOAP request. In the non limiting embodiment of only SOAP requests are filtered for runtime information. If the request is a SOAP request the web service addressed by the request is identified in step using the URL indicated in the header of the request if not only SOAP requests but also other types of requests are filtered other techniques may be used to identify the web services addressed in the incoming request .

Step comprises an optional lookup in the registry to obtain the current description of the web service addressed by the request in particular to determine at runtime which information is to be gathered from the request and or its response and whether the request is additionally to be modified. Information which can be obtained during the lookup step and which is evaluated during the subsequent step may concern whether the addressed web service is flagged for reporting i.e. whether it is marked in the description in the registry that runtime data are to be gathered for this specific web service. In an SOA having hundreds of web services only a selection of web services might be relevant for obtaining runtime information or for modifying a request from a client.

If the respective web service is not marked for reporting i.e. gathering of runtime information or even unknown to the filter it is forwarded in step and processed by the addressed web service without any further involvement of the service filter. In this case an alert could be sent to make the fact known that there is an unknown service

Otherwise the runtime information is gathered in step from the request for example information concerning the requesting client the host the time stamp and the size etc. All of the above mentioned alternatives for the runtime information and for possible modifications of the incoming request can be obtained by the filter in this step. The obtained runtime information can be stored locally as shown in or immediately be sent to the registry not shown .

After gathering the runtime information from the request in step the request is forwarded to the web service in step . The response from the web service is processed by the service filter in step and again either stored locally or immediately forwarded to the registry. If the results of the steps and are stored locally there is a further step wherein all results are sent to the registry. Subsequently the response from the web service is returned to the client in step . However the response may also be forwarded to the client before or while the runtime information is sent to the registry. Further the obtained data may not immediately after each request be sent to the registry but for example only periodically after a certain amount of time has passed or after a predetermined number of requests have been processed.

As a result the registry comprises all information of the registered web services namely their description and the runtime information. This runtime information is exemplary shown in the screen shot of . As can be seen the displayed table comprises various columns with exemplary runtime information. Whereas the leftmost column identifies the web service the second row indicates the IP address of a client which contacted the services. Further rows indicate the size of the request and its response as well as the user the server providing the web service the port of the server and the URL which was used in the request to contact the web service. The last two columns finally contain the time stamps for a request and the corresponding response. Already this simplified example allows deriving valuable information about the performance of the web services since the time difference between the two time stamps reflects the response time for servicing the respective request.

If one web service is excessively requested this situation will be reflected in the pie chart of and the administrator can immediately initiate counter measures such as redirecting further requests directed to the overloaded web service to another endpoint. As a result the described system and method allow a user to obtain a full overview and control of the static and dynamic aspects of the managed SOA.

