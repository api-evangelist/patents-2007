---

title: Visibility-aware services
abstract: The present visibility-aware service reduces power-intensive activities when a window associated with the visibility-aware service is not visible. The window is not visible when the window is minimized or when the window is switched from a foreground position to a background position on a display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917773&OS=07917773&RS=07917773
owner: Microsoft Corporation
number: 07917773
owner_city: Redmond
owner_country: US
publication_date: 20070502
---
Maximizing battery life on a mobile device presents a persistent challenge to mobile device users. In order to aid users in maximizing battery life many operating systems provide power management tools that allow users to customize consumers of battery power. Two of the biggest consumers of battery power are the display and the hard disk of the mobile device. The power management tools allow users to customize when the display and the hard disk are active. Another large consumer of battery power is power intensive activities such as animation. For example animation requires processing power each time the screen is redrawn. Thus this constant redrawing of the screen drains the battery.

Because mobile device users want the ability to surf the web when the mobile device is running on batteries web pages that display animation present a difficult challenge for maximizing battery life. In addition with the advent of tabbed browsers multiple web pages that display animation further consume battery power which reduces battery life. Therefore mobile device users are not able to surf the web for as long as desired because the animation on the web pages reduce the battery life of the mobile device.

Described herein are various technologies and techniques for minimizing battery power via a visibility aware service. Implementations of the visibility aware service reduce power intensive activities when a window associated with the visibility aware service is not visible.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The following discussion first describes one example of an operating environment in which an example visibility aware service may be implemented. The discussion then describes processing that implements a visibility awareness feature that prolongs battery life. Next the discussion describes a portion of an example application programming interface API for an example visibility aware service. Lastly the discussion describes one possible configuration for a device that implements the visibility awareness feature.

However before describing the above items it is important to note that various embodiments are described fully below with reference to the accompanying drawings which form a part hereof and which show specific implementations for practicing various embodiments. Other embodiments may be implemented in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete. Embodiments may take the form of a hardware implementation a software implementation executable by a computing device or an implementation combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

In various embodiments the logical operations may be implemented 1 as a sequence of computer implemented steps running on a computing device and or 2 as interconnected machine modules i.e. components within the computing device. The implementation is a matter of choice dependent on the performance requirements of the computing device implementing the embodiment. Accordingly the logical operations making up the embodiments described herein are referred to alternatively as operations steps or modules.

A visibility aware service may be implemented in one of several different operating environments. The following discussion describes a visibility aware service that is implemented in conjunction with a browser 1.06 in a browsing environment. The example visibility aware service is a timer service that is utilized by one or more components e.g. components and on a web page i.e. window . Hereinafter window may be interchangeably referred to as web page and visibility aware service may be interchangeably referred to as timer service for convenience. Component may execute a particular function e.g. animation based on an interval specified with the timer service. On each specified interval there is a timer tick that informs component to perform the animation. For example component may re draw the animation after the specified interval e.g. 100 ms . As will be described the present timer service reduces animation processing for the associated web page when the web page is minimized or when the web page is switched from a foreground position to a background position on the display. Switching from a foreground position to a background position may occur by switching the web page from a foreground tab to a background tab in a tabbed browser. Because the present visibility awareness feature reduces processing when the web page is not visible battery consumption is reduced.

In the example browsing environment web content and formatting information are supplied as input to a layout engine . Web content includes hypertext markup language HTML extensible markup language XML image files and other content that is displayable on a web page. Formatting information includes cascading style sheets CSS extensible style sheet language XSL and other technologies for defining document transformation and presentation. An application such as browser may utilize the layout engine to display the formatted web content on a screen. The layout engine paints the web content in a content area of a window displayed on a monitor.

The layout engine also maintains a list of visibility aware services e.g. visibility aware service . The layout engine updates the list of visibility aware services when a visibility aware service is created or released. In addition the layout engine maintains a visibility state for each window e.g. window and . The visibility state for each window effectively controls power intensive activity via a corresponding visibility aware service . The layout engine sends notifications of the visibility state of windows to associated visibility aware services. Windows and may be one of multiple tabbed windows in a tabbed browser independent windows or any window in which power intensive activities occur. The layout engine may maintain the visibility state for each window separately jointly or in any manner that correlates a window to an associated visibility state. In one embodiment the layout engine maintains the list of visibility aware components and the visibility state of windows per thread. For example if each tabbed web page in a tabbed browser is a thread the layout engine maintains the page visibility for each tabbed web page.

Events represent processing when a window becomes invisible. At event window becomes invisible. As mentioned above window may become invisible by minimizing the window by switching the window from a foreground tab to a background tab or by any other mechanism that makes the window no longer prominently displayed. When window becomes invisible top level window receives a notification that window has changed visibility states. At event top level window sends a notification to layout engine that the state of window has changed. At event layout engine identifies the visibility aware services associated with the window that changed visibility states. Layout engine then sends a notification that the visibility state has changed to each of the identified visibility aware services. At event the visibility aware services receive the notification and recognize that the state has changed to invisible. The visibility aware service s then reduce power intensive activities associated with the service. in conjunction with the corresponding text illustrate and describe one example technique for reducing power intensive activities.

Events represent processing when a window becomes visible. At event window becomes visible. When window becomes visible top level window receives a notification that window has changed visibility states. At event top level window sends a notification to layout engine that the state of window has changed. At event layout engine identifies the visibility aware services associated with the window that changed visibility states. Layout engine then sends a notification that the visibility state has changed to each of the identified visibility aware services. At event each of the visibility aware services receives the notification and recognizes that the state has changed to visible. The visibility aware service s then resumes power intensive activities.

Events represent processing that occurs upon creation of a visibility aware service. At event a visibility aware service is created. in conjunction with the corresponding text illustrates and describes one example technique for creating a visibility aware service. At event layout engine identifies a window associated with the created visibility aware service and determines a visibility state associated with the window. At event layout engine sends a notification of the state to the created visibility aware service. At event the visibility aware service performs power intensive processing based on the visibility state of the associated window. For example if the visibility state is visible power intensive activities are allowed. If the visibility state is invisible power intensive activities are reduced.

One skilled in the art will appreciate that illustrates example processing to implement the visibility awareness feature. Not all of the events shown in need to be executed in order to implement the present visibility awareness feature. In addition additional events may be added without departing from the implementation of the present visibility awareness feature.

The present visibility aware timer service may be an extension to a well known timer service. The extension for the visibility aware timer service includes a CreateTimer method a SetMode method a mode variable and code . The SetMode method allows a software developer to specify the manner in which the timer operates. The software developer may specify that the timer service operate in a well known manner where a consumer e.g. web page controls the timer. Alternatively the software developer may specify that the timer service operate in a visibility aware manner where the timer automatically halts when the window is not visible and restarts when the window becomes visible again. One skilled in the art will readily appreciate that actions performed by the visibility aware service depend on the type of function provided by the service and may differ from the actions described above but will be dependent on the visibility of the associated window.

A consumer of the timer API can opt in to the new visibility aware aspect by declaring an extended timer pointer and calling SetMode method to specify the visibility aware mode. In one embodiment the CreateTimer method defaults to a normal mode of operation that is not visibility aware. However in another embodiment the CreateTimer method may default to the visibility aware state. The SetMode method modifies a mode variable in accordance with parameters provided with the SetMode method. The mode variable indicates whether the service supports the visibility awareness feature. Once the mode is set existing software does need to change in order to utilize the present visibility awareness feature.

A call to freeze method temporarily halts the timer. When the timer halts callbacks are suspended and the reported time is locked. Timer events that come due while the clock is frozen are serviced immediately when the clock is unfrozen. The freeze method may utilize conventional techniques to control the clock. The conventional techniques allow local synchronization by temporarily freezing the timer. Freezing the time may be performed explicitly via a control or a script or implicitly via a container. For example a container may freeze the timer when the container is painting or when the container is servicing several callbacks at the same time. Controls or scripts may freeze the timer when the controls or scripts execute actions that have timed behavior. For example if a script wants to start a video and an audio clip simultaneously the script may freeze the timer issue the necessary commands and then unfreeze the timer.

Code modifies power intensive activities based on the visibility state of the window that the service supports. In one implementation code may automatically call the freeze method to halt or restart the timer based on the visibility state. By utilizing the conventional technique for controlling the timer code allows a consumer to override the automatic implementation without causing an error. One skilled in the art will appreciate that there may be many other methods associated with visibility aware service such a GetTime Advise and other methods that enable synchronization. For example the Advise method may schedule single or periodic notification callbacks. The freeze method described above suspends these callbacks. The discussion above focuses on the methods used to implement the visibility awareness feature.

Additionally computing device may also have other features and functionality. For example computing device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may also include one or more communication connections that allow the computing device to communicate with one or more computers and or applications . Device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a speaker printer monitor and other types of digital display devices may also be included. These devices are well known in the art and need not be discussed at length here.

The processes described above may be implemented using computer executable instructions in software or firmware but may also be implemented in other ways such as with programmable logic electronic circuitry or the like. In some alternative embodiments certain of the operations may even be performed with limited human intervention. Moreover the process is not to be interpreted as exclusive of other embodiments but rather is provided as illustrative only.

As described above the visibility aware timer service stops processing animation in web pages that are hidden or minimized. Thus the visibility aware timer service effectively reduces power intensive activities that cause excessive processor usage and drain battery life. The visibility aware timer service may be an independent timer or may be a named timer used by multiple components. By utilizing the present visibility awareness feature applications can provide significant performance improvements. In the above described embodiment an internal timer clock remains ticking so that the component can handle expiration of the animation. However as a further refinement the internal timer clock may cease ticking which would further reduce battery consumption.

While the above discussion describes an embodiment in which the visibility aware service is a timer service used for animation the present visibility aware services are envisioned for implementation in other environments. For example the visibility aware services may suspend spell checking in a minimized window or may suspend audio and or video playback in a minimized window. These and other actions that decrease the amount of processing required are envisioned.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

